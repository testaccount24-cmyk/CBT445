ADDR     TITLE 'ADDR '
***********************************************************************
*                                                                     *
*        Generate address for an instruction                          *
*        as nnnn(rr)    (format 1)                                    *
*        or nnnn(rr,xx) (format 2)                                    *
*        or Annnnn      (format 3) - if USING active for base reg     *
*                                                                     *
*  Called by RX, RS, SI, SS                                           *
*                                                                     *
*  Input: addressed by R1:                                            *
*    +0  2 bytes x'00' (always ?)                                     *
*    +2  2 byte address part of instruction                           *
*    +4  1 byte flag (x'00' or x'01' if format 1 adr.)                *
*    +5  start of 3 byte length for SS instrs or x'00'                *
*    +6  2 byte index reg no. (char 00-15) or x'0000'                 *
*    +8  4 byte address of output buffer holding current line         *
*    +15 1 byte instruction format from AXN                           *
*                                                                     *
*  Output: addressed by R1:                                           *
*    +0  1-12 byte address                                            *
*    +12 length of address (fullword)                                 *
*                                                                     *
*  Attributes:                                                        *
*    reusable                                                         *
*  History:                                                           *
*    Use outline macro to map the output line            CFK Feb 2000 *
*    SAVA parms now 16 bytes                             CFK Apr 2000 *
*    Use register equates                                CFK Dec 2000 *
*    Map parameters with dsect                           CFK Dec 2000 *
*    SAVA and USING now use standard calling conventions CFK Sep 2003 *
*    Remove call to CXN                                  CFK Oct 2003 *
*    Use standard linkage conventions                    CFK Nov 2003 *
*    SAVA now passed csect label is in.                  CFK Dec 2003 *
*                                                                     *
***********************************************************************
PRMDUM   DSECT                    parameters                  CFK*DEC00
PRMIADR4 DS    0XL4           +0  input address (4 bytes)     CFK*DEC00
         DS    XL2            +0                              CFK*DEC00
PRMIADR2 DS    XL2            +2  address part of instr       CFK*DEC00
PRMIFLG1 DS    X              +4  flag, x'00' or x'01'        CFK*DEC00
PRMIDLEN DS    0CL3           +5  3 byte len for SS instr     CFK*DEC00
         DS    C              +5                              CFK*DEC00
PRMINDEX DS    CL2            +6  char index reg no or x'00'  CFK*DEC00
PRMI@PA  DS    XL4            +8  @ output buffer             CFK*DEC00
         DS    XL3            +12                             CFK*DEC00
PRMIFMT  DS    X              +15 instruction format as AXN   CFK*DEC00
         ORG   PRMDUM                                         CFK*DEC00
PRMOADR  DS    CL12               output address (char)       CFK*DEC00
PRMOLEN  DS    XL4                output address length       CFK*DEC00
*                                                             CFK*DEC00
         OUTLINE                  map output line             CFK*FEB00
ADDR     CSECT
         ENTER ,                  entry logic                 CFK*NOV03
         LR    R10,R1             copy @ parms                CFK*NOV03
         USING PRMDUM,R10         tell assembler              CFK*NOV03
         ENTRY SAVASEC1           ref'ed by PASS4             CFK*DEC03
         EXTRN SAVA               csect
         EXTRN USING              csect
         ST    R1,APARMS          save @ parms                CFK*NOV03
         MVC   PAS(4),PRMI@PA     copy @ output buffer
         L     R6,PAS             load @ output buffer
         USING OUTLINE,R6         tell assembler              CFK*FEB00
         MVC   BAS(4),PRMIADR4    copy address part of instr
         MVC   RGG(4),4(R10)      copy index reg no. (char)   CFK*NOV03
         MVC   DISP+2(2),PRMIADR2 copy address part of instr
         MVC   FLR+2(2),DISP+2    copy it to parms for USING
         NI    DISP+2,X'0F'       mask out displacement
         MVI   FLR,X'03'          flag check for using for this reg
         L     R15,AUSIX          FIND ABSOLUTE ADDRESS       CFK*SEP03
         LA    R1,FLR             get @ USING parms           CFK*SEP03
         BASR  R14,R15            call USING csect            CFK*SEP03
* USING parms are:
*    +0  hex flag, 00 - drop, 01 or 02 - insert, 03 - retrieve
*    +2  1 byte address part of instruction
*    +3  1 byte address part of instruction
*    +4  3 byte current loc (?) - if insert
*    +7  1 byte instruction format from AXN table
         L     R3,FLR             get IC of using or zero
         SLL   R3,8               mask off
         SRL   R3,8                high byte
         A     R3,DISP            add displacement
         ST    R3,DIS2            save address of operand
         UNPK  DWA1(7),DIS2+1(4)  CONVERT TO BCD              CFK*OCT03
         TR    DWA1(6),=C'0123456789ABCDEF'-240   make hex    CFK*OCT03
         CLI   OUTADDR1,C'0'      first address already there ?
         BE    SECA               yes, this must be second address
         MVC   XFG(1),PRMIFMT     copy instruction format code
         NI    XFG,C'0'           get only high 4 bits
         CLI   XFG,X'20'          RX instruction ?
         BE    SECA               BR if yes
         CLI   XFG,X'30'          RS instruction ?
         BE    SECA               BR if yes
         MVC   OUTADDR1,DWA1      FIRST ADDRESS field         CFK*OCT03
         B     SECB               and skip copy of 2nd address
SECA     MVC   OUTADDR2,DWA1      SECOND ADDRESS field        CFK*OCT03
SECB     CLI   FLR,X'00'          was a using active for this reg ?
         BE    RAD                branch if not
LDIS     L     R3,DIS2            reload addres of operand
         SLL   R3,8               NO
         STCM  R3,B'1110',SAVADR  pass address to SAVA        CFK*APR00
         MVC   SAVTYPE,PRMIFMT    pass address type to SAVA   CFK*APR00
         MVC   SAVLABEL,SPACES    clear address label         CFK*APR00
         L     R15,ASAVA          SAVE ADDRESS                CFK*SEP03
         LA    R1,SAVAPRMS        get @ parms for SAVA        CFK*JAN04
         BASR  R14,R15            call SAVA csect             CFK*SEP03
         LA    R5,SAVOUTLB+7      )
         LA    R4,8               ) find
CLL      CLI   0(5),C' '          )  end
         BNE   LAA                )   of
         BCT   R4,CLM             )    label
CLM      BCT   R5,CLL             )
LAA      DS    0H                                             CFK*NOV03
         MVC   0(8,R10),SAVOUTLB  pass label back to caller   CFK*NOV03
         CLC   CZ(3),RGG+1        IS INDEX ZERO
         BE    RADD               return IF YES
         CLI   RGG,X'01'          IS THERE A LENGTH OR INDEX
         BE    RADD               return if not
         MVI   1(R5),C'('         YES, add (
         CLI   RGG+1,X'00'
         BNE   RAD2
RADA3    LA    R4,4(R4)           ONE SIGNIF. CHAR.
         CLI   RGG+2,C'0'
         BNE   RADO
         MVC   2(1,R5),RGG+3      copy 1 byte register number
         BCTR  R5,0               subtract 1                  CFK*NOV03
         BCTR  R4,0               subtract 1                  CFK*NOV03
         MVI   4(R5),C')'         add final )
         MVC   PRMOADR,SAVOUTLB   pass label back to caller
         B     RADD               and return
RADO     MVC   2(2,R5),RGG+2      TWO SIGNIF. CHAR.
         MVI   4(R5),C')'         add final )
         MVC   PRMOADR,SAVOUTLB   pass label back to caller
         B     RADD               and return
RAD2     CLI   RGG+1,C'0'         THREE SIGNIF. CHAR.
         BE    RADA3
         MVC   2(3,R5),RGG+1      copy 3 byte length
         MVI   5(R5),C')'         add final )
         LA    R4,5(R4)
         MVC   PRMOADR,SAVOUTLB   pass label back to caller
         B     RADD               and return
RAD      LA    R4,8               ADDRESS IS ABSOLUTE
         L     R3,DISP            get displacement
         CVD   R3,DWA1            make it decimal
         UNPK  DWA(8),DWA1(8)     make it ebcdic
         OI    DWA+7,C'0'         make last byte ebcdic
         LR    R8,R10             copy @ parms                CFK*NOV03
         LA    R7,3               number of digits to check
         LA    R5,DWA+4           get @ number
CLAD     CLI   0(R5),C'0'         REMOVE LEADING ZEROES
         BNE   RADP               found 1st non-zero
         LA    R5,1(R5)           else get @ next digit
         BCTR  R10,0              subtract 1 from @ parms     CFK*NOV03
         BCTR  R4,0               subtract 1                  CFK*NOV03
         BCT   R7,CLAD
RADP     STC   R7,MVAR+1
MVAR     MVC   0(1,R8),0(R5)
         MVI   4(R10),C'('
         L     R3,BAS             get copy of input instr.
         SRL   R3,12
         CVD   R3,DWA1
         UNPK  DWA(8),DWA1(8)
         OI    DWA+7,C'0'
         CLI   RGG,X'01'          IS THERE A LENGTH
         BE    NXX
         CLI   RGG+1,X'00'        YES
         BE    NX2
         LA    R4,4(R4)
         CLI   RGG+1,C'0'
         BNE   SSR1
         BCTR  R4,0               subtract 1                  CFK*NOV03
         CLI   RGG+2,C'0'
         BNE   SSR2
SRRR     BCTR  R4,0               subtract 1                  CFK*NOV03
         MVC   5(1,R10),RGG+3     LENGTH IS ONE SIGN. CHAR.   CFK*NOV03
         MVI   6(R10),C','                                    CFK*NOV03
         S     R10,TWOC           subtract 2                  CFK*NOV03
         B     SSR3
SSR2     MVC   5(2,R10),RGG+2     LENGTH IS TWO SIGN. CHAR.   CFK*NOV03
         MVI   7(R10),C','                                    CFK*NOV03
         BCTR  R10,0              subtract 1                  CFK*NOV03
         B     SSR3
SSR1     MVC   5(3,R10),RGG+1     LENGTH IS THREE SIGN. CHAR. CFK*NOV03
         MVI   8(R10),C','                                    CFK*NOV03
SSR3     CLC   DWA+6(2),DZA       IS BASE ZERO ?
         BE    NX3
         CLI   DWA+6,C'0'         NO
         BNE   SSR4
         MVC   9(1,R10),DWA+7     BASE IS ONE SIGN. CHAR.     CFK*NOV03
         MVI   10(R10),C')'                                   CFK*NOV03
         BCTR  R4,0               subtract 1                  CFK*NOV03
         B     RADD               and return
SSR4     MVC   9(2,R10),DWA+6     BASE IS TWO SIGN. CHAR.     CFK*NOV03
         MVI   11(R10),C')'                                   CFK*NOV03
         B     RADD               and return
NX3      MVI   8(R10),C')'                                    CFK*NOV03
         S     R4,TWOC3           subtract 3
         B     RADD               and return
NX2      LA    R4,3(R4)
         CLI   RGG+2,C'0'
         BNE   SSR5
         CLI   RGG+3,C'0'
         BNE   LAP
         CLC   DWA+6(2),DZA       is it c'00' ?
         BNE   LAP
         MVI   4(R10),C' '                                    CFK*NOV03
         S     R4,SIXC            subtract 6
         B     RADD               and return
LAP      MVC   5(1,R10),RGG+3                                 CFK*NOV03
         BCTR  R4,0               subtract 1                  CFK*NOV03
         BCTR  R10,0              subtract 1 from @ parms     CFK*NOV03
         B     SSR6
SSR5     MVC   5(2,R10),RGG+2     INDEX IS TWO SIGN. CHAR.    CFK*NOV03
SSR6     MVI   7(R10),C','                                    CFK*NOV03
         CLC   DWA+6(2),DZA       IS THERE A BASE ?
         BNE   SSR7
         MVI   7(R10),C')'        NO                          CFK*NOV03
         S     R4,TWOC3           subtract 3
         B     RADD               and return
SSR7     CLI   DWA+6,C'0'
         BNE   SSR8
         MVC   8(1,R10),DWA+7     BASE IS ONE SIGN. CHAR.     CFK*NOV03
         MVI   9(R10),C')'                                    CFK*NOV03
         BCTR  R4,0               subtract 1                  CFK*NOV03
         B     RADD               and return
SSR8     MVC   8(2,R10),DWA+6     BASE IS TWO SIGN. CHAR.     CFK*NOV03
         MVI   10(R10),C')'                                   CFK*NOV03
         B     RADD               and return
NXX      CLC   DWA+6(2),DZA       IS THERE A BASE ?
         BNE   NXX3
         MVI   4(R10),C' '        NO                          CFK*NOV03
         S     R4,FORM            subtract 4
         B     RADD               and return
NXX3     CLI   DWA+6,C'0'
         BNE   NXX2
         MVC   5(1,R10),DWA+7     BASE IS ONE CHAR.           CFK*NOV03
         BCTR  R4,0               subtract 1                  CFK*NOV03
         MVI   6(R10),C')'                                    CFK*NOV03
         B     RADD               and return
NXX2     MVC   5(2,R10),DWA+6     BASE IS TWO CHAR.           CFK*NOV03
         MVI   7(R10),C')'                                    CFK*NOV03
RADD     L     R10,APARMS         RETURN, reload @ parms      CFK*NOV03
         ST    R4,PRMOLEN         pass back address length
         LEAVE ,                  and return                  CFK*NOV03
         DC    C'IMM='
AUSIX    DC    A(USING)           @ USING csect
ASAVA    DC    A(SAVA)            @ SAVA csect
SPACES   DC    CL8' '             constant                    CFK*APR00
XFG      DC    F'0'
PAS      DC    F'0'               @ output buffer
TWOC3    DC    F'3'               constant
FORM     DC    F'4'               constant
SIXC     DC    F'6'               constant
DZA      DC    C'0000'            constant
DWA1     DC    D'0'               work area
DWA      DC    D'0'               work area
RGG      DC    F'0'
BAS      DC    F'0'               copy of input instruction
TWOC     DC    F'2'               constant
ADD      DC    F'0'
CZ       DC    X'00F0F000'        constant
DISP     DC    F'0'               displacement from operand
DIS2     DC    F'0'               save address of operand
APARMS   DC    F'0'               Save @ parms here           CFK*NOV03
* parms to call USING with                                    CFK*SEP03
FLR      DC    F'0'
         DC    F'0'
* end of USING parms                                          CFK*SEP03
* USING parms are:
*    +0  hex flag, 00 - drop, 01 or 02 - insert, 03 - retrieve
*    +2  1 byte address part of instruction
*    +3  1 byte address part of instruction
*    +4  3 byte current loc (?) - if insert
*    +7  1 byte instruction format from AXN table
* parms to call SAVA with                                     CFK*SEP03
SAVAPRMS DS    0CL20                                          CFK*JAN04
SAVTYPE  DC    X'00'              input type of address       CFK*APR00
SAVASEC1 DC    CL8' '             current csect (set by PASS4)CFK*DEC03
SAVADR   DC    XL3'00'            input address               CFK*APR00
SAVOUTLB DS    0CL8               output symbol               CFK*MAY00
SAVLABEL DC    CL8' '             input symbol or spaces      CFK*APR00
* end of SAVA parms                                           CFK*SEP03
SAVEAREA DS    18F                save area                   CFK*SEP03
         YREGS ,                  register equates            CFK*DEC00
         END

