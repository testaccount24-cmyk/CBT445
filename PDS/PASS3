PAS3     TITLE 'PASS3'
***********************************************************************
*                                                                     *
* Called by PASS4.                                                    *
*                                                                     *
* This module makes the third pass in the dissassembly. It sorts      *
* the list of addresses found during the second pass and eliminates   *
* duplicate entries.                                                  *
*                                                                     *
* History:                                                            *
*   Map ENTRY table in ESD1.                             CFK Apr 2000 *
*   Pass ENTRY name to SAVA.                             CFK Apr 2000 *
*   Map saved address table in SAVA.                     CFK Apr 2000 *
*   Put csect name into address table at +0.             CFK Apr 2000 *
*   Sort reformatted saved address table and scrap       CFK Apr 2000 *
*   table B, saved labels, they are in the address table.             *
*   Code to del dup adresses allows for labels.          CFK Apr 2000 *
*   Abend U13 if sort failed                             CFK Jly 2000 *
*   Pass no. of addresses without dups to SAVA           CFK Jly 2000 *
*   Use register equates for all reg use                 CFK Jly 2000 *
*   Only add entry points for currect CSECT to table     CFK Dec 2001 *
*   Don't put csect into table (now done by PASS4)       CFK Jan 2003 *
*   Dynamic label table support.                         CFK Mar 2003 *
*   Use standard linkage conventions                     CFK Sep 2003 *
*   PUNCH now wants R1 @ card to punch.                  CFK Dec 2003 *
*   Don't pass ENTRY names to SAVA.                      CFK Dec 2003 *
*   Duplicate no. adrs. and @ adrs. in ART.              CFK Dec 2003 *
*   Correctly set AST in SAVA.                           CFK Jan 2004 *
*                                                                     *
***********************************************************************
         ESDSDMAP                     map CSECT table in ESD0 CFK*APR00
         ENTRYMAP                     map ENTRY table in ESD1 CFK*APR00
         LABELMAP                     map adr. list in SAVA   CFK*APR00
PASS3    CSECT
         ENTER ,                      entry logic             CFK*SEP03
         EXTRN COTR                   csect
         EXTRN AST                    in SAVA csect
         EXTRN NENT                   in ESD1 csect
         EXTRN NAST                   in SAVA csect
         EXTRN READA                  csect                   CFK*SEP03
         EXTRN PUNCH                  csect
         EXTRN PASS4                  csect
         EXTRN NEL4                   in ART csect
         EXTRN CURRSECT               csect being processed   CFK*APR00
         L     R3,LOOP                get @ NAST in SAVA csect
         LR    R4,R3                  copy @ NAST in SAVA csect
         S     R4,FOUR                get @ NAST - 4
         MVI   0(4),X'FF'             set SVK flag in SAVA
         L     R10,4(R3)              get @ addresses         CFK*MAR03
         L     R8,0(R3)               get number of addresses
         ST    R8,NEL                 save no. of addresses   CFK*APR00
         SH    R8,=H'1'               subtract 1              CFK*APR00
         BNP   LPS4                   br if 1 or none         CFK*APR00
* sort all addresses with a shell sort                        CFK*APR00
* first calculate maximum step size                           CFK*APR00
         LA    R3,1                   prepare index           CFK*APR00
         LR    R4,R8                  copy no. of adr. - 1    CFK*APR00
         SRA   R4,3                   divide by 8 for max step size R00
         BZ    Z10B                   if < 8 adr. step size=1 CFK*APR00
Z10A     DS    0H                                             CFK*APR00
         MH    R3,=H'3'               multiply by 3           CFK*APR00
         LA    R3,1(R3)               and add 1               CFK*APR00
         CR    R3,R4                  until                   CFK*APR00
         BL    Z10A                   r3 >= no. addresses/8   CFK*APR00
Z10B     DS    0H                                             CFK*APR00
* start of sort proper                                        CFK*APR00
         MH    R3,=AL2(LABENTLN)      calc stride             CFK*APR00
Z20A     DS    0H                     REPEAT                  CFK*APR00
         XR    R4,R4                  FOR R4 = 0 TO R3 - 1    CFK*APR00
Z30A     DS    0H                     ditto                   CFK*APR00
         LR    R5,R8                  copy no. of adr. - 1    CFK*APR00
         MH    R5,=AL2(LABENTLN)      calc offset to last ent CFK*MAY00
         AR    R5,R10                 calc @ last entry       CFK*APR00
Z35B     DS    0H                     REPEAT                  CFK*APR00
         XR    R7,R7                  clear new limit         CFK*APR00
         LA    R6,0(R4,R10)           calc @ first entry in this bank 0
         USING LABELENT,R6            tell assembler          CFK*APR00
         LA    R9,0(R3,R6)            calc @ next entry in this bank 00
Z40A     DS    0H                     FOR R6 = R4 TO R5 STEP R3 K*APR00
         CLC   LABKEY,LABKEY-LABELENT(R9)  are they in seq ?  CFK*APR00
         BNH   Z50A                   already sorted.         CFK*APR00
         MVC   TEP,LABELENT           )                       CFK*APR00
         MVC   LABELENT,0(R9)         ) swap entries          CFK*APR00
         DROP  R6                     )         (LABELENT)    CFK*APR00
         USING LABELENT,R9            )                       CFK*APR00
         MVC   LABELENT,TEP           )                       CFK*APR00
         LR    R7,R6                  set new limit           CFK*APR00
Z50A     DS    0H                                             CFK*APR00
         AR    R6,R3                  bump pointer            CFK*APR00
         AR    R9,R3                  bump other pointer      CFK*APR00
         CR    R9,R5                  got to the end ?        CFK*APR00
         BNH   Z40A                   NEXT R6 if not.         CFK*APR00
         LTR   R5,R7                  copy new limit          CFK*APR00
         BNZ   Z35B                   UNTIL no swaps done     CFK*APR00
         AH    R4,=AL2(LABENTLN)      point @ next bank       CFK*APR00
         CR    R4,R3                  done all banks ?        CFK*APR00
         BL    Z30A                   do next bank if needed  CFK*APR00
         SH    R3,=AL2(LABENTLN)      subtract 1 * entry size CFK*APR00
         BZ    SORTDONE               have we just done 1 step size ? 0
         XR    R2,R2                  clear high reg of r2,r3 CFK*APR00
         D     R2,=F'3'               else divide by 3        CFK*APR00
         B     Z20A                   and carry on.           CFK*APR00
         DROP  R9                     done with LABELENT      CFK*APR00
* finished main loop                                          CFK*APR00
SORTDONE DS    0H                                             CFK*APR00
         LR    R3,R8                  else get number of adr. - 1
         LR    R5,R10                 get @ first address (output)
         LA    R2,LABENTLN(R5)        get @ 2nd address (i/p) CFK*APR00
         LA    R4,1                   start count of unique addresses
* remove duplicate addresses
         USING LABELENT,R5                                    CFK*APR00
DLLP     CLC   LABCADR,LABCADR-LABELENT(R2)   duplicates ?    CFK*DEC03
         BL    NOTDUP                 br if not duplicate entries
         BH    SORTFAIL               out of order !! abend   CFK*APR00
         CLI   LABNAME,C' '           1st name blank ?        CFK*APR00
         BE    MOVEENT                if so drop 2nd entry on it *APR00
         DROP  R5                     was LABELENT            CFK*APR00
         USING LABELENT,R2                                    CFK*APR00
         CLI   LABNAME,C' '           2nd name blank ?        CFK*APR00
         BE    NOMOVE                 if so keep first        CFK*APR00
         CLC   LABNAME,LABNAME-LABELENT(R5) the same name ?   CFK*APR00
         BE    NOMOVE                 if so duplicates        CFK*APR00
         BL    SORTFAIL               out of order !! abend   CFK*APR00
         DROP  R2                     else keep both          CFK*APR00
NOTDUP   DS    0H                                             CFK*APR00
         LA    R4,1(R4)               bump unique adddress count
         LA    R5,LABENTLN(R5)        get @ next output       CFK*APR00
         CR    R5,R2                  addresses match ?       CFK*APR00
         BE    NOMOVE                 if so don't move anything K*APR00
MOVEENT  DS    0H                                             CFK*APR00
         MVC   0(LABENTLN,R5),0(R2)   else shuffle down entry CFK*APR00
NOMOVE   DS    0H                                             CFK*APR00
NDL      LA    R2,LABENTLN(R2)        get @ next input        CFK*APR00
         BCT   R3,DLLP                loop until all scanned
* end of loop to remove duplicate addresses
PSVV     ST    R4,NEL                 save number of unique addresses
         L     R3,ASTA                get @ AST in SAVA csect CFK*JAN04
         LA    R5,LABENTLN(R5)        get @ next output       CFK*JAN04
         ST    R5,0(R3)               reset @ next free adr.  CFK*JAN04
         L     R5,LOOP                get @ NAST in SAVA      CFK*JLY00
         ST    R4,0(R5)               reset no. of addresses  CFK*JLY00
LPS4     DS    0H                                             CFK*APR00
         L     R4,NAV                 get @ NEL4 in ART csect CFK*APR00
         ST    R10,4(R4)              copy @ addresses        CFK*DEC03
         MVC   0(4,R4),NEL            copy no. of addresses   CFK*DEC03
         MVC   8(8,R4),0(R4)          duplicate data in ART   CFK*DEC03
         L     R4,NEL                 get number of addresses
         LR    R5,R10                 get @ first address     CFK*APR00
         USING LABELENT,R5            tell assembler          CFK*APR00
         L     R3,SCOT                get @ COTR csect
         CLI   0(R3),X'01'            'P' control card read ?
         BNE   LPS5                   PUNCHED
* start of loop to punch all labels
PLP      DS    0H                     YES                     CFK*SEP03
         MVC   ADPN(8),LABNAME        copy symbol if present  CFK*APR00
         UNPK  ADPN+9(7),LABADR(4)    unpack address          CFK*SEP03
         TR    ADPN+9(1),=C'ABCDEFGHIJKLMNOP'-240 make A-P    CFK*SEP03
         TR    ADPN+10(5),=C'0123456789ABCDEF'-240 make hex   CFK*SEP03
         MVI   ADPN+14,C' '           clear gash byte         CFK*SEP03
         L     R15,APUN               get @ PUNCH csect       CFK*SEP03
         LA    R1,ADPN                get @ PUNCH parms       CFK*DEC03
         BASR  R14,R15                call PUNCH              CFK*SEP03
         LA    R5,LABENTLN(R5)        get @ next address
         BCT   R4,PLP                 punch next address if present
* end of PLP loop
         LA    R2,R2                  number of cards to punch
         MVC   ADPN+9(6),BEND         copy C'END   '
* start of loop to punch two cards
RPEN     L     R15,APUN               get @ PUNCH csect       CFK*SEP03
         LA    R1,ADPN                get @ PUNCH parms       CFK*DEC03
         BASR  R14,R15                call PUNCH              CFK*SEP03
         MVI   ADPN,C' '              ) clear ADPN
         MVC   ADPN+1(79),ADPN        )  to spaces
         BCT   R2,RPEN
* end of RPEN loop
         B     LPS6
LPS5     L     R3,SCOT                get @ COTR csect
         CLI   0(R3),X'02'            'R' control card read ?
         BNE   LPS6                   READ                    CFK*APR00
         L     R15,BREADA             YES - get @ READA csect CFK*SEP03
         LA    R1,=A(ADPN)            get @ input buffer      CFK*SEP03
         BASR  R14,R15                call READA              CFK*SEP03
*  input card format is 8 byte label at +0 followed by 6 byte address
* at +10.
*  BCT loop to process cards starts here
LPS8     DS    0H                                             CFK*SEP03
         MVC   ABC+3(R1),0(R5)        copy this address
         UNPK  CXR3(9),0(5,R5)        unpack address          CFK*SEP03
         TR    CXR3(8),=C'0123456789ABCDEF'-240  make hex     CFK*SEP03
         LA    R5,4(R5)               get @ next address
         MVC   0(8,R6),BL48           blank out
         L     R3,SCOT                get @ COTR csect
         CLI   0(R3),X'02'            'R' control card read ?
         BNE   LPS7                   br. if not
         CLC   ADPN+10(5),CXR3+1      is card for this address?
         BNE   LPS7                   br. if not
         L     R3,ABC
         LA    R3,193(R3)             add c'A'
         STC   R3,ABC+3
         CLC   ABC+3(R1),ADPN+9       does high byte match ?
         BNE   LPS7                   br. if not
         MVC   0(8,R6),ADPN           STORE SYMBOL IN
         LA    R6,8(R6)               TABLE
         L     R15,BREADA             get @ READA csect       CFK*SEP03
         LA    R1,=A(ADPN)            get @ buffer for card   CFK*SEP03
         BASR  R14,R15                call READA              CFK*SEP03
         CLC   ADPN+9(R3),BEND        = c'END' ?
         BNE   BLPS8                  br if not
         CLI   ADPN,X'02'
         BNE   BLPS8
         L     R3,SCOT                get @ COTR csect
         MVI   0(3),X'00'             clear 'R' control card flag
BLPS8    BCT   R4,LPS8                br if more addresses to process
         B     LPS6                   else exit loop
LPS7     LA    R6,8(R6)               get @ next entry in B
         BCT   R4,LPS8                loop if more addresses to process
* end of loop to read cards
LPS6     DS    0H                     exit point              CFK*SEP03
         LEAVE                        return to PASS0         CFK*SEP03
SORTFAIL DS    0H                     sorted rec out of order CFK*JLY00
         ABEND 13,DUMP                take a dump             CFK*JLY00
         DC    C'IMM='                start of data area
         LTORG ,                                              CFK*SEP03
BREADA   DC    A(READA)               @ READA csect           CFK*SEP03
APASS4   DC    A(PASS4)               @ PASS4 csect
APUN     DC    A(PUNCH)               @ PUNCH csect
SCOT     DC    A(COTR)                @ COTR csect
ABC      DC    F'0'
NENT3    DC    A(NENT)                @ NENT in ESD1
ACURRSEC DC    A(CURRSECT)            @ CURRSECT in ESD0      CFK*APR00
TP33     DC    2F'0'                  temp store for reg. 3 and 4
ASTA     DC    A(AST)                 @ AST in SAVA csect
NAV      DC    A(NEL4)                @ NEL4 in ART csect
LOOP     DC    A(NAST)                @ NAST in SAVA csect
FOUR     DC    F'4'                   constant
NEL      DC    F'0'                   number of addresses
TEP      DS    XL(LABENTLN)           used to swap label table entries
BL48     DC    C'        '            constant 8 blanks
BEND     DC    C'END     '
CXR3     DS    XL9                    work area               CFK*SEP03
ADPN     DC    CL80' '                output card to be punched
SAVEAREA DS    18F                                            CFK*SEP03
         PRINT NOGEN                  switch off print        CFK*APR00
         REGEQU                       register equates        CFK*APR00
         END
