SS       TITLE 'SS '
***********************************************************************
*                                                                     *
*      Format the parameters of a SS or SSE format instruction        *
*                                                                     *
*    eg  MVC   123(1,2),3(4)    (if format =x'50')  type 0            *
*        AP    123(4,2),3(4,5)  (if format =x'51')  type 1            *
*        MVCK  123(1,2),3(4),5  (if format =x'52')  type 2            *
*        LASP  123(2),3(4)      (if format =x'53')  SSE (type 3)      *
*        SRP   123(1,2),3(4),5  (if format =x'54')  type 4, L1, not R1*
*                                                                     *
*  Input addressed by R1:                                             *
*    +0  @ output buffer                                              *
*    +4  instruction format (copy of AXNFMT)                          *
*    +8  instruction TEXT                                             *
*    +10 2 bytes passed to ADDR csect (1st adr call)                  *
*    +12 2 bytes passed to ADDR csect (2nd adr call)                  *
*    +19 flag, passed to ADDR csect, x'50' if 1 length field, else 51 *
*    +20 module returns to here                                       *
*                                                                     *
*  History:                                                           *
*    Support SS type 2 instruction format                CFK Jun 1999 *
*    Support SSE instruction format                      CFK Jun 1999 *
*    Map output line with OUTLINE macro                  CFK Feb 2000 *
*    Use register equates                                CFK Dec 2000 *
*    Use standard linkage comventions                    CFK Nov 2003 *
*                                                                     *
***********************************************************************
         FMTPARMS                 map parameters              CFK*JUN99
         OUTLINE                  map output line             CFK*FEB00
SS       CSECT
         ENTER ,                  entry logic                 CFK*NOV03
         LR    R10,R1             copy @ parms                CFK*NOV03
         USING FMTPARMS,R10       tell assembler              CFK*NOV03
         EXTRN ADDR               csect
         MVC   SSD+15(1),FMTFLG1  pass AXNFLG1 to ADDR
         SR    R3,R3
         IC    R3,FMTTEXT2        get length from instr
         CLI   FMTFMT,FMTFSS      1 length field ?
         BE    DSS                br if yes
         SRL   R3,4               else extract 1st length field only
DSS      DS    0H                                             CFK*JUN99
         CLI   FMTFMT,FMTFSS2     type 2 instruction format ? CFK*JUN99
         BE    DSS2               branch if so                CFK*JUN99
         LA    R3,1(R3)           else calc number of bytes to move
DSS2     DS    0H                                             CFK*JUN99
         CVD   R3,SWA             ) make
         UNPK  SWB(4),SWA+4(4)    )  length/register
         OI    SWB+3,C'0'         )   decimal
         SR    R2,R2
         ST    R2,SSD             clear ADDR
         ST    R2,SSD+4            parms
         MVC   SSD+2(2),FMTTEXT3  copy TEXT for first address
         MVC   SSD+5(3),SWB+1     pass length (decimal)
         MVC   SSD+8(4),FMTPA     pass @ Print Area
         CLI   FMTFMT,FMTFSSE     SSE instruction ?           CFK*JUN99
         BNE   CALL1              branch if not               CFK*JUN99
         MVI   SSD+4,X'01'        else signal no length       CFK*JUN99
CALL1    DS    0H                                             CFK*JUN99
         L     R15,ADDSS          get @ ADDR csect            CFK*NOV03
         LA    R1,SSD             get @ parms                 CFK*NOV03
         BASR  R14,R15            call ADDR csect             CFK*NOV03
         L     R4,FMTPA           get @ output buffer
         USING OUTLINE,R4         tell assembler              CFK*FEB00
         L     R3,SSD+12          get address length
         S     R3,SSONE           -1 for mvc
         EX    R3,MVSS            copy address to o/p buffer
         SR    R2,R2
         ST    R2,SSD             clear ADDR                  CFK*NOV03
         ST    R2,SSD+4            parms                      CFK*NOV03
         MVC   SSD+2(2),FMTTEXT5  copy TEXT for 2nd address   CFK*NOV03
         MVC   SSD+8(4),FMTPA     pass @ Print Area           CFK*NOV03
         AR    R4,R3              adj o/p buffer adr for 1st adr len
         ST    R4,SAP             save it
         MVI   OUTOPER+1,C','     add ,
         MVI   SSD+4,X'01'        signal no len in the addressCFK*NOV03
         CLI   FMTFMT,FMTFSS1     2 lengths ?
         BNE   DSS3               no, don't format 2nd length
         IC    R3,FMTTEXT2        else get length
         SLL   R3,28              ) mask out
         SRL   R3,28              ) low 4 bits
         LA    R3,1(R3)           make
         CVD   R3,SWA              length
         UNPK  SWB(4),SWA+4(4)      printable
         OI    SWB+3,C'0'
         MVC   SSD+6(2),SWB+2     copy length to ADDR parms   CFK*NOV03
         MVI   SSD+4,X'00'        signal length wanted        CFK*NOV03
DSS3     L     R15,ADDSS          get @ ADDR csect            CFK*NOV03
         LA    R1,SSD             get @ parms for ADDR        CFK*NOV03
         BALR  R14,R15            call addr csect             CFK*NOV03
         L     R3,SSD+12          get address length          CFK*NOV03
         S     R3,SSONE           -1 for execute
         L     R4,SAP             reload @ o/p buffer (adjusted)
         LA    R4,OUTOPER+2       calc where to put 2nd address
         DROP  R4                 tell assembler R4 changed   CFK*FEB00
         EX    R3,MVS2            copy 2nd address
         CLI   FMTFMT,FMTFSS2     SS type 2 instruction       CFK*JUN99
         BE    TRAIL              need trailing reg if so     CFK*JUN99
         CLI   FMTFMT,FMTFSS4     SS type 4 instruction       CFK*JUN99
         BNE   DONE               finished if not             CFK*JUN99
TRAIL    DS    0H                                             CFK*JUN99
         A     R4,SSD+12          else calc @ end of data so far *NOV03
         MVI   0(R4),C','         add ,                       CFK*JUN99
         IC    R3,FMTTEXT2        get register number         CFK*JUN99
         SLL   R3,28              ) mask out                  CFK*JUN99
         SRL   R3,28              ) low 4 bits                CFK*JUN99
         CVD   R3,SWA             make                        CFK*JUN99
         UNPK  SWB(3),SWA+6(2)     register                   CFK*JUN99
         OI    SWB+2,C'0'           printable                 CFK*JUN99
         CLI   SWB+1,C'0'         2 byte reg. number ?        CFK*JUN99
         BNE   TWOBYTE            br if two bytes to move     CFK*JUN99
         MVC   1(1,R4),SWB+2      else copy 1 byte to output  CFK*JAN00
         B     DONE                                           CFK*JUN99
TWOBYTE  MVC   1(2,R4),SWB+1      copy 2 bytes to output      CFK*JUN99
DONE     DS    0H                                             CFK*JUN99
         LEAVE ,                  RETURN                      CFK*NOV03
         USING OUTLINE,R4         as when EXecuted            CFK*FEB00
MVSS     MVC   OUTOPER(1),SSD     EXecuted instruction
MVS2     MVC   0(1,R4),SSD        EXecuted instruction        CFK*NOV03
         DC    C'IMM='
ADDSS    DC    A(ADDR)            @ ADDR csect
SAP      DC    F'0'               save @ o/p buf adj for 1st adr len
SSONE    DC    F'1'               constant 1
SWA      DC    D'0'               CVB work area
SWB      DC    F'0'               work area
* Parms to call ADDR                                          CFK*NOV03
*  input: addressed by R14                                            *
*    +0  2 bytes x'00' (always ?)                                     *
*    +2  2 byte address part of instruction                           *
*    +4  1 byte flag (x'00' or x'01' if format 1 adr.)                *
*    +5  start of 3 byte length for SS instrs or x'00'                *
*    +6  2 byte index reg no. (char 00-15) or x'0000'                 *
*    +8  4 byte address of output buffer holding current line         *
*    +15 1 byte instruction format from AXN                           *
*                                                                     *
*  output: addressed by R14                                           *
*    +0  1-12 byte address                                            *
*    +12 length of address (fullword)                                 *
SSD      DC    4F'0'                                          CFK*NOV03
* end of ADDR parms                                           CFK*NOV03
SAVEAREA DS    18F                                            CFK*NOV03
         YREGS ,                  register equates            CFK*DEC00
         END
