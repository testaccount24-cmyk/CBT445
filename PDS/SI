SI       TITLE 'SI '
***********************************************************************
*                                                                     *
*           Format the parameters of a SI format instruction          *
*                                                                     *
*    eg  MVI   123(1),X'00'          FMTFSI                           *
*    or  LPSW  123(1)                FMTFSI1                          *
*    or  IPK                         FMTFS (no operands)              *
*                                                                     *
*  Input addressed by R1:                                             *
*    +0  @ output buffer                                              *
*    +4  instruction format                                           *
*    +9  byte - immediate operand                                     *
*    +10 2 bytes passed to ADDR csect (1st adr call)                  *
*    +19 flag, passed to ADDR csect, x'41' if no immediate operand    *
*    +20 module returns to here                                       *
*                                                                     *
*  History:                                                           *
*    Check instruction format for 2nd byte (fixes LPSW)  CFK Jun 1999 *
*    Handle format S instructions                        CFK Jun 1999 *
*    Map output line with OUTLINE macro                  CFK Feb 2000 *
*    Use register equates                                CFK Dec 2000 *
*    Eliminate call to CXN                               CFK Oct 2003 *
*    Use standard linkage conventions                    CFK Nov 2003 *
*                                                                     *
***********************************************************************
         FMTPARMS                 copy parameter map          CFK*JUN99
         OUTLINE                  map output line             CFK*FEB00
SI       CSECT
         ENTER ,                  entry logic                 CFK*NOV03
         LR    R10,R1             copy @ parms                CFK*NOV03
         USING FMTPARMS,R10       tell assembler              CFK*NOV03
         EXTRN ADDR               csect
         CLI   FMTFMT,FMTFS       S format instruction ?      CFK*JUN99
         BE    SIET               branch if yes (no operands) CFK*JUN99
         MVC   SIG+15(1),FMTFLG1  pass instr format to ADDR
         SR    R2,R2              )
         ST    R2,SIG             ) clear ADDR parms
         ST    R2,SIG+4           )
         MVC   SIG+2(2),FMTTEXT3  pass address to ADDR
         MVI   SIG+4,X'01'        flag type of address
         MVC   SIG+8(4),FMTPA     pass @ output buffer
         L     R15,ADDI           get @ ADDR csect            CFK*NOV03
         LA    R1,SIG             get @ parms for ADDR        CFK*NOV03
         BASR  R14,R15            call ADDR csect             CFK*NOV03
         L     R4,FMTPA           get @ output buffer
         USING OUTLINE,R4         tell assembler              CFK*FEB00
         L     R3,SIG+12          load address length
         S     R3,IONE            -1 for mvc
         EX    R3,MVI             copy address to output buffer
         CLI   FMTFMT,FMTFSI1     got a second operand ?
         BE    SIET               br if not
         AR    R4,R3              allow for address
         MVC   OUTOPER+1(3),CX    copy ",X'"
         UNPK  OUTOPER+4(3),FMTTEXT2(2) unpack immed operand  CFK*OCT03
         NC    OUTOPER+4(2),=X'0F0F'    clear high nybbles    CFK*OCT03
         TR    OUTOPER+4(2),=C'0123456789ABCDEF'     make hex CFK*OCT03
         MVI   OUTOPER+6,X'7D'    add final ' (covers gash from UNPK)
SIET     LEAVE ,                  return to caller            CFK*NOV03
MVI      MVC   OUTOPER(1),SIG     EXecuted instruction
         DC    C'IMM='
ADDI     DC    A(ADDR)            @ ADDR csect
IONE     DC    F'1'               constant 1
CX       DC    C',X'              constant ",X'"
         DC    X'7D40'            rest of constant, C''' '
* parms to call ADDR                                          CFK*NOV03
*  input: addressed by R14                                            *
*    +0  2 bytes x'00' (always ?)                                     *
*    +2  2 byte address part of instruction                           *
*    +4  1 byte flag (x'00' or x'01' if format 1 adr.)                *
*    +5  start of 3 byte length for SS instrs or x'00'                *
*    +6  2 byte index reg no. (char 00-15) or x'0000'                 *
*    +8  4 byte address of output buffer holding current line         *
*    +15 1 byte instruction format from AXN                           *
*                                                                     *
*  output: addressed by R14                                           *
*    +0  1-12 byte address                                            *
*    +12 length of address (fullword)                                 *
SIG      DC    4F'0'                                          CFK*NOV03
* end of ADDR parms                                           CFK*NOV03
SAVEAREA DS    18F                                            CFK*NOV03
         YREGS ,                  register equates            CFK*DEC00
         END
