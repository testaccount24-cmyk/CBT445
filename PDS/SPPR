SPPR     TITLE 'SPPR'
***********************************************************************
*                                                                     *
*     SPPR csect                                                      *
*                                                                     *
*  Called by PASS4 for each line of output                            *
*                                                                     *
*  Parms addressed by R1:                                             *
*   Input:                                                            *
*    +0  - 8 bytes output from FTXT,       copied to KEY4             *
*      +0  - 4 bytes flag, F'1' at EOT   ) copied to KEY4             *
*      +4  - 1 byte copy of AXNFMT       ) copied to KEY4    CFK*JLY00*
*      +5  - 1 byte copy of AXNOPER      ) copied to KEY4    CFK*JLY00*
*      +6  - 2 byte length of instruction) copied to KEY4             *
*    +8  - 12 bytes output from FTXT,      copied to INST4            *
*      +8  - 8 bytes instruction TXT     ) copied to INST4            *
*      +16 - 1 byte copy of AXNFLG1      ) copied to INST4            *
*      +17 - 3 bytes current location    ) copied to INST4            *
*    +20 - 8 bytes passed to decoding rtn, copied to LEN4 and RT4     *
*    +28 - 4 bytes @ decoding routine,     copied to ROUT4            *
*    +32 -                                                            *
*   Output:                                                           *
*    +0 - 24 bytes                                                    *
*                                                                     *
*                                                                     *
*                                                                     *
*    +28 - flag returned, x'01' or x'02'                              *
*    +36 - return address                                             *
*                                                                     *
*   History:                                                          *
*     Map output line with OUTLINE macro                 CFK Feb 2000 *
*     SAVA parameters changed                            CFK Apr 2000 *
*     Use register equates                               CFK Dec 2000 *
*     Use standard linkage conventions                   CFK Sep 2003 *
*     Use standard linkage conventions to call BSC       CFK Oct 2003 *
*     Tidy up calls to PRINTP (was PRINTA).              CFK Dec 2003 *
*     Pass current csect to SAVA.                        CFK Dec 2003 *
*     SAVA now outputs name in label field.              CFK Jan 2004 *
*     BSC output changed                                 CFK Jan 2004 *
*                                                                     *
***********************************************************************
         OUTLINE                  map output line             CFK*FEB00
SPPR     CSECT
         ENTER ,                  entry logic                 CFK*SEP03
         ENTRY PLCB               ref'ed by PASS4
         ENTRY ASAVSECT           ref'ed by PASS4             CFK*DEC03
         EXTRN USING              csect
         EXTRN BSC                csect
         EXTRN BCV                csect
         EXTRN CDN                csect
         EXTRN PA                 in PASS1 csect (Print Area)
         EXTRN PRINTP             csect                       CFK*DEC03
         EXTRN RFTXT              in FTXTA csect
         EXTRN ARL                csect
         EXTRN PAB                in PASS1 csect
         EXTRN SAVA               csect
         ST    R1,SPP1            save @ parms                CFK*SEP03
         MVC   KEY4(32),0(R1)     copy parms                  CFK*SEP03
         CLI   FFC,X'FF'
         BE    FPLL
         CLI   FFC+3,X'00'
         BNE   FPLL1
         CLC   INST4+9(3),FFAD+1  FIRST FORTRAN INSTR
         BH    FPLL
         MVC   ICF+1(3),INST4+9   copy current location
         L     R4,ICF             load current location
         AH    R4,KEY4+6          add instruction length      CFK*JLY00
         S     R4,FFAD
         BM    FPLL
         MVI   KEY4+3,X'00'       clear EOT flag
         MVI   FFC+3,X'01'
         MVI   PLC+3,X'08'
         LTR   R4,R4
         BZ    FPLL
         ST    R4,RFT
         B     LRFT
FPLL1    CLI   FFC+3,X'01'
         BNE   FPLL2
         CLI   CGOF,X'00'
         BE    CGO1
         CLI   CGOF,X'01'
         BE    CGO2
         CLI   CGOF,X'02'
         BE    CGO3
         CLI   CGOF,X'03'
         BNE   CGOL
         MVC   ICF+1(3),INST4+9    copy current location
         LH    R5,RT4
         SLL   R5,1
         A     R5,ICF              add current location
         LA    R5,6(R5)
         ST    R5,FFAD
         MVI   FFC+3,X'00'
         MVI   KEY4+3,X'02'
         B     CGOL
CGO1     CLC   CGOS1(2),RT4        LH  2, ?
         BNE   CGOL                br. if not
         CLI   KEY4+3,X'02'
         BE    FPLL2
         MVI   CGOF,X'01'
         B     CGOM
CGO2     CLC   CGOS1+2(2),RT4      L   15, ?
         BNE   CGOL                br. if not
         MVI   CGOF,X'02'
         B     CGOM
CGO3     CLC   RT4(2),CGOS2        BALR 14,15 ?
         BNE   CGOL                br. if not
         MVI   CGOF,X'03'
         B     CGOM
CGOL     MVI   CGOF,X'00'
CGOM     BCR   0,0
         CLC   RT4(3),FSS1         BAL  14,8(15) ?
         BNE   FPLL3
         CLI   RT4+3,X'08'
         BE    MFFC
         CLI   RT4+3,X'0C'
         BE    MFFCL
         CLI   RT4+3,X'1C'
         BE    MFFC
         CLI   RT4+3,X'20'
         BE    MFFCL
         CLI   RT4+3,X'38'
         BE    PSF
         CLI   RT4+3,X'34'
         BNE   FPLL3
PSF      MVI   FFC+3,X'00'
         MVI   KEY4+3,X'02'
         MVC   ICF+1(3),INST4+9    copy current location
         L     R5,ICF              load current location
         LA    R5,10(R5)
         ST    R5,FFAD
         B     FPLL3
MFFCL    MVI   FFC+3,X'00'
         MVI   KEY4+3,X'02'
         MVC   ICF+1(3),INST4+9    copy current location
         L     R5,ICF              load current location
         LA    R5,12(R5)
         ST    R5,FFAD             save current location + 12
         B     FPLL3
MFFC     MVI   FFC+3,X'02'
         MVI   KEY4+3,X'02'
         B     FPLL
FPLL2    CLI   FFC+3,X'02'
         BNE   FPLL4
         MVI   FFC+3,X'01'
         MVI   KEY4+3,X'00'
         B     FPLL
FPLL3    CLC   RT4(2),FSS2         BALR  15,0 ?
         BNE   FPLL
         MVI   FFC+3,X'03'
         B     FPLL
FPLL4    CLI   FFC+3,X'03'
         BNE   FPLL
         MVI   FFC+3,X'01'
         L     R3,PABF4            get @ PAB in PASS1
         USING OUTLINE,R3          tell assembler             CFK*FEB00
         MVI   OUTLCC,X'FF'        ind. card inserted
         MVC   OUTINSTR(10),DROP4  copy c'DROP',ZZ14
         DROP  R3                  tell asm done with OUTLINE CFK*FEB00
         XC    USINGPRM,USINGPRM   clear USING parms          CFK*SEP03
         L     R15,US4             get @ USING csect          CFK*SEP03
         MVI   USINGPRM+2,X'F0'    tell USING to drop r15     CFK*SEP03
         LA    R1,=A(USINGPRM)     get @ parms                CFK*SEP03
         BASR  R14,R15             call USING                 CFK*SEP03
*  USING parms are:
*    +0  hex flag, 00 - drop, 01 or 02 - insert, 03 - retrieve
*    +2  1 byte address part of instruction
*    +3  1 byte address part of instruction
*    +4  3 byte current loc (?) - if insert
*    +7  1 byte instruction format from AXN table
         B     FPLL
FPLL     BCR   0,0
         CLI   FORHF,X'FF'
         BE    FHN                if so quit loop
         CLC   INST4+9(3),FFAD+1  comp current location
         BNE   FHN                quit loop if not equal
         CLI   FORHF,X'01'
         BE    FH2
         CLC   RT4(4),FHS1        B   12(15) ?
         BNE   FHC                br. if not
         MVI   FFC,X'FF'
         MVI   FORHF,X'01'
         MVI   COBF,X'00'
         MVI   KEY4+3,X'02'
         MVI   USINGPRM+2,X'F0'   tell USING to drop r15      CFK*SEP03
         MVI   USINGPRM+7,X'01'   indicate instruction type   CFK*SEP03
         MVC   USINGPRM+4(3),FFAD+1  indicate location        CFK*SEP03
         MVI   USINGPRM+2,X'F0'   tell USSH to output R15     CFK*SEP03
         MVC   RGH13+1(3),FFAD+1
         BAL   R9,USSH            call routine to output USING card
         B     FHA
         L     R15,US4            get @ USING csect           CFK*SEP03
         LA    R1,=A(USINGPRM)    get @ parms                 CFK*SEP03
         BASR  R14,R15            call USING                  CFK*SEP03
*  USING parms are:
*    +0  hex flag, 00 - drop, 01 or 02 - insert, 03 - retrieve
*    +2  1 byte address part of instruction
*    +3  1 byte address part of instruction
*    +4  3 byte current loc (?) - if insert
*    +7  1 byte instruction format from AXN table
FHA      L     R3,FFAD
         LA    R3,8(R3)
         ST    R3,FFAD
         B     FHN                quit loop
FHC      MVI   KEY4+3,X'00'
         B     FHN                quit loop
FH2      CLI   FORHF+3,X'00'
         BNE   FH3
         MVI   FORHF+3,X'01'
         MVI   KEY4+3,X'00'
         L     R3,FFAD
         LA    R3,12(R3)
         ST    R3,FFAD
         B     FHN                quit loop
FH3      CLI   FORHF+3,X'01'
         BNE   FH4
         MVI   FORHF+3,X'02'
         CLI   RT4,X'18'
         BNE   FMAIN
         MVI   FORHF+3,X'03'
         L     R3,FFAD
         LA    R3,18(R3)
         ST    R3,FFAD
         CLI   RT4+2,X'41'
         BE    FHN                quit loop if so
         MVI   FORHF+2,X'01'
         B     FHN                quit loop
FMAIN    L     R3,FFAD
         LA    R3,22(R3)
         ST    R3,FFAD
         B     FHN                quit loop
FH4      CLI   FORHF+3,X'02'
         BNE   FH5
         L     R3,FFAD
         LA    R3,22(R3)
         ST    R3,RGH13
         XC    FFAD(4),FFAD
         MVC   FFAD+2(2),RT4+2
         NI    FFAD+2,X'0F'
         A     R3,FFAD
         ST    R3,FFAD
* start of a loop
USTH     MVI   KEY4+3,X'02'
         MVI   FORHF+3,X'05'
         MVI   FFC,X'00'
         MVI   FFC+3,X'00'
         MVI   USINGPRM+2,X'C0'  tell USING to insert R12     CFK*SEP03
         MVC   USINGPRM+4(3),ZZ4   at +0                      CFK*SEP03
         MVC   T13(4),RGH13
         MVC   RGH13(4),ZZ4      clear RGH13
         LA    R5,2              number of USING cards to write
* loop to output USING cards
USHL     ST    R5,COBR           save counter
         MVI   USINGPRM,X'01'    tell USING to insert reg     CFK*SEP03
         MVI   USINGPRM+7,X'01'  set instruction format       CFK*SEP03
         BAL   R9,USSH           call routine to output USING card
         L     R15,US4           get @ USING csect            CFK*SEP03
         LA    R1,=A(USINGPRM)   get @ USING parms            CFK*SEP03
         BASR  R14,R15           call USING                   CFK*SEP03
*  USING parms are:
*    +0  hex flag, 00 - drop, 01 or 02 - insert, 03 - retrieve
*    +2  1 byte address part of instruction
*    +3  1 byte address part of instruction
*    +4  3 byte current loc (?) - if insert
*    +7  1 byte instruction format from AXN table
*    +8  callers r13
*    +12 return address
         MVI   USINGPRM+2,X'D0'  tell USING to insert R13     CFK*SEP03
         MVC   RGH13(4),T13
         MVC   USINGPRM+4(3),RGH13+1  set address             CFK*SEP03
         L     R5,COBR           reload counter
         BCT   R5,USHL           br. if more to generate
* end of loop to output USING cards
         B     FHN               quit outer loop
FH5      CLI   FORHF+3,X'03'
         BNE   FH6
         MVI   FORHF+3,X'04'
         L     R3,FFAD
         LA    R3,2(R3)
         ST    R3,FFAD
         MVI   KEY4+3,X'02'
         B     FHN               quit loop
FH6      CLI   FORHF+3,X'04'
         BNE   FH7
         CLI   FORHF+2,X'01'
         BNE   FHG
         MVC   RGH13(4),RT4
         MVI   FORHF+3,X'01'
         B     USTH
FH7      CLI   FORHF+3,X'05'
         BNE   FHN               quit loop
         MVI   FORHF+3,X'06'
         CLI   FORHF+2,X'01'
         BNE   FHN               quit loop
         MVC   FFAD(4),RT4
FHG      L     R3,FFAD
         LA    R3,8(R3)
         ST    R3,RGH13
         MVC   FFAD(4),RT4
         B     USTH              back to start of loop
* end of USTH loop
FHN      BCR   0,0
         CLI   COBF,X'01'
         BNE   COBAN
         CLC   ROUT4(4),ROUTAE       = @ ARL csect ?
         BNE   COBAR                 branch if not
         L     R1,ACT                )
         LA    R1,1(R1)              ) add 1 to ACT
         ST    R1,ACT                )
         CLI   ACT+3,X'02'
         BNE   COBAR
         MVI   COBF+1,X'01'
         MVC   COBR+1(3),INST4   copy TXT
         MVC   COBRA(4),COBR
         L     R5,COBR
         LA    R5,4095(R5)
         SR    R4,4
         D     R4,F100           divide by 4096
         LA    R5,1(R5)          calc loop count
         MVC   COBA(4),ZZ4       clear COBA
         MVC   USINGPRM+4(3),INST4   copy TXT
* start of a loop
RCOB     MVC   USINGPRM+2(1),COBRG+3 pass reg. no. to USING   CFK*SEP03
         MVC   RGH13+1(3),USINGPRM+4                          CFK*SEP03
         ST    R5,COBR           save loop counter
         MVI   USINGPRM,X'01'    ind. insert call to USING    CFK*SEP03
         MVI   USINGPRM+7,X'01'                               CFK*SEP03
         BAL   R9,USSH           call routine to output USING card
         L     R15,US4           get @ USING csect            CFK*SEP03
         LA    R1,=A(USINGPRM)   get @ parms for USING        CFK*SEP03
         BASR  R14,R15           call USING                   CFK*SEP03
*  USING parms are:
*    +0  hex flag, 00 - drop, 01 or 02 - insert, 03 - retrieve
*    +2  1 byte address part of instruction
*    +3  1 byte address part of instruction
*    +4  3 byte current loc (?) - if insert
*    +7  1 byte instruction format from AXN table
         SR    R4,R4
         IC    R4,COBRG+3        )
         LA    R4,16(R4)         ) add 16 to COBRG+3
         STC   R4,COBRG+3        )
         L     R5,FFAD
         S     R5,COBRA
         C     R5,F100           more than 4096 ?
         BNH   LCOB              br if not
         MVI   ACT+3,X'01'
         B     COBAN
LCOB     L     R5,COBR           reload loop counter
         MVC   USINGPRM+4(3),COBA+1                           CFK*SEP03
         L     R4,COBA
         A     R4,F100           add 4096 (x'1000')
         ST    R4,COBA
         BCT   R5,RCOB           loop if more to process
* end of RCOB loop
COBAR    CLI   COBF+1,X'01'
         BNE   COBAN
         CLI   COBF+3,X'01'
         BE    COBAC
         CLC   INST4+9(3),FFAD+1  is current location after FFAD+1 ?
         BL    COBAN
         CLC   RT4(2),CBLB        BALR 14,15 ?
         BNE   COBAN              br. if not
         CLI   RT4+2,X'04'
         BNE   COBAN
         MVI   KEY4+3,X'02'
         MVI   COBF+3,X'01'
         B     COBAN
COBAC    MVI   KEY4+3,X'00'
         MVI   COBF+3,X'00'
COBAN    BCR   0,0
         CLI   PLC+1,X'FF'        PL/I SUBSET
         BE    PLL                br to exit
         CLI   PLC+3,X'00'        YES
         BNE   PLI1
         CLC   INST4(2),PL1       BALR 13,0 ?
         BNE   PLI1
         MVI   PLC+3,X'01'
         B     PLL                go to exit
PLI1     CLI   PLC+3,X'01'
         BNE   PLI2
         CLC   INST4(2),PL2       ST 15,ZZZ15 ?
         BNE   MPFF
         MVI   PLC+3,X'02'
         B     PLL                go to exit
PLI2     CLI   PLC+3,X'02'
         BNE   PLI3
         CLC   INST4(2),PL3       STM 11,12,ZZZ12 ?
         BNE   MPFF
         MVI   PLC+3,X'03'
         B     PLL                go to exit
PLI3     CLI   PLC+3,X'03'
         BNE   PLI4
         CLC   INST4(2),PL4       LA 11,ZZZ12 ?
         BNE   MPFF
         L     R3,PABF4           get @ PAB in PASS1
         L     R4,APAP4           get @ PA in PASS1
         MVI   0(R3),X'FF'        ind. card inserted
         MVC   64(5,R3),USIN4     GENERATE USING
         MVC   70(8,R3),73(R4)    copy parms
         LA    R5,80(R4)
* start of loop to find last non blank char on card
USO2     CLI   0(R5),C' '
         BNE   USV2               found non-blank char
         BCT   R5,USN2            subtract 1 from r5
USN2     BCT   R3,USO2
* end of loop to find last non blank char on card
USV2     MVI   78(R3),C','
         MVC   79(2,R3),EAT       copy c'11'
         MVI   PLC+3,X'04'
         CLI   PAS45,X'00'        on 4th pass ?
         BE    MT5                br. if yes
         MVC   CD2+3(5),74(4)     pass input to CDN
         ST    R13,CD2+8          put R13 where CDN expects it
         L     R14,ACDN           CONVERT ADDRESS TO BCD
         CNOP  2,4
         BALR  R14,R14            call CDN
CD2      DC    C'0000'            padding for input
         DC    F'0'               output binary number
         DC    F'0'               our R13
MT5      MVC   USINGPRM+4(3),CD2+5 copy adr. to USING parms   CFK*SEP03
         MVC   USINGPRM(4),RG11   copy USING parms to say R11 is here
         L     R15,FUSI           MAKE ENTRY IN USING TABLE for R11
         LA    R1,=A(USINGPRM)    get @ parms for USING       CFK*SEP03
         BASR  R14,R15            call USING                  CFK*SEP03
*  USING parms are:
*    +0  hex flag, 00 - drop, 01 or 02 - insert, 03 - retrieve
*    +2  1 byte address part of instruction
*    +3  1 byte address part of instruction
*    +4  3 byte current loc (?) - if insert
*    +7  1 byte instruction format from AXN table
         B     PLL                go to exit
PLI4     CLI   PLC+3,X'04'
         BNE   PLI5
         CLC   INST4(2),PL5       L 12,ZZZ11 ?
         BNE   MPFF
         L     R3,PABF4           get @ PAB in PASS1
         USING OUTLINE,R3         tell assembler              CFK*FEB00
         MVI   OUTLCC,X'FF'       ind. card inserted
         MVC   OUTINSTR,USIN4     GENERATE USING
         CLI   PAS45,X'00'        on 4th pass ?
         BNE   NC14               br. if not
         MVC   CD14+3(5),ZZ14+1   pass input to CDN
         ST    R13,CD14+8         put R13 where CDN expects it
         L     R14,ACDN           CONVERT TO HEX
         CNOP  2,4
         BALR  R14,R14            call CDN
CD14     DC    C'0000'            input padding
         DC    F'0'               output hex number
         DC    F'0'               R13 reloaded from here
         MVC   BSCSECT,ASAVSECT   copy current csect          CFK*JAN04
         MVC   BSCA3(3),CD14+5    copy address to BSC input   CFK*JAN04
         L     R15,ABSC5          FIND BCD SYMBOL             CFK*OCT03
         LA    R1,BSCPRMS         get @ parms for BSC         CFK*JAN04
         BASR  R14,R15            call BSC                    CFK*OCT03
         CLI   BSCONAME,C' '      known address ?             CFK*JAN04
         BE    NC14               br. if no label at this address
         MVC   ZZ14(8),BSCONAME   else copy label             CFK*JAN04
NC14     L     R3,PABF4           get @ PAB in PASS1
         MVC   OUTOPER(8),ZZ14    complete USING
         L     R4,APAP4           get @ PA in PASS1
         LA    R5,ZZ14+7
* start of loop
USO1     CLI   0(R5),C')'
         BE    USV1
         CLI   0(R5),C' '
         BE    ZB14
         LA    R3,1(R3)
         B     USV1
ZB14     BCT   R5,USN1            subtract 1 from r5
USN1     BCT   R3,USO1
* end of USO1 loop
USV1     MVI   OUTOPER+7,C','
         MVC   OUTOPER+8(2),EAT+2 copy c'12'
         CLI   PAS45,X'00'        on 4th pass ?
         BE    MT6                br. if yes
         MVC   CD3+3(5),74(R4)    pass input to CDN
         ST    R13,CD3+8          put R13 where CDN expects it
         L     R14,ACDN           CONVERT TO BCD
         CNOP  2,4
         BALR  R14,R14            call CDN
CD3      DC    C'0000'            input padding
         DC    F'0'               output hex number
         DC    F'0'               R13 reloaded from here
MT6      MVC   FZ14(4),CD3+4      copy hex number
         MVI   PLC+3,X'05'
         B     PLL                go to exit
PLI5     CLI   PLC+3,X'05'
         BNE   PLI6
         CLC   INST4(2),PL6       LA 4,ZZ1 ?
         BNE   PLL                go to exit if not
         L     R3,APAP4           get @ PA in PASS1
         CLI   PAS45,X'00'        on 4th pass ?
         BE    MT7                br. if yes
         MVC   CD1+3(5),OUTOPER+4 pass input to CDN
         ST    R13,CD1+8          put R13 where CDN expects it
         L     R14,ACDN           CONVERT TO HEX
         CNOP  2,4
         BALR  R14,R14            call CDN
CD1      DC    C'0000'            input padding
         DC    F'0'               output hex number
         DC    F'0'               R13 reloaded from here
MT7      MVC   FAD(4),CD1+4       copy hex number
         MVI   PLC+3,X'06'
         B     PLL                go to exit
MPFF     MVI   PLC+1,X'FF'
         B     PLL                go to exit
PLI6     CLI   PLC+3,X'06'
         BNE   PLI7
         CLC   INST4+9(3),FZ14+1  A(ZZZ14)
         BNE   PLI7
         L     R3,APAP4           get @ PA in PASS1
         MVC   ZZ14(8),OUTOPER+2
         CLI   PAS45,X'00'        on 4th pass ?
         BE    MT8                br. if yes
         MVC   CD4+3(5),OUTOPER+3 pass input to CDN
         ST    R13,CD4+8          put R13 where CDN expects it
         L     R14,ACDN           CONVERT TO HEX
         CNOP  2,4
         BALR  R14,R14            call CDN
CD4      DC    C'0000'            input padding
         DC    F'0'               output hex number
         DC    F'0'               R13 reloaded from here
MT8      MVC   USINGPRM+4(3),CD4+5  copy hex number           CFK*SEP03
         MVC   USINGPRM(4),RG12   copy USING parms to say R12 is here 3
         L     R15,FUSI           MAKE ENTRY IN USING TABLE for R12 P03
         LA    R1,=A(USINGPRM)    get @ parms for USING       CFK*SEP03
         BASR  R14,R15            call USING csect            CFK*SEP03
*  USING parms are:
*    +0  hex flag, 00 - drop, 01 or 02 - insert, 03 - retrieve
*    +2  1 byte address part of instruction
*    +3  1 byte address part of instruction
*    +4  3 byte current loc (?) - if insert
*    +7  1 byte instruction format from AXN table
         MVI   PLC+3,X'07'
         B     PLL                go to exit
PLI7     CLI   PLC+3,X'07'
         BNE   PLI8               go to exit
         CLC   INST4+9(3),FAD+1   BALR 15,0
         BNL   PLL                go to exit
         L     R4,FAD
         MVC   ICF+1(3),INST4+9   copy current location
         L     R4,ICF             load current location
         AH    R4,KEY4+6          add instruction length      CFK*JLY00
         S     R4,FAD
         BNP   PLL                go to exit
LRFT     L     R14,ARFXT          get @ RFTXT in FTXTA
         ST    R4,RFT
         CNOP  2,4
         BALR  R14,R14            call RFTXT
RFT      DC    F'0'
* RFTXT is a dummy routine, it just issues ABEND 60,DUMP
         MVI   PLC+3,X'08'
         L     R4,LEN4
         S     R4,RFT
         ST    R4,LEN4
         L     R3,APAP4           get @ PA in PASS1
         MVI   OUTCONST,C' '           ) clear
         MVC   OUTCONST+1(80),OUTCONST )  print area
         CLC   LEN4(4),ZZ4    zero ?
         BE    LFTXT4
         B     RF5
PLI8     BCR   0,0            duplicate exit ?
* exit from the program
PLL      BCR   0,0            exit program
         L     R1,SPP1        reload @ parms                  CFK*SEP03
         MVC   0(24,R1),KEY4  pass back ???                   CFK*SEP03
         LEAVE ,              return                          CFK*SEP03
LFTXT4   L     R1,SPP1        reload @ parms                  CFK*SEP03
         MVI   28(R1),X'01'   set flag                        CFK*SEP03
         B     PLL            and exit
RF5      L     R1,SPP1        reload @ parms                  CFK*SEP03
         MVI   28(R1),X'02'   set flag                        CFK*SEP03
         B     PLL            and exit
         DROP  R3             tell asm. done with OUTLINE     CFK*FEB00
* subroutine to output USING card
USSH     ST    R9,AFF         save return address
         XC    REGU(3),REGU   clear work area
         MVC   REGU+3(1),USINGPRM+2  register number to print CFK*SEP03
         MVC   ASAVADR,RGH13+1       address of using stmt    CFK*APR00
         MVC   ASAVLABL,SPACES       clear input label        CFK*APR00
         MVI   ASAVTYPE,X'60' type of address                 CFK*APR00
         ST    R13,REGU+4     put r13 where BCV expects it
         L     R15,SAVZ4      get @ SAVA csect                CFK*SEP03
         LA    R1,ASAVPRMS    get @ parms                     CFK*JAN04
         BASR  R14,R15        call SAVA                       CFK*SEP03
         L     R14,BCVF       get @ BCV csect
         CNOP  2,4
         BALR  R14,R14        call BCV
REGU     DC    F'0'           output reg number in decimal
         DC    F'0'           r13 reloaded from here
         CLI   PAS45,X'FF'    on 2nd pass ?
         BE    NPFH           br if yes
         L     R15,PRH        get @ PRINTP csect              CFK*SEP03
         L     R1,APAP4       get @ print area                CFK*DEC03
         BASR  R14,R15        call PRINTP                     CFK*SEP03
NPFH     L     R4,APAP4       get @ PA in PASS1
         USING OUTLINE,R4     tell assembler                  CFK*FEB00
         MVC   OUTINSTR(6),USIN4  copy c'USING'
         MVC   OUTOPER(8),ASAVOUTL copy label to card
         LA    R5,7           get max length - 1
         LA    R3,OUTOPER+7   get @ end of label area
* loop to find end of label
CEF      CLI   0(R3),C' '     ) find
         BNE   INSF           )  end
         BCTR  R3,0           )   of
         BCT   R5,CEF         )    label
* end of loop to find end of a label
INSF     MVI   1(R3),C','     add ,
         MVC   2(2,R3),REGU   add register number
         L     R9,AFF         reload return address
         BR    R9             and return to caller
*                     constant area
T13      DC    F'0'
SPP1     DC    F'0'           save callers r1 (@ parms)       CFK*SEP03
COBR     DC    F'0'
ACDN     DC    A(CDN)         @ CDN csect
ZZ4      DC    F'0'           constant
ABSC5    DC    A(BSC)         @ BSC csect
US4      DC    A(USING)       @ USING csect
APAP4    DC    A(PA)          @ PA in PASS1 csect
SAVZ4    DC    A(SAVA)        @ SAVA csect
KEY4     DC    2F'0'          ) input
INST4    DC    3F'0'          )  parms
LEN4     DC    F'0'           )   put
RT4      DC    F'0'           )    here      1st 4 bytes TXT
ROUT4    DC    F'0'           )              @ decoding routine
CGOS1    DC    X'482058F0'    two 2 byte constants, LH  2, and L   15,
CGOS2    DC    X'05EF'        constant BALR 14,15
CBLB     DC    X'05EF'        constant BALR 14,15
CGOF     DC    F'0'           flag byte
FAD      DC    F'0'
FSS1     DC    X'45E0F008'    constant BAL  14,8(15)
PL1      DC    X'05D0'        constant BALR 13,0
PL2      DC    X'50F0'        constant ST   15,
PL3      DC    X'90BC'        constant STM  11,12,
PL4      DC    X'41B0'        constant LA   11,
PL5      DC    X'58C0'        constant L    12,
PL6      DC    X'4140'        constant LA   4,
EAT      DC    C'1112'        two 2 byte constants
SPACES   DC    CL8' '         constant                        CFK*APR00
USIN4    DC    C'USING'       constant
ZZ14     DC    C'      '
         DC    C'  '
FSS2     DC    X'05F0'        constant, BALR 15,0
DROP4    DC    C'DROP'        constant
         DC    C'  15'
         DC    C'  '
FZ14     DC    F'0'
RG11     DC    X'0100B000'    constant
RG12     DC    X'0100C000'    constant
PABF4    DC    A(PAB)         @ PAB in PASS1
FUSI     DC    A(USING)       @ USING csect
RGH13    DC    F'0'
FHS1     DC    X'47F0F00C'    constant, B   12(15)
ICF      DC    F'0'
ARFXT    DC    A(RFTXT)       @ RFTXT in FTXTA csect
ROUTAE   DC    A(ARL)         @ ARL csect
BCVF     DC    A(BCV)         @ BCV csect
PRH      DC    A(PRINTP)      @ PRINTP csect                  CFK*DEC03
AFF      DC    F'0'           save return address from USSH routine
F100     DC    F'4096'        constant
COBRA    DC    F'0'
PLCB     DC    F'0'           entry point ref'ed by PASS4
PLC      DC    F'0'           ) all
COBRG    DC    F'48'          ) these
COBA     DC    F'0'           ) fields
ACT      DC    F'0'           ) set
COBF     DC    F'0'           ) by
FFAD     DC    F'0'           ) PASS4
FFC      DC    F'0'           )
FORHF    DC    F'0'           )
PAS45    DC    X'FF000000'    ) flag, 1st byte set to x'00' to
*                               indicate the 2nd use of PASS4
SAVEAREA DS    18F                                            CFK*SEP03
* parms to call BSC                                           CFK*JAN04
BSCPRMS  DS    0F                 parms to call BSC           CFK*JAN04
BSCFLAG  DC    X'0'                                           CFK*JAN04
BSCONAME DS    0CL8               output name                 CFK*JAN04
BSCKEY   DS    0CL11              key to search on            CFK*JAN04
BSCSECT  DS    CL8                csect name                  CFK*JAN04
BSCA3    DS    XL3                input 3 byte address        CFK*JAN04
* end of BSC parms                                            CFK*JAN04
* parms to call SAVA                                          CFK*SEP03
ASAVPRMS DS    0XL20          parms to call SAVA              CFK*JAN04
ASAVTYPE DC    X'00'          input data type                 CFK*APR00
ASAVSECT DS    CL8            current csect, set by PASS4     CFK*DEC03
ASAVADR  DC    XL3'00'        input address                   CFK*APR00
ASAVOUTL DS    0CL8           output address                  CFK*JAN04
ASAVLABL DC    CL8' '         input label                     CFK*APR00
* end of SAVA parms                                           CFK*SEP03
* parms to call USING                                         CFK*SEP03
USINGPRM DC    F'0'
         DC    F'0'
* end of USING parms                                          CFK*SEP03
*  USING parms are:
*    +0  hex flag, 00 - drop, 01 or 02 - insert, 03 - retrieve
*    +2  1 byte address part of instruction
*    +3  1 byte address part of instruction
*    +4  3 byte current loc (?) - if insert
*    +7  1 byte instruction format from AXN table
         YREGS ,                register equates              CFK*DEC00
         END
