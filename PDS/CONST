CON      TITLE '*** C O N S T ***  (MODIFIED FOR FTXTA)  AUG. 24,1967'
***********************************************************************
*                                                                     *
*        Format constants in listing                                  *
*                                                                     *
*  Called by PASS4 and FTXTA                                          *
*                                                                     *
* Parms addressed by r1:                                              *
*   +0  - @ output buffer                                             *
*   +4  - instruction/constant type (zero)                            *
*   +5  - not used (zero)                                             *
*   +6  - constant length                                             *
*   +8  - input up to 8 byte constant                                 *
*   +16 - instruction counter                                         *
*   +19 - copy of AXNFLG1, prob zero                                  *
*   +20 - return to here                                              *
*                                                                     *
* History:                                                            *
*   constant length is 2 bytes (+ map parms)             CFK jun 1999 *
*   use outline macro to map the output line             CFK feb 2000 *
*   tidy up translate table                              CFK mar 2000 *
*   ADA format reversed                                  CFK may 2000 *
*   treat lower case letters as printable                CFK may 2000 *
*   print hex data in the info field                     CFK jun 2000 *
*   use register equates                                 CFK dec 2000 *
*   treat more special chars as printable                CFK jan 2002 *
*   Remove call to CXN                                   CFK Nov 2003 *
*   Use standard linkage conventions                     CFK Nov 2003 *
*                                                                     *
***********************************************************************
         LABELMAP                 Label table in SAVA         CFK*MAY00
         FMTPARMS                 copy parameter map          CFK*JUN99
         OUTLINE                  map output line             CFK*FEB00
CONST    CSECT
         EXTRN ADA                in PASS4 csect
         EXTRN FLPT               csect
         EXTRN FXPT               csect
         ENTER ,                  entry logic                 CFK*NOV03
         LR    R10,R1             save @ parms                CFK*NOV03
         USING FMTPARMS,R10       tell assembler              CFK*NOV03
         UNPK  CXNC(9),FMTTEXT(5) unpack input const          CFK*NOV03
         TR    CXNC(8),=C'0123456789ABCDEF'-240  make hex     CFK*NOV03
         L     R4,FMTPA           get @ output buffer
         USING OUTLINE,R4         tell assembler              CFK*FEB00
NADAR    MVC   SICC1+1(3),FMTIC   copy instruction counter
         L     3,SICC1            load instruction counter
         CLC   SICC(4),ZERC       = zero  ?
         BE    NADB               br if yes
         C     R3,SICC
         BNE   NADB
         MVI   OUTINSTR,C' '            ) clear mnemonic +
         MVC   OUTINSTR+1(35),OUTINSTR  )  operands
         B     Z99X               return                      CFK*NOV03
NADB     L     R3,AADA            get @ ADA in PASS4 (parms for ART)
         USING LABELMAP,R3        tell assembler              CFK*MAY00
         LTR   R3,R3              ? not linked ?
         BM    NADA               impossible ?
         CLC   ZERC(3),LABADR     is address zero ?           CFK*MAY00
         BE    NADA               not adcon if so
         CLC   FORC+2(2),FMTLEN2  constant length = 4 ?
         BNE   NADA               branch if not
         CLC   LABADR,SICC1+1     = current address ?         CFK*MAY00
         BNE   NADA               branch if not
         MVC   FHX+4(8),FMTTEXT   copy input constant         CFK*NOV03
         CLI   LABTYPE,X'22'      fixed point ?               CFK*MAY00
         BE    CFXPT              call FXPT if so
         CLC   FMTTEXT+1(3),ZERC  input zero ?     ???
         BE    NADA
         TM    FMTTEXT,X'7F'
         BZ    NADA
         CLI   LABTYPE,X'24'      floating point ?            CFK*MAY00
         BE    CFLPT              call FLPT if so
         MVI   FHX+12,X'80'
         CLI   LABTYPE,X'25'      ?          ?                CFK*MAY00
         BNE   NADA
         DROP  R3                 tell asm done with labelmap CFK*MAY00
         UNPK  17(9,R4),FMTTEXT+4(5)  unpack rest of const    CFK*NOV03
         TR    17(8,R4),=C'0123456789ABCDEF'-240  make hex    CFK*NOV03
         MVI   17+8(R4),C' '      clear gash byte             CFK*NOV03
         MVI   FMTLEN2,X'FF'
         L     R3,FMTIC           get instruction counter
         SRL   R3,8
         A     R3,FORC            add 4
         ST    R3,SICC            save @ next entry
         B     CFLT               go to call FLPT
CFXPT    MVC   FHF(4),FMTPA       pass @ print area to FXPT
         MVC   FHF+4(4),FMTTEXT   pass input constant to FXPT
         L     R15,AFXPT          get @ FXPT csect            CFK*NOV03
         LA    R1,FHF             get @ parms for FXPT        CFK*NOV03
         BASR  R14,R15            call FXPT                   CFK*NOV03
         MVC   OUTCONST,CXNC      copy object code to print area
         B     Z99X               return                      CFK*NOV03
CFLPT    MVI   FHX+12,X'00'
         MVC   FHX+8(4),ZERC      zero FLPT parms
CFLT     MVC   FHX(4),FMTPA       pass @ print area to FLPT
         L     R15,AFLPT          get @ FLPT csect            CFK*NOV03
         LA    R1,FHX             get @ parms for FLPT        CFK*NOV03
         BASR  R14,R15            call FLPT                   CFK*NOV03
         MVC   OUTCONST,CXNC      copy object code to print area
         B     Z99X               return to caller            CFK*NOV03
NADA     MVC   OUTOPER(2),XQ      copy X' to o/p buffer
         MVC   OUTINSTR(2),DC     copy DC to o/p buffer
         LH    R3,FMTLEN2         get length
         SLL   R3,1               times 2
         SH    R3,=H'1'           sub 1 for executed MVCs     CFK*JUN00
         BM    Z99X               if length zero exit         CFK*NOV03
         C     R3,EIGHT           length more than 8 ?
         BL    MM                 no - OK
         LA    R3,7               else load max len to move
MM       EX    R3,CMV             move constant to object code field
         LH    R5,FMTLEN2         get length                  CFK*JUN00
         BCTR  R5,0               sub 1 for executed MVCs     CFK*JUN00
         C     R5,TWT             length more than 20 ?       CFK*JUN00
         BH    Z99X               if so return                CFK*NOV03
         EX    R5,TRTI            check if ebcdic             CFK*JUN00
         BNZ   EXC3               non ebcdic chars found, o/p hex const
         MVI   OUTOPER,C'C'       else ind char string
         EX    R5,CMV3            copy chars to output buffer CFK*JUN00
         AR    R4,R5              calc @ end of string        CFK*JUN00
         B     MVIC3              go to add final '
EXC3     EX    R3,CMV2            copy hex string
         MVI   OUTINFO1,C'*'      first *                     CFK*JUN00
         EX    R5,CMV4            copy text to comment        CFK*JUN00
         EX    R5,TR2             make it printable           CFK*JUN00
         LA    R0,C'*'            ) put *                     CFK*JUN00
         STC   R0,OUTINFO2+1(R5)  )  after comment            CFK*JUN00
         AR    R4,R3              calc @ end of string
MVIC3    MVI   OUTOPER+3,X'7D'    add ' to end of constant
Z99X     LEAVE ,                  RETURN to caller            CFK*NOV03
CMV2     MVC   OUTOPER+2(1),CXNC  EXecuted to move hex constant
CMV      MVC   OUTCONST(1),CXNC   EXecuted to move const to object code
CMV3     MVC   OUTOPER+2(1),FMTTEXT  EXecuted to move char constant
CMV4     MVC   OUTINFO2(1),FMTTEXT  EXecuted to move to info  CFK*JUN00
TRTI     TRT   FMTTEXT(1),ABC     EXecuted to check if ebcdic
TR2      TR    OUTINFO2(1),TRTAB  EXecuted to make printable  CFK*JUN00
         DC    C'IMM='
TRTAB    DC    256C'.'            translate table to print text K*JUN00
         ORG   TRTAB+C' '
         DC    C' '
         ORG   TRTAB+C'¢'
         DC    C'¢.<(+|&&'
         ORG   TRTAB+C'!'
         DC    C'!$*);¬-/'
         ORG   TRTAB+C','
         DC    C',%_>?'
         ORG   TRTAB+C'`'
         DC    C'`:#@''="'
         ORG   TRTAB+C'a'
         DC    C'abcdefghi'
         ORG   TRTAB+C'j'
         DC    C'jklmnopqr'
         ORG   TRTAB+C's'
         DC    C'stuvwxyz'
         ORG   TRTAB+C'{'
         DC    C'{ABCDEFGHI'
         ORG   TRTAB+C'}'
         DC    C'}JKLMNOPQR'
         ORG   TRTAB+C'\'
         DC    C'\.STUVWXYZ'
         ORG   TRTAB+C'0'
         DC    C'0123456789'
         ORG   ,                           reset origin to max
EIGHT    DC    F'8'               constant
TWT      DC    F'20'              constant
DC       DC    C'DC'              DC to declare constant
XQ       DC    X'E77D'            X' for start of hex literals
ABC      DC    256X'FF'           Table of valid ebcdic chars CFK*MAR00
* Note: quote (') and ampersand (&) are not listed because they need
* to be doubled in strings, which is not done.
         ORG   ABC+C' '                                       CFK*MAR00
         DC    X'00'              space (x'40')
         ORG   ABC+C'¢'                                       CFK*JAN02
         DC    X'000000000000'    ¢.<(+|                      CFK*JAN02
         ORG   ABC+C'!'                                       CFK*JAN02
         DC    XL8'00'            !$*);¬-/                    CFK*JAN02
         ORG   ABC+C'%'                                       CFK*JAN02
         DC    X'00000000'        %_>?                        CFK*JAN02
         ORG   ABC+C':'                                       CFK*JAN02
         DC    X'000000'          :#@                         CFK*JAN02
         ORG   ABC+C'='                                       CFK*JAN02
         DC    X'0000'            ="                          CFK*JAN02
         ORG   ABC+C'a'                                       CFK*MAY00
         DC    2X'00000000'       abcdefgh                    CFK*MAY00
         DC    X'00'              i                           CFK*MAY00
         ORG   ABC+C'j'                                       CFK*MAY00
         DC    2X'00000000'       jklmnopq                    CFK*MAY00
         DC    X'00'              r                           CFK*MAY00
         ORG   ABC+C's'                                       CFK*MAY00
         DC    2X'00000000'       stuvwxyz                    CFK*MAY00
         ORG   ABC+C'A'                                       CFK*MAR00
         DC    2X'00000000'       ABCDEFGH
         DC    X'00'              I
         ORG   ABC+C'J'                                       CFK+MAR00
         DC    2X'00000000'       JKLMNOPQ
         DC    X'00'              R
         ORG   ABC+C'S'                                       CFK*MAR00
         DC    2X'00000000'       STUVWXYZ
         ORG   ABC+C'0'                                       CFK*MAR00
         DC    2X'00000000'       01234567
         DC    X'0000'            89
         ORG   ,                  reset origin                CFK*MAR00
* start of variables
SICC     DC    F'0'
ZERC     DC    F'0'               constant
FORC     DC    F'4'               constant
AFLPT    DC    A(FLPT)            @ FLPT csect
AFXPT    DC    A(FXPT)            @ FXPT csect
AADA     DC    A(ADA)             @ ADA in PASS4 csect
SICC1    DC    F'0'               current address in csect
* parms to call FXPT
FHF      DC    F'0'               @ print area
         DC    F'0'               input constant
* end of FXPT parms                                           CFK*NOV03
* parms to call FLPT with
FHX      DC    F'0'               @ print area
         DC    F'0'               ) input
         DC    F'0'               ) TEXT
         DC    F'0'               flag, x'00' or x'80'
* end of FLPT parms                                           CFK*NOV03
CXNC     DS    XL9                work area to unpack to      CFK*NOV03
SAVEAREA DS    18F                                            CFK*NOV03
         YREGS ,                           register equates   CFK*DEC00
         END
