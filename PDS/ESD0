ESD0     TITLE 'ESD0 '
***********************************************************************
*                                                                     *
*  Process ESD type 0 entry, Section Description                      *
*                                                                     *
*  Called by ESD                                                      *
*                                                                     *
*  Parms @ r1:                                                        *
*    +0 - @ input card                                                *
*    +4 - @ current ESD entry                                         *
*    +8 - ESD ID of current entry                                     *
*  @r14 - Return address                                              *
*                                                                     *
*  This csect builds a table of the ESD entries for each csect in     *
*  the input deck.                                                    *
*                                                                     *
*  History:                                                           *
*    Added section name to start message.                 CFK May 1999*
*    Added check for table overflow.                      CFK Jun 1999*
*    Add ESD ID to message.                               CFK Jly 1999*
*    Put whole ESD entry into table.                      CFK Jan 2000*
*    Make @ current section desc available to FTXTA, etc. CFK Feb 2000*
*    Allow for up to 100 sections.                        CFK May 2001*
*    Use register equates.                                CFK May 2001*
*    Getmain buffers for TXT cards for each section.      CFK May 2001*
*    Clear buffers to x'50'.                              CFK Sep 2001*
*    Get ESD ID correctly.                                CFK Nov 2001*
*    ESDSDMAP layout changed.                             CFK Dec 2001*
*    Correct support for above.                           CFK Jan 2002*
*    Print section length correctly.                      CFK Aug 2002*
*    Use standard linkage conventions.                    CFK Sep 2003*
*    Tidy up calls to PRINTA.                             CFK Dec 2003*
*    Handle object decks with section length only in the  CFK Dec 2003*
*    END card.                                                        *
*                                                                     *
***********************************************************************
         ESDCARD                    map input card            CFK*NOV01
         ESDITEM                    map ESD item              CFK*NOV01
         ESDSDMAP                   map ESD table             CFK*JAN00
ESD0     CSECT
         ENTER ,                    entry logic               CFK*SEP03
         ENTRY NPROG                reffed by PASS4 and TXT
         ENTRY CURRSECT             current section           CFK*FEB00
         EXTRN PA                   in PASS1 csect            CFK*SEP03
         LM    R8,R9,0(R1)          get @ input               CFK*NOV01
         USING ESDCARD,R8           tell assembler            CFK*NOV01
         USING ESDITEM,R9           tell assembler            CFK*NOV01
         L     R3,NPROG             )
         LA    R3,1(R3)             ) increment nprog
         LA    R4,MAXSECTS          get max number of sections FK*JUN99
         CR    R3,R4                room for another          CFK*JUN99
         BNH   OK                   branch if OK              CFK*JUN99
         L     R3,PRL               else get @ print area     CFK*NOV01
         MVC   ERRESDID,ESDINAME    copy section name         CFK*JUN99
         MVC   1(ERRMSGL,R3),ERRMSG copy error message        CFK*JUN99
         B     PRINTIT              and print it              CFK*JUN99
OK       DS    0H          we have room for another section   CFK*JUN99
         ST    R3,NPROG             save new number of sections
         MH    R3,=AL2(ESDENTLN)    multiply by entry length  CFK*JAN00
         A     R3,APROGL            calc @ next entry
         USING ESDSDMAP,R3          tell assembler            CFK*JAN00
         MVC   ESDNAME(9),ESDINAME  copy ESD name + type      CFK*DEC01
         MVC   ESDADR3,ESDIADR      copy address              CFK*DEC01
         MVI   ESDADR,X'00'         and clear high byte       CFK*DEC01
         MVC   ESDLEN3,ESDILEN      copy length               CFK*DEC01
         MVI   ESDLEN,x'00'         and clear high byte       CFK*DEC01
         MVC   ESDINFO,ESDIINFO     copy flags byte           CFK*DEC01
         MVC   ESDID,8(R1)          copy copy ESD ID          CFK*NOV01
         ICM   R15,B'1111',ESDLEN   get section length        CFK*JAN02
         BNZ   Z10A                 br. if length provided    CFK*MAY01
         LH    R15,=H'32760'        else guess length         CFK*MAY01
         ST    R15,ESDLEN           save our guess            CFK*DEC03
         OI    ESDINFO,ESDINOLN     and note length not given CFK*DEC03
Z10A     DS    0H                                             CFK*MAY01
         LR    R0,R15               copy it                   CFK*MAY01
         SRL   R15,5                divide by 32              CFK*MAY01
         LA    R15,100(R15)         allow for spare TXT cards CFK*MAY01
         ST    R15,ESDMAXT          save max number of cards  CFK*MAY01
         SLL   R15,2                mul by TXT header len (4) CFK*MAY01
         AR    R0,R15               calc total buffer length  CFK*MAY01
         ST    R0,ESDBUFLN          save buffer length        CFK*MAY01
         LR    R5,R0                save length for MVCL      CFK*SEP01
*                                                             CFK*MAY01
         GETMAIN RU,LV=(0),SP=1     get buffer                CFK*MAY01
*                                                             CFK*MAY01
         ST    R1,ESDTBUF           save @ TXT buffer         CFK*MAY01
         LR    R4,R1                copy @ buffer             CFK*SEP01
         L     R7,=X'00000000'      load pad + zero from len  CFK*SEP01
*        from address is irrelvant since from length is zero  CFK*SEP01
         MVCL  R4,R6                clear buffer to x'50's    CFK*SEP01
         A     R1,ESDLEN            calc @ TXT header buffer  CFK*JAN02
         ST    R1,ESDCBUF           save @ header buffer      CFK*MAY01
         XC    ESDNTXT,ESDNTXT      clear number of TXT cards CFK*MAY01
         MVC   BEG,ESDNAME          copy section name to msg  CFK*NOV01
         UNPK  STA(7),ESDIADR(4)    unpack start address      CFK*AUG02
         TR    STA,=C'0123456789ABCDEF'-240    make printable CFK*NOV01
         MVI   STA+6,C' '           clear gash byte           CFK*NOV01
         UNPK  ID(5),ESDID(3)       unpack ESD ID             CFK*NOV01
         TR    ID,=C'0123456789ABCDEF'-240     make printable CFK*NOV01
         MVI   ID+4,C' '            clear gash byte           CFK*NOV01
         UNPK  LEN(7),ESDILEN(4)    unpack section length     CFK*NOV01
         TR    LEN,=C'0123456789ABCDEF'-240    make printable CFK*NOV01
         MVI   LEN+6,C' '           clear gash byte           CFK*NOV01
         L     R2,PRL               get @ print area
         MVC   1(MSGLEN,R2),MSG     copy start message
PRINTIT  DS    0H          print a message and exit
         L     R1,PRL               get @ print area          CFK*DEC03
         L     R15,=V(PRINTA)       get @ PRINTA csect        CFK*SEP03
         BASR  R14,R15              call PRINTA               CFK*OCT03
         LEAVE ,                    and return                CFK*SEP03
         DC    C'IMM='
         LTORG ,                                              CFK*MAY01
PRL      DC    A(PA)                @ print area in PASS1     CFK*SEP03
MSG      DC    C' '                 start of message          CFK*MAY99
BEG      DS    CL8                  section name              CFK*MAY99
         DC    C'  START '          start message
STA      DC    C'      '              start address
         DC    C'    '
         DC    C'LENGTH '
LEN      DC    C'      '              length
         DC    C'   (HEX)  ID '                               CFK*JLY99
ID       DC    C'    '                SECTION id              CFK*JLY99
MSGLEN   EQU   *-MSG                                          CFK*JLY99
ERRMSG   DC    C'TWO MANY SECTIONS, '                         CFK*JUN99
ERRESDID DC    CL8' '               section name ignored      CFK*JUN99
         DC    C' IGNORED'                                    CFK*JUN99
ERRMSGL  EQU   *-ERRMSG             length of error message   CFK*JUN99
SAVEAREA DS    18F                  save area                 CFK*SEP03
APROGL   DC    A(PROG1-ESDENTLN)    @ -1'th slot in table
CURRSECT DC    A(PROG1)             current section (passes 2-4) *FEB00
NPROG    DC    F'0'                 entry point, number of csects read
PROG1    DS    100CL(ESDENTLN)      ESD table, mapped by ESDSDMAP MAY01
MAXSECTS EQU   (*-PROG1)/ESDENTLN   max no. of slots in table CFK*JUN99
         YREGS ,                    register equates          CFK*MAY01
         END
