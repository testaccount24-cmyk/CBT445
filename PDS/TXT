TXT      TITLE '* * * T X T * * *       (TEXT SUBROUTINE)  '
***********************************************************************
*                                                                     *
*  Process TXT card from input.                                       *
*                                                                     *
*  Called by PASS1.                                                   *
*                                                                     *
*  Parms @ R1:                                                        *
*    +0 - @ input card.                                               *
*                                                                     *
* History:                                                            *
*   Put out message with info from the END card.          CFK Jun 1999*
*   Allow 5000 TXT cards instead of 500.                  CFK Jun 1999*
*   Only print length and epa if present.                 CFK Jly 1999*
*   Map TXT cards.                                        CFK Feb 2000*
*   Don't punch the END message.                          CFK Sep 2000*
*   Use register equates.                                 CFK Nov 2000*
*   Handle overlapping TXT cards correctly.               CFK Apr 2001*
*   Put TXT into buffer for its section.                  CFK May 2001*
*   Indicate to READ when END card found.                 CFK Sep 2001*
*   Check for zero ESD entries found.                     CFK Oct 2001*
*   Handle TXT header buffer overflow.                    CFK Nov 2001*
*   Subtract ESD address from TXT address.                CFK Dec 2001*
*   Check TXT length is valid (1-56 bytes).               CFK Jan 2002*
*   Print 2nd message line with input card on it.         CFK Jan 2002*
*   Use R12 for base (was R13) and call PRINTA not PRINT. CFK May 2003*
*   Call RLDSORT from END.                                CFK May 2003*
*   Use standard linkage conventions                      CFK Sep 2003*
*   Tidy up calls to PRINTA.                              CFK Dec 2003*
*   Handle object decks with length only in the END card. CFK Dec 2003*
*                                                                     *
***********************************************************************
         SPACE 1
*********************************************************************** TXTCARD
*                                                                     * TXTCARD
*  DSECT to map a txt CARD                                            * TXTCARD
*                                                                     * TXTCARD
*********************************************************************** TXTCARD
TXTCARD  DSECT           cols                                           TXTCARD
TXTCFLAG DS    X            1  Constant X'02'                           TXTCARD
TXTCID   DS    CL3        2-4  Constant C'TXT'                          TXTCARD
         DS    X            5  Blank                                    TXTCARD
TXTCADR  DS    XL3        6-8  24 bit address of first byte of text     TXTCARD
         DS    XL2        9-10 Blank                                    TXTCARD
TXTCLEN2 DS    XL2       11-12 Number of bytes of text data             TXTCARD
TXTCLEN1 EQU   TXTCLEN2+1,1    1 byte number of bytes of text           TXTCARD
         DS    XL2       13-14 Blank                                    TXTCARD
TXTCSDID DS    XL2       15-16 ESD identifier of section for this text  TXTCARD
TXTCTEXT DS    XL56      17-72 up to 56 bytes of text data              TXTCARD
         DS    XL8       73-80 Sequence data                            TXTCARD
TXTCRDLN EQU   *-TXTCARD       Length of text card.                     TXTCARD
         SPACE 1
ENDCARD  DSECT                                                CFK*JUN99 ENDCARD
*********************************************************************** ENDCARD
*                                                                     * ENDCARD
*  DSECT to map an END card                                           * ENDCARD
*                                                                     * ENDCARD
*********************************************************************** ENDCARD
ENDC1    DS    X            1     constant x'02'              CFK*JUN99 ENDCARD
ENDCTXT  DS    CL3        2-4     constant c'END'             CFK*JUN99 ENDCARD
         DS    C            5     space                       CFK*JUN99 ENDCARD
ENDCEPA  DS    XL3        6-8     Entry Point Address or spaces K*JUN99 ENDCARD
         DS    CL6        9-14    spaces                      CFK*JUN99 ENDCARD
ENDCID   DS    XL2       15-16    ESD ID of csect that contains the EPA ENDCARD
ENDCNAME DS    CL8       17-24    entry point name or spaces  CFK*JUN99 ENDCARD
         DS    CL4       25-28    spaces                      CFK*JUN99 ENDCARD
ENDCLFLG DS    X            29    binary zero if next field valid JUN99 ENDCARD
ENDCLEN  DS    XL3       30-32    csect length                CFK*JUN99 ENDCARD
ENDCTRFL DS    C            33    flag to ind. if ID present  CFK*JUN99 ENDCARD
ENDCNOTR EQU   C' '                 no IDR info. in record    CFK*JUN99 ENDCARD
ENDC1TR  EQU   C'1'                 1 IDR item follows        CFK*JUN99 ENDCARD
ENDC2TR  EQU   C'2'                 2 IDR items follow        CFK*JUN99 ENDCARD
ENDCT1NM DS    CL10      34-43    1st translator ID           CFK*JUN99 ENDCARD
ENDCT1V  DS    CL2       44-45    1st tr. version (01 to 99)  CFK*JUN99 ENDCARD
ENDCT1M  DS    CL2       46-47    1st tr. mod level (01 to 99)CFK*JUN99 ENDCARD
ENDCT1YR DS    CL2       48-49    last 2 digits of year ass.  CFK*JUN99 ENDCARD
ENDCT1DT DS    CL3       50-52    day of year assembled       CFK*JUN99 ENDCARD
ENDCT2NM DS    CL10      53-62    2nd translator ID           CFK*JUN99 ENDCARD
ENDCT2V  DS    CL2       63-64    2nd tr. version (01 to 99)  CFK*JUN99 ENDCARD
ENDCT2M  DS    CL2       65-66    2nd tr. mod level (01 to 99)CFK*JUN99 ENDCARD
ENDCT2YR DS    CL2       67-68    last 2 digits of year ass.  CFK*JUN99 ENDCARD
ENDCT2DT DS    CL3       69-71    day of year assembled       CFK*JUN99 ENDCARD
*                                                             CFK*JUN99 ENDCARD
         ESDSDMAP                 ESD table entry             CFK*MAY01
*
         TXTHDR                   TXT header table entry      CFK*MAY01
*
TXT      CSECT
         ENTRY END                called by TXT
         ENTRY ENDA               ref'ed by PASS4
         EXTRN NPROG              in EDS0 csect               CFK*MAY01
         EXTRN LCF                in PASS1 csect
         EXTRN PRINTA             csect                       CFK*MAY03
         EXTRN RLDSORT            csect                       CFK*MAY03
         EXTRN PA                 in PASS1 csect              CFK*MAY01
         ENTER ,                  entry logic                 CFK*SEP03
         L     R10,0(R1)          get @ input card            CFK*NOV01
         USING TXTCARD,R10        tell assembler              CFK*NOV01
         CLC   TXTCLEN2,=H'0'     0 bytes text on this card ? CFK*JAN02
         BE    Z10Z               yes, exit
         CLC   TXTCLEN2,=H'56'    valid length ?              CFK*JAN02
         BNH   Z01A               yes, continue               CFK*JAN02
         L     R2,APA             get @ print area in PASS1   CFK*SEP03
         MVC   0(21,R2),=C'** invalid TXT length'  copy msg   CFK*JAN02
         B     Z10M               print message and exit      CFK*JAN02
Z01A     DS    0H                                             CFK*JAN02
         L     R2,=A(NPROG)       get @ number of sections    CFK*MAY01
         LA    R3,4(R2)           get @ first section desc    CFK*MAY01
         USING ESDSDMAP,R3        tell assembler              CFK*MAY01
         ICM   R2,B'1111',0(R2)   get number of sections      CFK*OCT01
         BZ    Z10A1              br. if none                 CFK*OCT01
Z10A     DS    0H                                             CFK*MAY01
         CLC   TXTCSDID,ESDID     is it the right section     CFK*MAY01
         BE    Z10B               branch if found             CFK*MAY01
         LA    R3,ESDENTLN(R3)    else get @ next entry       CFK*MAY01
         BCT   R2,Z10A            and try it if present       CFK*MAY01
Z10A1    DS    0H                                             CFK*OCT01
         L     R2,APA             get @ print area in PASS1   CFK*SEP03
         MVC   0(16,R2),=C'** No ESD for ID'  copy message    CFK*OCT01
         UNPK  17(5,R2),TXTCSDID(3)           unpack ID       CFK*OCT01
         TR    17(4,R2),TRTAB-240             make printable  CFK*OCT01
         MVI   21(R2),C' '                    clear gash byte CFK*OCT01
         B     Z10M               print message and exit      CFK*DEC01
Z10B     DS    0H      found section                          CFK*MAY01
         XR    R5,R5                                          CFK*MAY01
         ICM   R5,B'0111',TXTCADR get TXT adr                 CFK*MAY01
         S     R5,ESDADR          calc offset into section    CFK*DEC01
         BNM   Z10B1              br if not -ve offset        CFK*DEC01
         L     R1,APA             get @ print area in PASS1   CFK*SEP03
         MVC   0(30,R1),=C'** TXT before start of section'    CFK*DEC01
         MVC   31(8,R1),ESDNAME   add section name to message CFK*DEC01
         B     Z10M               print message and exit      CFK*DEC01
Z10B1    DS    0H                                             CFK*DEC01
         LH    R6,TXTCLEN2        get TXT length              CFK*MAY01
         LA    R7,0(R5,R6)        calc @ end of TXT           CFK*MAY01
         TM    ESDINFO,ESDINOLN   csect length in END card ?  CFK*DEC03
         BNO   Z10B3              branch if not               CFK*DEC03
         C     R7,ENDMAXLN        new max length ?            CFK*DEC03
         BNH   Z10B2              if not continue             CFK*DEC03
         ST    R7,ENDMAXLN        else set new max            CFK*DEC03
Z10B2    DS    0H                                             CFK*DEC03
         C     R7,ESDLEN          does TXT fit ?              CFK*DEC03
         BNH   Z10B3              yes - carry on              CFK*DEC03
* else get new buffer twice the size of the old buffer        CFK*DEC03
         L     R0,ESDLEN          get current buffer length   CFK*DEC03
         LR    R9,R0              copy old length             CFK*DEC03
         AR    R0,R0              double it                   CFK*DEC03
         ST    R0,ESDLEN          save new buffer length      CFK*DEC03
         GETMAIN RU,LV=(0),SP=1   get larger buffer           CFK*DEC03
         L     R8,ESDTBUF         get @ current buffer        CFK*DEC03
         ST    R1,ESDTBUF         point @ new buffer          CFK*DEC03
         LR    R14,R1             copy new buffer address     CFK*DEC03
         LR    R1,R8              save @ old buf for freemain CFK*DEC03
         LR    R0,R9              save old len for freemain   CFK*DEC03
         LR    R15,R9             copy source len to dest len CFK*DEC03
         MVCL  R14,R8             copy current buffer to new  CFK*DEC03
         FREEMAIN RU,LV=(0),A=(1),SP=1    free old buffer     CFK*DEC03
         B     Z10C               and carry on                CFK*DEC03
Z10B3    DS    0H                                             CFK*DEC03
         C     R7,ESDLEN          does TXT fit ?              CFK*MAY01
         BNH   Z10C               yes - carry on              CFK*MAY01
         L     R1,APA             get @ print area in PASS1   CFK*SEP03
         MVC   0(33,R1),=C'** TXT extends off end of section' CFK*MAY01
         MVC   34(8,R1),ESDNAME   add section name to message CFK*MAY01
         B     Z10M               print message and exit      CFK*DEC01
Z10C     DS    0H                                             CFK*MAY01
         A     R5,ESDTBUF         calc @ TXT location         CFK*MAY01
         BCTR  R6,0               -1 for MVC                  CFK*MAY01
         EX    R6,MVC1            copy TXT to buffer          CFK*MAY01
         L     R4,ESDNTXT         )                           CFK*MAY01
         LA    R4,1(R4)           ) inc number of cards       CFK*MAY01
         ST    R4,ESDNTXT         )                           CFK*MAY01
         CLC   ESDNTXT(4),ESDMAXT card buffer full ?          CFK*MAY01
         BL    Z10D               no - OK
* else get new buffer twice the size of the old buffer        CFK*NOV01
         L     R0,ESDMAXT         get current max cards       CFK*NOV01
         SLL   R0,8               mul by twice TXT hdr len    CFK*NOV01
         GETMAIN RU,LV=(0),SP=1   get larger buffer           CFK*NOV01
         LR    R8,R1              copy new buffer address     CFK*NOV01
         L     R6,ESDCBUF         get @ current buffer        CFK*NOV01
         ST    R1,ESDCBUF         point @ new buffer          CFK*NOV01
         LR    R1,R6              save for freemain           CFK*NOV01
         L     R7,ESDMAXT         get current max cards       CFK*NOV01
         AR    R7,R7              double it                   CFK*NOV01
         ST    R7,ESDMAXT         save new max cards          CFK*NOV01
         AR    R7,R7              calc original buffer length CFK*NOV01
         LR    R0,R7              save for freemain           CFK*NOV01
         LR    R9,R7              copy source len to dest len CFK*NOV01
         MVCL  R8,R6              copy current buffer to new  CFK*NOV01
         FREEMAIN RU,LV=(0),A=(1),SP=1    free old buffer     CFK*NOV01
Z10D     DS    0H                                             CFK*MAY01
         BCTR  R4,0               sub 1 from card number      CFK*MAY01
         SLL   R4,2               mul by TXT hdr length (4)   CFK*MAY01
         A     R4,ESDCBUF         add @ header buffer         CFK*MAY01
         USING TXTHDR,R4          tell assembler              CFK*MAY01
         MVC   TXTHADR,TXTCADR    copy address of 1st byte of text data
         MVC   TXTHLEN,TXTCLEN1   copy number of bytes of text data
         B     Z10Z               exit TXT                    CFK*SEP03
MVC1     MVC   0(1,R5),TXTCTEXT   EXecuted instruction        CFK*MAY01
         DROP  R3                 tell assembler done with R3 CFK*OCT00
         DROP  R4                 tell assembler done with R4 CFK*MAY01
**************************************************************CFK*DEC01
*        Output message and exit                              CFK*DEC01
**************************************************************CFK*DEC01
Z10M     DS    0H                                             CFK*DEC01
         L     R15,XPRT           get @ PRINTA csect          CFK*DEC03
         L     R1,APA             get @ print area in PASS1   CFK*DEC03
         BASR  R14,R15            call PRINTA                 CFK*DEC03
         L     R1,APA             get @ print area in PASS1   CFK*JAN02
         MVC   0(11,R1),=C'** card is:' copy 2nd message      CFK*JAN02
         MVC   12(80,R1),TXTCARD  add input card to message   CFK*JAN02
         L     R15,XPRT           get @ PRINTA csect          CFK*DEC03
         BASR  R14,R15            call PRINTA                 CFK*DEC03
Z10Z     DS    0H                 common exit point           CFK*SEP03
         LEAVE ,                  exit logic                  CFK*SEP03
         DROP  R10                tell assembler done with R10CFK*NOV01
         DROP  R12                tell assembler done with R12CFK*MAY01
***********************************************************************
*                                                                     *
*  Entry point to process END card(s).                                *
*                                                                     *
*  Parms @ R1:                                                        *
*    +0 - @ input card.                                               *
*                                                                     *
***********************************************************************
END      ENTER                    entry logic                 CFK*SEP03
         L     R3,=V(ENDFLAG)     get @ flag in READ csect    CFK*SEP01
         MVI   0(R3),X'FF'        indicate END card found     CFK*SEP01
         L     R3,0(R1)           get @ input card
         USING ENDCARD,R3         tell assembler              CFK*JUN99
         L     R1,APA             get @ print area            CFK*SEP03
         MVC   ENDA(3),ENDCEPA    copy entry point address
         MVC   ENDS(2),ENDCID     copy ESD ID
         MVC   EXCDAT,ENDCLFLG    copy section len and flag   CFK*DEC03
         CLI   ENDCLFLG,X'00'     is a length present ?       CFK*JLY99
         BNE   NOLEN              br. if no length            CFK*JLY99
         UNPK  ENDMLEN(7),ENDCLEN(4)   unpack csect length    CFK*JUN99
         MVI   ENDMLEN+L'ENDMLEN,C' '  clear gash byte        CFK*JUN99
         TR    ENDMLEN,TRTAB-240  make printable              CFK*JUN99
NOLEN    DS    0H                                             CFK*JUN99
         MVC   ENDMENTR,ENDCNAME  copy entry name or spaces   CFK*JUN99
         CLC   ENDCNAME,SPACES    symbolic entry name present ? K*JUN99
         BNE   NOEPA              br if so                    CFK*JUN99
         CLC   ENDCID,SPACES      entry ESD ID present ?      CFK*MAR00
         BNE   GOTEPA             br. if ESD ID present       CFK*MAR00
         CLC   ENDCEPA,SPACES     entry len present ?         CFK*JLY99
         BE    NOEPA              br. if no entry length      CFK*JLY99
GOTEPA   DS    0H                                             CFK*MAR00
         UNPK  ENDMENTR(7),ENDCEPA(4)  unpack entry point address JUN99
         MVI   ENDMENTR+6,C' '         clear gash byte        CFK*JUN99
         TR    ENDMENTR(6),TRTAB-240   make printable         CFK*JUN99
NOEPA    DS    0H                                             CFK*JUN99
         MVC   0(ENDMSGL1,R1),ENDMSG   copy msg to print area CFK*MAY03
         CLI   ENDCTRFL,ENDCNOTR  translator IDR present ?    CFK*JUN99
         BE    PRMSG              branch if not               CFK*JUN99
         MVC   ENDMT1NM,ENDCT1NM  )                           CFK*JUN99
         MVC   ENDMT1V,ENDCT1V    ) copy 1st                  CFK*JUN99
         MVC   ENDMT1M,ENDCT1M    ) translator                CFK*JUN99
         MVC   ENDMT1YR,ENDCT1YR  ) details                   CFK*JUN99
         MVC   ENDMT1DT,ENDCT1DT  )                           CFK*JUN99
         MVC   ENDMSGL1(ENDMT1L,R1),ENDMT1 copy to print area CFK*MAY03
         CLI   ENDCTRFL,ENDC1TR   2nd translator IDR present ? FK*JUN99
         BE    PRMSG              branch if not               CFK*JUN99
         MVC   ENDMT2NM,ENDCT2NM  )                           CFK*JUN99
         MVC   ENDMT2V,ENDCT2V    ) copy 2nd                  CFK*JUN99
         MVC   ENDMT2M,ENDCT2M    ) translator                CFK*JUN99
         MVC   ENDMT2YR,ENDCT2YR  ) details                   CFK*JUN99
         MVC   ENDMT2DT,ENDCT2DT  )                           CFK*JUN99
         MVC   ENDMSGL1+ENDMT1L(ENDMT2L,R1),ENDMT2  copy to print area
PRMSG    DS    0H                                             CFK*JUN99
         L     R15,XPRT           get @ PRINTA csect          CFK*DEC03
         DROP  R3                 was ENDCARD                 CFK*MAY03
         BASR  R14,R15            call PRINTA                 CFK*DEC03
         L     R3,ALCF            get @ LCF in PASS1 csect
         MVI   0(R3),X'FF'        flag END card found
*  process all sections                                       CFK*MAY01
         L     R10,=A(NPROG)      get @ number of sections    CFK*MAY01
         LA    R11,4(R10)         get @ first section desc    CFK*MAY01
         USING ESDSDMAP,R11       tell assembler              CFK*MAY01
         ICM   R10,B'1111',0(R10) get number of sections      CFK*OCT01
         BZ    Z90Z               exit if none                CFK*DEC03
Z20A     DS    0H                                             CFK*MAY01
* first does it have section length in end card only ?        CFK*DEC03
         TM    ESDINFO,ESDINOLN   missing length ?            CFK*DEC03
         BNO   RCYC               skip if not                 CFK*DEC03
         CLI   EXCFLG,X'00'       was a length on END card ?  CFK*DEC03
         BNE   Z20B               skip if length missing      CFK*DEC03
         MVC   ESDLEN3,EXCLEN     else copy length            CFK*JAN04
         CLC   ESDLEN,ENDMAXLN    do all cards fit            CFK*JAN04
         BNL   RCYC               OK - carry on               CFK*DEC03
         L     R1,APA             get @ print area in PASS1   CFK*DEC03
         MVC   0(33,R1),=C'** TXT extends off end of section' CFK*DEC03
         MVC   34(8,R1),ESDNAME   add section name to message CFK*DEC03
         L     R15,XPRT           get @ PRINTA csect          CFK*DEC03
         BASR  R14,R15            call PRINTA                 CFK*DEC03
         B     RCYC               and carry on                CFK*DEC03
Z20B     DS    0H                                             CFK*DEC03
         L     R1,APA             get @ print area in PASS1   CFK*DEC03
         MVC   0(35,R1),=C'** Length not specified for section' K*DEC03
         MVC   36(8,R1),ESDNAME   add section name to message CFK*DEC03
         L     R15,XPRT           get @ PRINTA csect          CFK*DEC03
         BASR  R14,R15            call PRINTA                 CFK*DEC03
*  sort the cards by text address
RCYC     L     R3,ESDCBUF         get @ TXT card header array CFK*MAY01
         USING TXTHDR,R3                                      CFK*MAY01
         L     R4,ESDNTXT         get number of TXT cards     CFK*MAY01
         SLL   R4,2               mul by array entry len (4)  CFK*MAY01
         AR    R3,R4              calc @ next free entry
         SH    R3,=Y(TXTHDRLN*2)  subtract twice entry len    CFK*MAY01
         L     R4,ESDNTXT         get number of TXT cards read FK*MAY01
         S     R4,ONEXY           subtract 1
         BNP   ECR                if 1 or none can't overlap  CFK*MAY01
         MVI   EXCK,X'00'         clear cards swapped flag
CLXX     CLC   TXTHADR,TXTHADR+TXTHDRLN   TXT out of seq ?    CFK*MAY01
         BNH   NEXX               br if cards in sequence     CFK*MAY01
         MVC   TMXT(TXTHDRLN),TXTHDR+TXTHDRLN   ¨ swap        CFK*MAY01
         MVC   TXTHDR+TXTHDRLN(TXTHDRLN),TXTHDR ¨  header     CFK*MAY01
         MVC   TXTHDR(TXTHDRLN),TMXT            ¨   data      CFK*MAY01
         MVI   EXCK,X'01'         flag card swapped
NEXX     SH    R3,=H'4'           subtract 4
         BCT   R4,CLXX            br if any more cards
         CLI   EXCK,X'01'         any swaps done ?
         BE    RCYC               if so try again
         DROP  R3                                             CFK*OCT00
* sort finished
         L     R9,ESDNTXT         get no. of TXT cards read   CFK*MAY01
         L     R3,ESDCBUF         get @ 1st card header       CFK*MAY01
         USING TXTHDR,R3                                      CFK*MAY01
         S     R9,ONEXY           - 1 since check pairs       CFK*MAY01
         BNP   ECR                br. if < 2 cards            CFK*MAY01
* loop to check if any cards overlap
PTXT     DS    0H                                             CFK*MAY01
         MVC   TCC1+1(3),TXTHADR  copy this cards TXT address CFK*MAY01
         MVC   TCC2+1(3),TXTHADR+TXTHDRLN copy next cards TXT address
         SR    R5,R5              clear r5
         IC    R5,TXTHLEN         get length of TXT data on this card
         A     R5,TCC1            add 1st cards start adr.
         S     R5,TCC2            subtr. 2nd cards start adr. CFK*OCT01
         BNP   PTXTO              br if no overlap            CFK*OCT01
* handle overlapping cards.
         L     R8,APA             get @ print area            CFK*OCT03
         MVC   OVLMSGNM,ESDNAME   copy csect name             CFK*OCT01
         UNPK  OVLMSGAT(7),TXTHADR+TXTHDRLN(4)     add adr.   CFK*OCT01
         TR    OVLMSGAT(6),TRTAB-240               make hex   CFK*OCT01
         MVI   OVLMSGAT+6,C' '    clear gash byte             CFK*OCT01
         CLM   R5,B'0001',TXTHLEN+TXTHDRLN  full overlap ?    CFK*OCT01
         BNH   Z30A               no - carry on               CFK*OCT01
         IC    R5,TXTHLEN+TXTHDRLN  else get next length      CFK*OCT01
Z30A     DS    0H                                             CFK*OCT01
         MH    R5,=H'10'          get length into single byte CFK*OCT01
         CVD   R5,TMXT            make length PD              CFK*OCT01
         MVC   OVLMSGL-1(3),=X'402120' copy EDit mask         CFK*OCT01
         ED    OVLMSGL-1(3),TMXT+6  make length printable     CFK*OCT01
         MVC   0(OVLMSGLN,R8),OVLMSG   copy message           CFK*OCT01
         L     R1,APA             get @ print area            CFK*DEC03
         L     R15,XPRT           get @ PRINTA csect          CFK*DEC03
         BASR  R14,R15            call PRINTA                 CFK*DEC03
         SR    R8,R8              clear register
         IC    R8,TXTHLEN+TXTHDRLN get next cards TXT length  CFK*MAY01
         L     R5,TCC2            get next cards TXT address
         S     R5,TCC1            sub this cards TXT address
         SR    R2,R2              clear register              CFK*APR01
         IC    R2,TXTHLEN         get this cards TXT length   CFK*MAY01
         SR    R2,R5              sub difference in TXT address K*APR01
         CR    R2,R8              more than next cards TXT len? K*APR01
         BL    EROL               branch if yes               CFK*APR01
* the next cards TXT is in the middle of this cards TXT
         STC   R2,TXTHLEN+TXTHDRLN extend next cards TXT      CFK*MAY01
EROL     DS    0H                                             CFK*APR01
         STC   R5,TXTHLEN         shorten this cards TXT      CFK*MAY01
PTXTO    DS    0H                                             CFK*MAY01
         LA    R3,TXTHDRLN(R3)    get @ next card header      CFK*MAY01
         BCT   R9,PTXT            br if any more cards to process
ECR      DS    0H                                             CFK*MAY01
         LA    R11,ESDENTLN(R11)  point at next section desc  CFK*OCT01
         BCT   R10,Z20A           br if any more sections     CFK*MAY01
         L     R15,=A(RLDSORT)    get @ RLDSORT               CFK*MAY03
         BASR  R14,R15            call RLDSORT                CFK*MAY03
Z90Z     DS    0H                 common exit point           CFK*DEC03
         LEAVE ,                  exit                        CFK*SEP03
         DC    C'IMM='
* constants
         LTORG                                                CFK*MAY03
APA      DC    A(PA)              @ print area in PASS1       CFK*MAY03
ONEXY    DC    F'1'               constant
XPRT     DC    A(PRINTA)          @ PRINTA csect              CFK*MAY03
TRTAB    DC    C'0123456789ABCDEF' hexadecimal characters     CFK*JUN99
SPACES   DC    CL8' '             spaces                      CFK*JUN99
ALCF     DC    A(LCF)             @ LCF in PASS1 csect
* variables
ENDMSG   DS    0C                 message for END card        CFK*JUN99
         DC    C' END '           constant text               CFK*JUN99
         DC    C' LENGTH='        constant                    CFK*JUN99
ENDMLEN  DC    CL6' '             possible csect length       CFK*JUN99
         DC    C' ENTRY='                                     CFK*JUN99
ENDMENTR DC    CL8' '             possible entry point name or address
ENDMSGL1 EQU   *-ENDMSG           length of fixed details     CFK*JUN99
ENDMT1   DC    C' TR1='                                       CFK*JUN99
ENDMT1NM DC    CL10' '            1st translator              CFK*JUN99
         DC    C' v'                                          CFK*JUN99
ENDMT1V  DC    C'??'              1st version                 CFK*JUN99
         DC    C'm'                                           CFK*JUN99
ENDMT1M  DC    C'??'              1st mod level               CFK*JUN99
         DC    C' '                                           CFK*JUN99
ENDMT1YR DC    C'  '              1st year                    CFK*JUN99
         DC    C'.'                                           CFK*JUN99
ENDMT1DT DC    C'   '             1st date (day of year)      CFK*JUN99
ENDMT1L  EQU   *-ENDMT1           length of 1st translator details UN99
ENDMT2   DC    C' TR2='                                       CFK*JUN99
ENDMT2NM DC    CL10' '            2nd translator              CFK*JUN99
         DC    C' v'                                          CFK*JUN99
ENDMT2V  DC    C'??'              2nd version                 CFK*JUN99
         DC    C'm'                                           CFK*JUN99
ENDMT2M  DC    C'??'              2nd mod level               CFK*JUN99
         DC    C' '                                           CFK*JUN99
ENDMT2YR DC    C'  '              2nd year                    CFK*JUN99
         DC    C'.'                                           CFK*JUN99
ENDMT2DT DC    C'   '             1 date (day of year)        CFK*JUN99
ENDMT2L  EQU   *-ENDMT2           length of 2nd translator details UN99
OVLMSG   DC    C'** In '          message header              CFK*OCT01
OVLMSGNM DS    CL8                name of section             CFK*OCT01
         DC    C' TEXT CARDS OVERLAY AT '                     CFK*OCT01
OVLMSGAT DS    CL6                address of overlap          CFK*OCT01
         DC    C' FOR '                                       CFK*OCT01
OVLMSGL  DS    CL2                length of overlap           CFK*OCT01
         DC    C' BYTES'                                      CFK*OCT01
OVLMSGLN EQU   *-OVLMSG           total length of message     CFK*OCT01
TCC1     DC    F'0'               current cards TXT address
TCC2     DC    F'0'               next cards TXT address
TMXT     DS    2F                 work area
EXCK     DC    X'00'              flag set if cards swapped in sort
EXCDAT   DS    0XL4               copy of ENDCLFLG and ENDCLEN FK*DEC03
EXCFLG   DS    X                  flag, x'00' in len present  CFK*DEC03
EXCLEN   DS    XL3                section length from card    CFK*DEC03
ENDA     DS    3CL1               entry, entry adr. on END card
ENDS     DS    2CL1               ESD ID on END card
ENDMAXLN DC    F'0'               max length in csect         CFK*DEC03
ENDMAXL3 EQU   ENDMAXLN+1,3       max length (3 bytes)        CFK*DEC03
SAVEAREA DS    18F                save area                   CFK*MAY03
         YREGS                                                CFK*NOV00
         END
