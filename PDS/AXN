AXN      TITLE 'FIND OP CODE MNEMONIC'
***********************************************************************
*                                                                     *
*    Called by FTXTA                                                  *
*                                                                     *
*  Input addressed by R1:                                             *
*    +0  input 1 or 2 byte opcode (4 bytes passed)                    *
*    +2  output 5 byte instruction mnemonic                           *
*    +7  output opcode or X'0000' if invalid opcode                   *
*    +9  output 1 byte flag from table                                *
*    +10 output 1 byte instruction format                             *
*    +11 output 1 byte operand format                                 *
*    +12 output 1 byte flag bits                          CFK Apr 2000*
*    +13        3 bytes spare                                         *
*    +16 output 4 byte @ instruction use count entry for this opcode  *
*                                                                     *
*  @ R13 save area                                                    *
*  Return to @ R14                                                    *
*                                                                     *
*  History:                                                           *
*    Move instruction use counters from COUNT into        CFK May 1999*
*    opcode table, so COUNT does not need to know how                 *
*    many opcodes exist.                                              *
*    Support for 2 byte opcodes.                          CFK Jun 1999*
*    Support for 5 byte mnemonics.                                    *
*    Return separate codes for instruction format and                 *
*    operand format.                                                  *
*    Remove 360 only instructions.                                    *
*    Add 370, XA and ESA instructions.                                *
*    Extra vetting for some instructions.                             *
*    Support for CUSE, MVPG, SQDR and SQER.               CFK Jun 1999*
*    Add BSG, CLST, MVST, SRST, SACF, CKSM, CLCLE, MVCLE, CFK Jul 1999*
*    MSR, MS and CMPSC instructions.                                  *
*    Support for CKSM and BSA.                            CFK Aug 1999*
*    Support for PLO.                                     CFK Dec 1999*
*    Flag semi-priv, interruptible and CC setting instr.  CFK Dec 1999*
*    Pass back instruction format flags.                  CFK Apr 2000*
*    Use standard linkage conventions.                    CFK Apr 2000*
*    Use extended mnemonics for unconditional branches.   CFK Apr 2000*
*    Indicate that branches to R0 don't go anywhere.      CFK Jun 2000*
*    Add CSP.                                             CFK Nov 2000*
*    Flag type of CC set.                                 CFK Nov 2000*
*    Add TRAP2.                                           CFK Dec 2000*
*    Use register equates.                                CFK Dec 2000*
*    Check reserved opcode fields for zeroes in LPSW,     CFK Jan 2004*
*    SLA, SLDA, SLDL, SLL, SPM, SRA, SRDA, SRDL, SRL, SSM and TS.     *
*    Check reserved opcode fields for zeroes in CPYA,     CFK Mar 2004*
*    EAR, IPM; MVPG, SAR, DXR, BAKR, EPAR; ESAR; EREG, ESTA, IAC;     *
*    IPK: ISKE, IVSK, IPTE, LURA, MSTA; PT, PALB: PTLB: RRBE, SSAR;   *
*    SSKE, STURA, TAR, TB, CSCH: HSCH: RCHP: RSCH: SAL: SCHM:         *
*                                                                     *
*  Attributes:                                                        *
*    Reusable                                                         *
*                                                                     *
***********************************************************************
         AXNTAB                   Map instruction table.      CFK*MAY99
         SPACE 1
PARMS    DSECT
PRMIOPC  DS    XL2                input opcode
PRMOUT   DS    0CL11              output copied from opcode table
PRMNAME  DS    CL5                output mnemonic
PRMOOPC  DS    XL2                output opcode
PRMOUTFL DS    X                  output flag byte fron table
PRMOUTFM DS    X                  output instruction format
PRMOOPF  DS    X                  output operand format
PRMOOPF2 DS    X                  output instrunction flags
         DS    XL3                padding
PRMOCNT  DS    A                  output @ instruction use counter
         SPACE 1
AXN      CSECT
         ENTRY MEN                ref'ed by COUNT csect
         USING PARMS,1            tell assembler about parms  CFK*APR00
         STM   R14,R12,12(R13)    save registers              CFK*APR00
         BASR  R12,0              setup base reg              CFK*APR00
         USING *,R12              tell assembler              CFK*APR00
         MVC   BOP,PRMIOPC        copy input instruction
RMEN     DS    0H                 BINARY SEARCH
         L     R7,H55             load number of opcodes in table
         LR    R5,R7              load number of opcodes in table
         SR    R4,R4
         LA    R3,MENLAST-4000    @ last valid opcode
         LA    R3,4000(3)         @ last valid opcode
         USING AXNTAB,R3          tell assembler              CFK*MAY99
         CLC   BOP1,AXNOPC        check it
*  this code assumes the last opcode is not a two byte opcode CFK*JUN99
         BH    PSP                if instr higher no such opcode
         BE    FND                found it
SR       AR    R7,R4
SR2      SRA   R7,1
         M     R6,SIX
         L     R3,AMEN
         AR    R3,R7
         CLC   BOP1,AXNOPC        match ?
         BH    LOW                                            CFK*JUN99
         BL    HIGH                                           CFK*JUN99
         TM    AXNFLG2,AXNF2BYT   2 byte opcode ?             CFK*JUN99
         BZ    FND                No - found it               CFK*JUN99
         CLC   BOP2,AXNOPC+1      2nd byte matches ?          CFK*JUN99
         BE    FND                found it
         BL    HIGH
LOW      D     R6,SIX
         CR    R4,R7
         BE    PSP                no such opcode
         LR    R4,R7
         AR    R7,R5
         B     SR2
HIGH     D     R6,SIX
         CR    R5,R7
         BE    PSP                no such opcode
         LR    R5,R7
         B     SR
FND      DS    0H       table entry match                     CFK*JUN99
         XR    R7,R7              clear work reg
         IC    R7,AXNVAL          get validation rtn number
         B     *+4(R7)
         B     FND2           00  no extra validation routine
         B     REGMASK        04  check register mask
         B     MPDP           08  MP or DP length fields
         B     DXR            0C  DXR register masks
         B     SRP            10  SRP rounding digit
         B     CUSE           14  CUSE register masks         CFK*JUN99
         B     SQR            18  SQDR and SQER register masks FK*JUN99
         B     CKSM           1C  CKSM register masks         CFK*AUG99
         B     BCR            20  sort out BCR ext. mnemonics CFK*APR00
         B     BC             24  sort out BC ext. mnemonics  CFK*APR00
         B     B0             28  R2=0 is not terminating     CFK*JUN00
         B     CSP            2C  CSP register masks          CFK*NOV00
         B     RSV1           30  Bits 16-23 are reserved     CFK*MAR04
         B     RSV2           34  Bits 16-23 and 28-31 res    CFK*MAR04
         B     RSV3           38  Bits 16-31 are reserved     CFK*MAR04
         B     BAKR           3C  Bits 16-23 rsvd and R2=0 not term R04
REGMASK  DS    0H       check register mask
         IC    R7,AXNOPC2         get mask
         EX    R7,TM1             is it OK ?
         BNZ   PSP                br. if invalid register mask
         B     FND2               else OK
TM1      TM    PRMIOPC+1,0        EXecuted to check 2nd opcode byte
MPDP     DS    0H       MP or DP instruction
         IC    R7,PRMIOPC+1       get length fields
         N     R7,=X'0000000F'    mask out second length
         CH    R7,=H'7'           valid second length ?
         BH    PSP                br if invalid length
         XR    R6,R6              clear second work reg
         IC    R6,PRMIOPC+1       get length fields
         SRL   R6,4               extract first length
         CR    R6,R7              is 1st length > 2nd length ?
         BNH   PSP                if not instruction not valid
         B     FND2               else OK
DXR      DS    0H      vet DXR operands
         TM    PRMIOPC+3,X'FF'-X'44'  registers 4 or 0 only ?
         BNZ   PSP                br if invalid extended register.
         B     RSV1               else check bits 16-23 zero  CFK*MAR04
SRP      DS    0H      vet SRP rounding digit
         IC    R7,PRMIOPC+1       get length fields
         N     R7,=X'0000000F'    mask out rounding digit
         CH    R7,=H'9'           valid packed digit ?
         BH    PSP                br if invalid
         B     FND2               else OK
CUSE     DS    0H      vet CUSE operands
         TM    PRMIOPC+3,X'11'    registers must be even.
         BNZ   PSP                br if odd register.
         B     FND2               else OK
SQR      DS    0H      vet SQDR and SQER registers
         TM    PRMIOPC+3,X'99'    registers must be 0, 2, 4 or 6.
         BNZ   PSP                br if bad register.
         B     FND2               else OK
CKSM     DS    0H      vet CKSM operands
         TM    PRMIOPC+3,X'01'    2nd register must be even.
         BNZ   PSP                br if odd register.
         B     FND2                                           CFK*APR00
BCR      DS    0H       select BCR extended mnemonic          CFK*APR00
         TM    PRMIOPC+1,X'F0'    check branching conditions  CFK*APR00
         BO    UNCONDR            unconditional branch        CFK*APR00
         BZ    NOPR               NOP found                   CFK*APR00
         LA    R3,DBCR            else must be conditional br CFK*APR00
         B     B0                 and check register          CFK*JUN00
UNCONDR  DS    0H                 uncond branch found         CFK*APR00
         LA    R3,DBR             @ entry for uncond branch   CFK*APR00
         B     B0                 and check register          CFK*JUN00
NOPR     DS    0H                 NOPR found                  CFK*APR00
         LA    R3,DNOPR           point at NOP entry          CFK*APR00
         B     FND2               and exit                    CFK*APR00
BC       DS    0H       select BC extended mnemonic           CFK*APR00
         TM    PRMIOPC+1,X'F0'    check branching conditions  CFK*APR00
         BO    UNCOND             unconditional branch        CFK*APR00
         BZ    NOP                NOP found                   CFK*APR00
         LA    R3,DBC             else must be conditional br CFK*APR00
         B     FND2               and exit                    CFK*APR00
UNCOND   DS    0H                 uncond branch found         CFK*APR00
         LA    R3,DB              @ entry for uncond branch   CFK*APR00
         B     FND2               and exit                    CFK*APR00
NOP      DS    0H                 NOP found                   CFK*APR00
         LA    R3,DNOP            point at NOP entry          CFK*APR00
         B     FND2               and exit                    CFK*JUN00
BAKR     DS    0H       check BAKR byte3=0 and as B0          CFK*MAR04
         CLI   PRMIOPC+2,X'00'    reserved byte zero ?        CFK*MAR04
         BNE   PSP                br. if not                  CFK*MAR04
         TM    PRMIOPC+3,X'0F'    else check 2nd reg          CFK*MAR04
         B     B0A2               and check if R0             CFK*MAR04
B0       DS    0H       check BR etc for R2=0                 CFK*JUN00
         TM    PRMIOPC+1,X'0F'    check 2nd register          CFK*JUN00
B0A2     DS    0H                 check RC                    CFK*JUN00
         BNZ   FND2               if not R0 done              CFK*JUN00
         MVC   PRMOUT,AXNAME      else copy opcode and flags  CFK*JUN00
         MVI   PRMOUTFL,X'10'     ind. not terminating        CFK*JUN00
         NI    PRMOOPF2,X'FF'-AXNFTRM  clear term flag        CFK*JUN00
         B     FND3               and skip copy               CFK*JUN00
CSP      DS    0H      vet CSP operands                       CFK*NOV00
         TM    PRMIOPC+3,X'10'    1st register must be even.  CFK*NOV00
         BNZ   PSP                br if odd register.         CFK*NOV00
         B     FND2               else OK                     CFK*MAR04
RSV2     DS    0H      vet reserved bits 28-31                CFK*MAR04
         TM    PRMIOPC+3,X'0F'    reserved bits zero ?        CFK*MAR04
         BNZ   PSP                br. if not                  CFK*MAR04
         B     RSV1               else check bits 16-23       CFK*MAR04
RSV3     DS    0H      vet reserved bits 24-31                CFK*MAR04
         CLI   PRMIOPC+3,X'00'    reserved bits zero ?        CFK*MAR04
         BNE   PSP                br. if not                  CFK*MAR04
RSV1     DS    0H      vet reserved bits 16-23                CFK*MAR04
         CLI   PRMIOPC+2,X'00'    reserved bits zero ?        CFK*MAR04
         BNE   PSP                br. if not                  CFK*MAR04
FND2     DS    0H       valid opcode found
         MVC   PRMOUT,AXNAME      Pass back opcode and flags
FND3     DS    0H       opcode/flags copied                   CFK*JUN00
         LA    R3,AXNUSECT        get @ instr. use counter
         ST    R3,PRMOCNT         pass address back to FTXTA
RETA     LM    R14,R12,12(R13)    reload callers registers    CFK*APR00
         BR    R14                and return                  CFK*APR00
PSP      MVC   PRMOUT,DC          NO OP CODE
         B     RETA
         DC    C'IMM='
         LTORG                                                CFK*JUN99
AMEN     DC    A(MEN)             entry point ref'ed by COUNT
H55      DC    A(MEMTABLN/MEMENTLN)  number of table entries
MNEM     DC    C'      '
SIX      DC    A(MEMENTLN)        length of a table entry
FIVE     DC    H'5'
ST6      DC    C'      '
BOP      DS    0XL2               input instruction
BOP1     DC    X'00'                input instruction 1st byte
BOP2     DC    X'00'                input instruction 2nd byte
DC       DC    C'DC   '           dummy table entry for non-opcodes
         DC    XL7'00',2F'0'
MEN      DC    C'PR   '       Program Return - ESA
         DC    X'01011F130F0C00'  e, 2 byte, term
         DC    2F'0'              instruction use counters
MEMENTLN EQU   *-MEN              length of one entry
         DC    C'UPT  '       Update Tree - XA assist
         DC    X'01021413003800'  e, 2 byte, interruptible, sets cc
         DC    2F'0'              instruction use counters
*        DC    C'?    '       ?
*        DC    X'01031413003800'  e, 2 byte, ?
*        DC    2F'0'              instruction use counters
*        DC    C'CMSG '       Coupling Facility I/O
*        DC    X'01051413003800'  e, 2 byte, ?
*        DC    2F'0'              instruction use counters
*        DC    C'TMSG '       Coupling Facility I/O
*        DC    X'01061413003800'  e, 2 byte, ?
*        DC    2F'0'              instruction use counters
*        DC    C'SCKPF'       Set TOD programmable field
*        DC    X'01071413003800'  e, 2 byte, ?
*        DC    2F'0'              instruction use counters
*        DC    C'TMPS '       Coupling Facility
*        DC    X'01081413003800'  e, 2 byte, ?
*        DC    2F'0'              instruction use counters
*        DC    C'CMPS '       Coupling Facility
*        DC    X'01091413003800'  e, 2 byte, ?
*        DC    2F'0'              instruction use counters
&CHECKIT SETC  O'TRAP2        does assembler support TRAP2 ?  CFK*DEC00
         AIF   ('&CHECKIT' NE 'O').NOTRAP2 skip TRAP2 if not  CFK*DEC00
         DC    C'TRAP2'      Trap, HLASM R3                   CFK*DEC00
         DC    X'01FF1413000C00'   rre, 2 byte, term (?), ?   CFK*DEC00
         DC    2F'0'              instruction use counters    CFK*DEC00
.NOTRAP2 ANOP                                                 CFK*DEC00
         DC    C'SPM  '       Set Program Mask
         DC    X'040F1311001004'  r, 1 operand, sets cc       CFK*JAN04
         DC    2F'0'              instruction use counters
         DC    C'BALR '       Branch And Link
         DC    X'05001F10000428'  rr, term unless r2=0        CFK*JUN00
         DC    2F'0'              instruction use counters
         DC    C'BCTR '       Branch on Count
         DC    X'06001F10000428'  rr, term unless r2=0        CFK*JUN00
         DC    2F'0'              instruction use counters
DNOPR    DC    C'NOPR '       No Operation (branch never)     CFK*APR00
         DC    X'07001012000020'  rr2                         CFK*APR00
         DC    2F'0'              instruction use counters    CFK*APR00
DBCR     DC    C'BCR  '       Branch on Condition
         DC    X'07001F10000420'  rr, term unless r2=0
         DC    2F'0'              instruction use counters
DBR      DC    C'BR   '       Branch                          CFK*APR00
         DC    X'07F01F12000420'  rr2, term unless r2=0       CFK*APR00
         DC    2F'0'              instruction use counters    CFK*APR00
*        DC    C'SSK  '       Set Storage Key (p) non-XA
*        DC    X'08001010000300'  rr
*        DC    2F'0'              instruction use counters
*        DC    C'ISK  '       Insert Storage Key (p) non-XA
*        DC    X'09001010000300'  rr
*        DC    2F'0'              instruction use counters
         DC    C'SVC  '       SuperVisor Call
         DC    X'0A001F10000400'  rr, term
         DC    2F'0'              instruction use counters
         DC    C'BSM  '       Branch and Set Mode (XA opcode)
         DC    X'0B001F10000428'  rr, term unless r2=0,       CFK*JUN00
         DC    2F'0'              instruction use counters
         DC    C'BASSM'       Branch And Save and Set Mode (XA opcode)
         DC    X'0C001F10000428'  rr, term unless r2=0        CFK*JUN00
         DC    2F'0'              instruction use counters
         DC    C'BASR '       Branch And Save (370 BS or XA opcode)
         DC    X'0D001F10000428'  rr, term unless r2=0,       CFK*JUN00
         DC    2F'0'              instruction use counters
         DC    C'MVCL '       Move Long, new with 370
         DC    X'0E111010003004'  rr, interruptible, sets cc
         DC    2F'0'              instruction use counters
         DC    C'CLCL '       Compare Logical Long, new with 370
         DC    X'0F11101000B004'  rr, interruptible, sets cc
         DC    2F'0'              instruction use counters
         DC    C'LPR  '       Load Positive
         DC    X'10001010005000'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'LNR  '       Load Negative
         DC    X'11001010005000'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'LTR  '       Load and Test
         DC    X'12001010005000'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'LCR  '       Load Compliment
         DC    X'13001010005000'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'NR   '       AND
         DC    X'14001010005000'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'CLR  '       Compare Logical
         DC    X'15001010009000'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'OR   '       Or
         DC    X'16001010005000'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'XR   '       eXclusive or
         DC    X'17001010005000'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'LR   '       Load
         DC    X'18001010000000'  rr
         DC    2F'0'              instruction use counters
         DC    C'CR   '       Compare
         DC    X'19001010009000'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'AR   '       Add
         DC    X'1A001010005000'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SR   '       Subtract
         DC    X'1B001010005000'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'MR   '       Multiply
         DC    X'1C101010000004'  rr
         DC    2F'0'              instruction use counters
         DC    C'DR   '       Divide
         DC    X'1D101010000004'  rr
         DC    2F'0'              instruction use counters
         DC    C'ALR  '       Add Logical
         DC    X'1E001010005000'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SLR  '       Subtract Logical
         DC    X'1F001010005000'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'LPDR '       Load Positive Lomg
         DC    X'20991210025004'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'LNDR '       Load Negative Long
         DC    X'21991210025004'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'LTDR '       Load and Test Long
         DC    X'22991210025004'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'LCDR '       Load Compliment Long
         DC    X'23991210025004'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'HDR  '       Halve Long
         DC    X'24991210020004'  rr
         DC    2F'0'              instruction use counters
         DC    C'LRDR '       Load Rounded Extended to Long
         DC    X'259B1210020004'  rr, new with 370
         DC    2F'0'              instruction use counters
         DC    C'MXR  '       Multiply Extended
         DC    X'26BB1210000004'  rr, new with 370
         DC    2F'0'              instruction use counters
         DC    C'MXDR '       Multiply Long to Extended
         DC    X'27B91210000004'  rr, new with 370
         DC    2F'0'              instruction use counters
         DC    C'LDR  '       Load Long
         DC    X'28991210020004'  rr
         DC    2F'0'              instruction use counters
         DC    C'CDR  '       Compare Long (c)
         DC    X'29991210029004'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'ADR  '       Add Normalised Long (c)
         DC    X'2A991210025004'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SDR  '       Subtract Normalised Long (c)
         DC    X'2B991210025004'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'MDR  '       Multiply Long
         DC    X'2C991210020004' rr
         DC    2F'0'              instruction use counters
         DC    C'DDR  '       Divide Long
         DC    X'2D991210020004'  rr
         DC    2F'0'              instruction use counters
         DC    C'AWR  '       Add Unnormalised Long (c)
         DC    X'2E991210025004'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SWR  '       Subtract Unnormalised Long (c)
         DC    X'2F991210025004'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'LPER '       Load Positive Short (c)
         DC    X'30991110015004'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'LNER '       Load Negative Short (c)
         DC    X'31991110015004'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'LTER '       Load and Test Short (c)
         DC    X'32991110015004'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'LCER '       Load Compliment Short (c)
         DC    X'33991110015004'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'HER  '       Halve Short
         DC    X'34991110010004'  rr
         DC    2F'0'              instruction use counters
         DC    C'LRER '       Load Rounded Long to Short
         DC    X'35991110010004'  rr, new with 370
         DC    2F'0'              instruction use counters
         DC    C'AXR  '       Add Normalized Extended (c)
         DC    X'36BB1210025004'  rr, new with 370, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SXR  '       Subtract Normalized, Extended (c)
         DC    X'37BB1210025004'  rr, new with 370, sets cc
         DC    2F'0'              instruction use counters
         DC    C'LER  '       Load Short
         DC    X'38991110010004'  rr
         DC    2F'0'              instruction use counters
         DC    C'CER  '       Compare Short (c)
         DC    X'39991110019004'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'AER  '       Add Normalised Short (c)
         DC    X'3A991110015004'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SER  '       Subtract Normalised Short (c)
         DC    X'3B991110015004'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'MER  '       Multiply Short to Long
         DC    X'3C991110010004'  rr
         DC    2F'0'              instruction use counters
         DC    C'DER  '       Divide Short
         DC    X'3D991110010004'  rr
         DC    2F'0'              instruction use counters
         DC    C'AUR  '       Add Unnormalised Short (c)
         DC    X'3E991110015004'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SUR  '       Subtract Unnormalised Short (c)
         DC    X'3F991110015004'  rr, sets cc
         DC    2F'0'              instruction use counters
         DC    C'STH  '       Store Halfword
         DC    X'40002120010000'  rx
         DC    2F'0'              instruction use counters
         DC    C'LA   '       Load Address
         DC    X'41002020000000'  rx
         DC    2F'0'              instruction use counters
         DC    C'STC  '       Store Character
         DC    X'42002020000000'  rx
         DC    2F'0'              instruction use counters
         DC    C'IC   '       Insert Character
         DC    X'43002020000000'  rx
         DC    2F'0'              instruction use counters
         DC    C'EX   '       Execute
         DC    X'44002F20FE0400'  rx, term
         DC    2F'0'              instruction use counters
         DC    C'BAL  '       Bramch And Link
         DC    X'45002F20FF0400'  rx, term
         DC    2F'0'              instruction use counters
         DC    C'BCT  '       Branch on Count
         DC    X'46002F20FF0400'  rx, term
         DC    2F'0'              instruction use counters
DNOP     DC    C'NOP  '       No OPeration                    CFK*APR00
         DC    X'47002021FF0024'  rx1                         CFK*APR00
         DC    2F'0'              instruction use counters    CFK*APR00
DBC      DC    C'BC   '       Branch on Condition
         DC    X'47002F20FF0424'  rx, term
         DC    2F'0'              instruction use counters
DB       DC    C'B    '       unconditional Branch            CFK*APR00
         DC    X'47002F21FF0424'  rx1, term                   CFK*APR00
         DC    2F'0'              instruction use counters    CFK*APR00
         DC    C'LH   '       Load Halfword
         DC    X'48002120010000'  rx
         DC    2F'0'              instruction use counters
         DC    C'CH   '       Compare Halfword
         DC    X'49002120019000'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'AH   '       Add Halfword
         DC    X'4A002120015000'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SH   '       Subtract Halfword
         DC    X'4B002120015000'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'MH   '       Multiply Halfword
         DC    X'4C002120010000'  rx
         DC    2F'0'              instruction use counters
         DC    C'BAS  '       Branch and Save
         DC    X'4D002F20FF0400'  rx, term, 370 BS or XA instruction
         DC    2F'0'              instruction use counters
         DC    C'CVD  '       Convert to Decimal
         DC    X'4E002320030000'  rx
         DC    2F'0'              instruction use counters
         DC    C'CVB  '       Convert to Binary
         DC    X'4F002320030000'  rx
         DC    2F'0'              instruction use counters
         DC    C'ST   '       Store
         DC    X'50002620060000'  rx
         DC    2F'0'              instruction use counters
         DC    C'LAE  '                ESA instruction
         DC    X'51002020000000'  rx
         DC    2F'0'              instruction use counters
         DC    C'N    '       And
         DC    X'54002620065000'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'CL   '       Compare Logical
         DC    X'55002620069000'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'O    '       OR
         DC    X'56002620065000'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'X    '       Exclusive Or
         DC    X'57002620065000'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'L    '       Load
         DC    X'58002220020000'  rx
         DC    2F'0'              instruction use counters
         DC    C'C    '       Compare
         DC    X'59002220029000'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'A    '       Add
         DC    X'5A002220025000'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'S    '       Subtract
         DC    X'5B002220025000'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'M    '       Multiply
         DC    X'5C102220020004'  rx
         DC    2F'0'              instruction use counters
         DC    C'D    '       Divide
         DC    X'5D102220020004'  rx
         DC    2F'0'              instruction use counters
         DC    C'AL   '       Add Logical
         DC    X'5E002720075000'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SL   '       Subtract Logical
         DC    X'5F002720075000'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'STD  '       Store Long
         DC    X'60902820080004'  rx
         DC    2F'0'              instruction use counters
         DC    C'MXD  '       Multiply Long to Extended
         DC    X'67B02820080004'  rx, new with 370
         DC    2F'0'              instruction use counters
         DC    C'LD   '       Load Long
         DC    X'68902520050004'  rx
         DC    2F'0'              instruction use counters
         DC    C'CD   '       Compare Long (c)
         DC    X'69902520059004'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'AD   '       Add Normalised Long (c)
         DC    X'6A902520055004'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SD   '       Subtract Normalised Long (c)
         DC    X'6B902520055004'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'MD   '       Multiply Long
         DC    X'6C902520050004'  rx
         DC    2F'0'              instruction use counters
         DC    C'DD   '       Divide Long
         DC    X'6D902520050004'  rx
         DC    2F'0'              instruction use counters
         DC    C'AW   '       Add Unnormalised Long (c)
         DC    X'6E902820085004'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SW   '       Subtract Unnormalised Long (c)
         DC    X'6F902820085004'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'STE  '       Store Short
         DC    X'70902420040004'  rx
         DC    2F'0'              instruction use counters
         DC    C'MS   '       Multiply Single - 390
         DC    X'71002220020000'  rx
         DC    2F'0'              instruction use counters
         DC    C'LE   '       Load Short
         DC    X'78902420040004'  rx
         DC    2F'0'              instruction use counters
         DC    C'CE   '       Compare Short (c)
         DC    X'79902420049004'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'AE   '       Add Normalized Short (c)
         DC    X'7A902420045004'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SE   '       Subtract Normalized Short (c)
         DC    X'7B902420045004'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'ME   '       Multiply Short to Long
         DC    X'7C902420040004'  rx
         DC    2F'0'              instruction use counters
         DC    C'DE   '       Divide Short
         DC    X'7D902420040004'  rx
         DC    2F'0'              instruction use counters
         DC    C'AU   '       Add Unnormalized Short (c)
         DC    X'7E902420045004'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SU   '       Subtract Unnormalized, Short (c)
         DC    X'7F902420045004'  rx, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SSM  '       Set System Mask (p)
         DC    X'80FF4141010204'  s, privileged               CFK*JAN04
         DC    2F'0'              instruction use counters
*        DC    C'TRCD '       ?
*        DC    X'8100????FF04??'  ?
*        DC    2F'0'              instruction use counters
         DC    C'LPSW '       Load PSW (n,p)
         DC    X'82FF4F41031604'  s, term, sets cc, priv      CFK*JAN04
         DC    2F'0'              instruction use counters
*        DC    C'diag '      diagnose - no official opcode
*        DC    X'83000000000200'
*        DC    C'WRD  '       Write Direct (p)
*        DC    X'84004040000300'  si, non-XA
*        DC    2F'0'              instruction use counters
*        DC    C'BRXH '       Branch Relative on indeX High
*        DC    X'8400?F??FF04??'  rsi, term
*        DC    2F'0'              instruction use counters
*        DC    C'RDD  '       Read Direct (p)
*        DC    X'85004040000300'  si, non-XA
*        DC    2F'0'              instruction use counters
*        DC    C'BRXLE'       Branch Relative on indeX Low or Equal
*        DC    X'8500?F??FF04??'  rsi, term
*        DC    2F'0'              instruction use counters
         DC    C'BXH  '       Branch Index High
         DC    X'86003F30FF0400'  rs, term
         DC    2F'0'              instruction use counters
         DC    C'BXLE '       Br. Index Low/Equal
         DC    X'87003F30FF0400'  rs, term
         DC    2F'0'              instruction use counters
         DC    C'SRL  '       Shift Right Single Logical
         DC    X'880F3131000004'  rs                          CFK*JAN04
         DC    2F'0'              instruction use counters
         DC    C'SLL  '       Shift Left Single Logical
         DC    X'890F3131000004'  rs                          CFK*JAN04
         DC    2F'0'              instruction use counters
         DC    C'SRA  '       Shift Right Single (c)
         DC    X'8A0F3131005004'  rs, sets cc                 CFK*JAN04
         DC    2F'0'              instruction use counters
         DC    C'SLA  '       Shift Left Single (c)
         DC    X'8B0F3131005004'  rs, sets cc                 CFK*JAN04
         DC    2F'0'              instruction use counters
         DC    C'SRDL '       Shift Right Double Logical
         DC    X'8C1F3131000004'  rs                          CFK*JAN04
         DC    2F'0'              instruction use counters
         DC    C'SLDL '       Shift Left Double Logical
         DC    X'8D1F3131000004'  rs                          CFK*JAN04
         DC    2F'0'              instruction use counters
         DC    C'SRDA '       Shift Right Double (c)
         DC    X'8E1F3131005004'  rs, sets cc                 CFK*JAN04
         DC    2F'0'              instruction use counters
         DC    C'SLDA '       Shift Left Double (c)
         DC    X'8F1F3131005004'  rs, sets cc                 CFK*JAN04
         DC    2F'0'              instruction use counters
         DC    C'STM  '       Store Multiple
         DC    X'90003030060000'  rs
         DC    2F'0'              instruction use counters
         DC    C'TM   '       Test under Mask (c)
         DC    X'91004040005000'  si, sets cc
         DC    2F'0'              instruction use counters
         DC    C'MVI  '       Move Immediate
         DC    X'92004040000000'  si
         DC    2F'0'              instruction use counters
         DC    C'TS   '       Test and Set (c)   new with 370
         DC    X'93FF4041005004'  s, sets cc                  CFK*JAN04
         DC    2F'0'              instruction use counters
         DC    C'NI   '       AND Immediate (c)
         DC    X'94004040005000'  si, sets cc
         DC    2F'0'              instruction use counters
         DC    C'CLI  '       Compare Logical Immediate
         DC    X'95004040009000'  si, sets cc
         DC    2F'0'              instruction use counters
         DC    C'OI   '       OR Immediate (c)
         DC    X'96004040005000'  si, sets cc
         DC    2F'0'              instruction use counters
         DC    C'XI   '       Exclusive OR Immediate (c)
         DC    X'97004040005000'  si, sets cc
         DC    2F'0'              instruction use counters
         DC    C'LM   '       Load Multiple
         DC    X'98003030060000'  rs
         DC    2F'0'              instruction use counters
         DC    C'TRACE'
         DC    X'99003030000200' rs, new with XA, privileged
         DC    2F'0'              instruction use counters
         DC    C'LAM  '          rs,  ESA instruction
         DC    X'9A003030000000'
         DC    2F'0'              instruction use counters
         DC    C'STAM '          rs,  ESA instruction
         DC    X'9B003030000000'
         DC    2F'0'              instruction use counters
*        DC    C'SIO  '       Start I/O (c,p)
*        DC    X'9C004141000B00'  s, 2 byte non-XA
*        DC    2F'0'              instruction use counters
*        DC    C'SIOF '       Start I/O fast (c,p) 370 FR
*        DC    X'9C014141000B00'  s, 2 byte, non-XA
*        DC    2F'0'              instruction use counters
*        DC    C'RIO  '       Resume I/O (c,p) 370 SR
*        DC    X'9C024141000B00'  s, 2 byte, non-XA
*        DC    2F'0'              instruction use counters
*        DC    C'TIO  '       Test I/O (c,p)
*        DC    X'9D004141000B00'  s, 2 byte, non-XA
*        DC    2F'0'              instruction use counters
*        DC    C'CLRIO'       Resume I/O (c,p) 370
*        DC    X'9D014141000B00'  s, 2 byte, non-XA
*        DC    2F'0'              instruction use counters
*        DC    C'HIO  '       Halt I/O (c,p)
*        DC    X'9E004141000300'  s, 2 byte, non-XA
*        DC    2F'0'              instruction use counters
*        DC    C'HDV  '       Halt Device (c,p) 370 HD
*        DC    X'9E014141000B00'  s, 2 byte, non-XA
*        DC    2F'0'              instruction use counters
*        DC    C'TCH  '       Test Channel (c,p)
*        DC    X'9F004141000300'  s, 2 byte, non-XA
*        DC    2F'0'              instruction use counters
*        DC    C'CLRCH'       Clear Channel (c,p) 370 RE
*        DC    X'9F014141000B00'  s, 2 byte, non-XA
*        DC    2F'0'              instruction use counters
*        DC    C'Vxxx '     vector opcodes
*        DC    X'A400??????????'
*        DC    2F'0'              instruction use counters
*        DC    C'Vxxx '     vector opcodes
*        DC    X'A500??????????'
*        DC    2F'0'              instruction use counters
*        DC    C'Vxxx '     vector opcodes
*        DC    X'A600??????????'
*        DC    2F'0'              instruction use counters
*        DC    C'TMH  '     Test under Mask High
*        DC    X'A700????00????' ri, new with 390, sets cc
*        DC    2F'0'              instruction use counters
*        DC    C'TML  '     Test under Mask Low
*        DC    X'A701????00????' ri, new with 390, sets cc
*        DC    2F'0'              instruction use counters
*        DC    C'BRC  '     Branch Relative on Condition
*        DC    X'A701?F??00????' ri, term, new with 390
*        DC    2F'0'              instruction use counters
*        DC    C'BRAS '     Branch Relative And Save
*        DC    X'A704?F??00????' ri, term, new with 390
*        DC    2F'0'              instruction use counters
*        DC    C'BRCT '     Branch relative on CounT
*        DC    X'A706?F??00????' ri, term, new with 390
*        DC    2F'0'              instruction use counters
*        DC    C'LHI  '     Load Halfword Immediate
*        DC    X'A708????00????' ri, new with 390
*        DC    2F'0'              instruction use counters
*        DC    C'AHI  '     Add Halfword Immediate, sets cc
*        DC    X'A70A????005???' ri, new with 390
*        DC    2F'0'              instruction use counters
*        DC    C'MHI  '     Multiply Halfword Immediate
*        DC    X'A70C????00????' ri, new with 390
*        DC    2F'0'              instruction use counters
*        DC    C'CHI  '     Compare Halfword Immediate
*        DC    X'A70E????009???' ri, new with 390, sets cc
*        DC    2F'0'              instruction use counters
         DC    C'MVCLE'      MoVe Characters Long Extended
         DC    X'A8113030001004' rs, new with 390, sets cc
         DC    2F'0'              instruction use counters
         DC    C'CLCLE'      Compare Logical Characters Long Ext.
         DC    X'A9113030009004' rs, new with 390, sets cc
         DC    2F'0'              instruction use counters
         DC    C'STNSM'      Store Then AND Sys. Mask (p)
         DC    X'AC004040000200' si, new with 370 TR, privileged
         DC    2F'0'              instruction use counters
         DC    C'STOSM'      Store Then OR Sys. Mask (p)
         DC    X'ADB84040000204' si, new with 370 TR, privileged
         DC    2F'0'              instruction use counters
         DC    C'SIGP '       Signal Processor (c,p)
         DC    X'AE003030001200'  rs, new with 370 MP, priv, sets cc
         DC    2F'0'              instruction use counters
         DC    C'MC   '       Monitor Call - new with 370
         DC    X'AFF04F40000404'  si, term
         DC    2F'0'              instruction use counters
         DC    C'LRA  '       Load Real Address (c,p)
         DC    X'B1002020001200'  rx, new with 370 TR, priv, sets cc
         DC    2F'0'              instruction use counters
*        DC    C'STIDC'       Store Channel ID (p) - 370
*        DC    X'B2034141030B00'   s, 2 byte, non-XA
*        DC    2F'0'              instruction use counters
         DC    C'STIDP'       Store CPU ID (p) - 370
         DC    X'B2024141030A00'   s, 2 byte, privileged
         DC    2F'0'              instruction use counters
         DC    C'SCK  '       Set Clock (c,p) - 370
         DC    X'B2044141031A00'   s, 2 byte, privileged, sets cc
         DC    2F'0'              instruction use counters
         DC    C'STCK '       Store Clock (c) - 370
         DC    X'B2054141031800'   rx, 2 byte, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SCKC '       Set Clock Comparator (p) - 370 CK
         DC    X'B2064141030A00'   s, 2 byte, privileged
         DC    2F'0'              instruction use counters
         DC    C'STCKC'       Store Clock Comparator (p) - 370 CK
         DC    X'B2074141030A00'   s, 2 byte, privileged
         DC    2F'0'              instruction use counters
         DC    C'SPT  '       Set CPU Timer (p) - 370 CK
         DC    X'B2084141030A00'   s, 2 byte, privileged
         DC    2F'0'              instruction use counters
         DC    C'STPT '       Store CPU Timer (p) - 370 CK
         DC    X'B2094141030A00'   s, 2 byte, privileged
         DC    2F'0'              instruction use counters
         DC    C'SPKA '       Set PSW Key from Address (q) - 370 PK
         DC    X'B20A4141000900'   s, 2 byte, semi-privileged
         DC    2F'0'              instruction use counters
         DC    C'IPK  '       Insert PSW Key (q) - 370 PK
         DC    X'B20B4242000938'   s, 2 byte, semi-privileged *MAR04
         DC    2F'0'              instruction use counters
         DC    C'PTLB '       Purge TLB (p) - 370 TR
         DC    X'B20D4242000A38'   s, 2 byte, privileged   CFK*MAR04
         DC    2F'0'              instruction use counters
         DC    C'SPX  '      Set Prefix (p) - 370 MP
         DC    X'B2104141060A00'   s, 2 byte, privileged
         DC    2F'0'              instruction use counters
         DC    C'STPX '      Store Prefix (p) - 370 MP
         DC    X'B2114141060A00'   s, 2 byte, privileged
         DC    2F'0'              instruction use counters
         DC    C'STAP '      Store CPU Address (p) - 370 MP
         DC    X'B2124141010A00'   s, 2 byte, privileged
         DC    2F'0'              instruction use counters
*        DC    C'SIE  '      Start Interpretive Execution (p) - 370
*        DC    X'B214???8000A00'   s, 2 byte, non-XA
*        DC    2F'0'              instruction use counters
*        DC    C'SSYN '      Set TOD clock Synchronisation selection
*                                                    register
*        DC    X'B216???8000A00'   ?, Old TPF RPQ
*        DC    2F'0'              instruction use counters
*        DC    C'SETR '      Set ETR attachment controls
*        DC    X'B2164141000A00'   s, (Sysplex Timer)
*        DC    2F'0'              instruction use counters
*        DC    C'STSYN'      Store TOD clock Synchronisation selection
*                                                    register
*        DC    X'B217????000A00'   ?, Old TPF RPQ
*        DC    2F'0'              instruction use counters
*        DC    C'STETR'      Store ETR attachment controls
*        DC    X'B2174141000A00'   s, (Sysplex Timer)
*        DC    2F'0'              instruction use counters
         DC    C'PC   '      Program Call (q) - 370 DU, useable by
*        non-auth
         DC    X'B2184F41FF0D00'   s, 2 byte, term, semi-priv
         DC    2F'0'              instruction use counters
         DC    C'SAC  '      Set Address Space Control (q) - 370 DU
         DC    X'B2194141000900'   s, 2 byte, semi-privileged
         DC    2F'0'              instruction use counters
         DC    C'CFC  '      Compare and Form Codeword - XA
         DC    X'B21A4141003800'   s, 2 byte, interruptible, sets cc
         DC    2F'0'              instruction use counters
*        DC    C'SERVC'      Service Processor Call
*        DC    X'B220???8000A00'   ?
*        DC    2F'0'              instruction use counters
         DC    C'IPTE '      Invalidate Page Table Entry (p) - 370 EF
         DC    X'B2211010000A30'   rre, 2 byte, privileged    CFK*MAR04
         DC    2F'0'              instruction use counters
         DC    C'IPM  '      Insert Program Mask - XA
         DC    X'B2221311000834'   rre, 2 byte, 1 reg, rsvd bits *MAR04
         DC    2F'0'              instruction use counters
         DC    C'IVSK '      Insert Virtual Storage Key (q) - 370 DU
         DC    X'B2231010000930'   rre, 2 byte, semi-privileged, UNA 04
         DC    2F'0'              instruction use counters
         DC    C'IAC  '      Insert Address Space Control (q,c), 370 DU
         DC    X'B2241311001934' rre, 2 byte, 1 reg, semi-priv, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SSAR '      Set Secondary ASN (q) - 370 DU
         DC    X'B2251311000934'   rre, 2 byte, 1 reg, semi-priv *MAR04
         DC    2F'0'              instruction use counters
         DC    C'EPAR '      Extract Primary ASN (q) - 370 DU
         DC    X'B2261311000934'   rre, 2 byte, 1 reg, semi-priv *MAR04
         DC    2F'0'              instruction use counters
         DC    C'ESAR '      Extract Secondary ASN (q) - 370 DU
         DC    X'B2271311000934'   rre, 2 byte, 1 reg, semi-priv *MAR04
         DC    2F'0'              instruction use counters
         DC    C'PT   '      Program Transfer (q) - 370 DU
         DC    X'B2281F10000D30'   rre, 2 byte, term, semi-priv K*MAR04
         DC    2F'0'              instruction use counters
         DC    C'ISKE '      Insert Storage Key Extended (p) - 370 EK
         DC    X'B2291010000A30'   rre, 2 byte, 3rd byte res CFK*MAR04
         DC    2F'0'              instruction use counters
         DC    C'RRBE '      Reset Reference Bit Extended (p,c), 370 EK
         DC    X'B22A1010001A30'   rre, 2 byte, privileged, sets cc 04
         DC    2F'0'              instruction use counters
         DC    C'SSKE '      Set Storage Key Extended (p) - 370 EK
         DC    X'B22B1010000A30'   rre, 2 byte, privileged    CFK*MAR04
         DC    2F'0'              instruction use counters
         DC    C'TB   '      Test Block (p,c) - 370 TB
         DC    X'B22C1010003A30'   rre, 2 byte, int, priv,    CFK*MAR04
         DC    2F'0'              instruction use counters
         DC    C'DXR  '      Divide (Extended) - XA
         DC    X'B22D101000080C'   rre, 2 byte, 3rd byte ignored
         DC    2F'0'              instruction use counters
*        DC    C'PGIN '      Move to expanded storage - XA
*        DC    X'B22E0000000A00'  ?
*        DC    2F'0'              instruction use counters
*        DC    C'PGOUT'      Move from expanded storage - XA
*        DC    X'B22F0000000A00'  ?
*        DC    2F'0'              instruction use counters
         DC    C'CSCH '      Clear Subchannel (p,c) - XA
         DC    X'B2304242000A38'   s, 2 byte, privileged,     CFK*MAR04
         DC    2F'0'              instruction use counters
         DC    C'HSCH '      Halt Subchannel (p,c) - XA
         DC    X'B2314242001A38'   s, 2 byte, privileged      CFK*MAR04
         DC    2F'0'              instruction use counters
         DC    C'MSCH '      Modify Subchannel (p,c) - XA
         DC    X'B2324141061A00'   s, 2 byte, privileged, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SSCH '      Start Subchannel (p,c) - XA
         DC    X'B2334141061A00'   s, 2 byte, privileged, sets cc
         DC    2F'0'              instruction use counters
         DC    C'STSCH'      Store Subchannel (p,c) - XA
         DC    X'B2344141061A00'   s, 2 byte, privileged, sets cc
         DC    2F'0'              instruction use counters
         DC    C'TSCH '      Test Subchannel (p,c) - XA
         DC    X'B2354141061A00'   s, 2 byte, privileged, sets cc
         DC    2F'0'              instruction use counters
         DC    C'TPI  '      Test Pending Interruption (p,c) - XA
         DC    X'B2364141061A00'   s, 2 byte, privileged, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SAL  '      Set Address Limit (p) - XA
         DC    X'B2374242000A38'   s, 2 byte, privileged      CFK*MAR04
         DC    2F'0'              instruction use counters
         DC    C'RSCH '      Resume Subchannel (p,c) - XA
         DC    X'B2384242001A38'   s, 2 byte, privileged      CFK*MAR04
         DC    2F'0'              instruction use counters
         DC    C'STCRW'      Store Channel Report Word (p,c) - XA
         DC    X'B2394141061A00'   s, 2 byte, privileged, sets cc
         DC    2F'0'              instruction use counters
         DC    C'STCPS'      Store Channel Path Status (p) - XA
         DC    X'B23A4141030A00'   s, 2 byte, privileged
         DC    2F'0'              instruction use counters
         DC    C'RCHP '      Reset Channel Path (p,c) - XA
         DC    X'B23B4242001A38'   s, 2 byte, privileged      CFK*MAR04
         DC    2F'0'              instruction use counters
         DC    C'SCHM '      Set Channel Monitor (p) - XA
         DC    X'B23C4242000A38'   s, 2 byte, privileged      CFK*MAR04
         DC    2F'0'              instruction use counters
* The next 3 opcodes are SIE assists for VM/XA, VM/ESA and PR/SM
*        DC    C'STZP '      Store Zone Parameter
*        DC    X'B23D0000000A00'  ?
*        DC    2F'0'              instruction use counters
*        DC    C'SZP  '      Set Zone Parameter
*        DC    X'B23E0000000A00'  ?
*        DC    2F'0'              instruction use counters
*        DC    C'TPZI '      Test Pending Zone Interrrupt
*        DC    X'B23F0000000A00'  ?
*        DC    2F'0'              instruction use counters
         DC    C'BAKR '      Branch And Stack - ESA
         DC    X'B2401F10000C3C' rre, 2 byte, term unless R2=0 FK*MAR04
         DC    2F'0'              instruction use counters
         DC    C'CKSM '      Checksum - 390
         DC    X'B241101000181C'   rre, 2 byte, sets cc
         DC    2F'0'              instruction use counters
*        DC    C'?????'      Add FRR - MVS assist
*        DC    X'B2421010000A00'   rre, 2 byte, privileged
*        DC    2F'0'              instruction use counters
         DC    C'SQDR '      Square Root Double - 390
         DC    X'B2441010000818'   rre, 2 byte
         DC    2F'0'              instruction use counters
         DC    C'SQER '      Square Root Short - 390
         DC    X'B2451010000818'   rre, 2 byte
         DC    2F'0'              instruction use counters
         DC    C'STURA'      Store Using Real Address - ESA
         DC    X'B2461010000A30'   rre, 2 byte, privileged    CFK*MAR04
         DC    2F'0'              instruction use counters
         DC    C'MSTA '      Modify Stacked State - ESA
         DC    X'B2471111000834'   rre, 2 byte, reserved bits CFK*MAR04
         DC    2F'0'              instruction use counters
         DC    C'PALB '      Purge ALB (p) - ESA
         DC    X'B2481010000A38'   rre, 2 byte, privileged    CFK*MAR04
         DC    2F'0'              instruction use counters
         DC    C'EREG '      Extract Stacked registers - ESA
         DC    X'B2491010000834'   rre, 2 byte, rsrvd bits    CFK*MAR04
         DC    2F'0'              instruction use counters
         DC    C'ESTA '      Extract Stacked State - ESA
         DC    X'B24A1010001830'   rre, 2 byte, sets cc, rsvd CFK*MAR04
         DC    2F'0'              instruction use counters
         DC    C'LURA '      Load Using Real Address - ESA
         DC    X'B24B1010000A30'   rre, 2 byte, privileged    CFK*MAR04
         DC    2F'0'              instruction use counters
         DC    C'TAR  '      Test Access - ESA
         DC    X'B24C1010001830'   rre, 2 byte, sets cc       CFK*MAR04
         DC    2F'0'              instruction use counters
         DC    C'CPYA '      Copy Access - ESA
         DC    X'B24D1010000830'   rre, 2 byte, 3rd byte rsvd CFK*MAR04
         DC    2F'0'              instruction use counters
         DC    C'SAR  '      Set Access - ESA
         DC    X'B24E1010000830'   rre, 2 byte, 3rd byte rsvd CFK*MAR04
         DC    2F'0'              instruction use counters
         DC    C'EAR  '      Extract Access - ESA,
         DC    X'B24F1010000830'   rre, 2 byte, 3rd byte rsvd CFK*MAR04
         DC    2F'0'              instruction use counters
&CHECKIT SETC  O'CSP          does assembler support CSP ?    CFK*NOV00
         AIF   ('&CHECKIT' NE 'O').NOCSP   skip CSP if not    CFK*NOV00
         DC    C'CSP  '      Compare and Swap and Purge (p) - 390 G3 00
         DC    X'B2501010001A2C'   rre, 2 byte, privileged, sets CC V00
         DC    2F'0'              instruction use counters    CFK*NOV00
.NOCSP   ANOP                                                 CFK*NOV00
         DC    C'MSR  '      Multiply Single - 390
         DC    X'B2521010000800'   rre, 2 byte
         DC    2F'0'              instruction use counters
*        DC    C'?????'      ?
*        DC    X'B2530000000A00'  ?
*        DC    2F'0'              instruction use counters
         DC    C'MVPG '      Move Page - ESA
         DC    X'B2541010000830'   rre, 2 byte, 3rd byte rsvd CFK*MAR04
         DC    2F'0'              instruction use counters
         DC    C'MVST '      MoVe String - 390
         DC    X'B2551010001800'   rre, 2 byte, sets cc
         DC    2F'0'              instruction use counters
         DC    C'CUSE '      Compare Until String Equal - ESA CU
         DC    X'B2571010001814'   rre, 2 byte, sets cc
         DC    2F'0'              instruction use counters
         DC    C'BSG  '      Branch in Subspace Group - 390
         DC    X'B2581F10000C00'   rre, 2 byte, term
         DC    2F'0'              instruction use counters
*        DC    C'IEBSE'      Invalidate Expanded Storage Block Entry
*        DC    X'B2590000000A00'  ? - Move Page (Facility 2)
*        DC    2F'0'              instruction use counters
         DC    C'BSA  '      Branch and Stack Authority - 390
         DC    X'B25A1F10000D00'   rre, 2 byte, term, semi-priv
         DC    2F'0'              instruction use counters
*        DC    C'PG???'      Asynchronous Page Facility
*        DC    X'B25B0000000A00'  ?
*        DC    2F'0'              instruction use counters
*        DC    C'PGOUT'      Asynchronous Page Facility
*        DC    X'B25C0000000A00'  ?
*        DC    2F'0'              instruction use counters
         DC    C'CLST '      Compare Logical String - 390
         DC    X'B25D1010001800'   rre, 2 byte, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SRST '      Search String - 390
         DC    X'B25E1010001800'   rre, 2 byte, sets cc
         DC    2F'0'              instruction use counters
*        DC    C'CHSC '      Channel Information
*        DC    X'B25F0000000A00'  ? (Channel Subsystem Call)
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Coupling Facility
*        DC    X'B2600000000A00'  ?
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Coupling Facility
*        DC    X'B2610000000A00'  ?
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      ?
*        DC    X'B2620000000A00'  ?
*        DC    2F'0'              instruction use counters
         DC    C'CMPSC'      Compression Services
         DC    X'B2631010001814'   rre, 2 byte, sets cc
         DC    2F'0'              instruction use counters
*        DC    C'?????'      Coupling Facility
*        DC    X'B2640000000A00'  ?
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Coupling Facility
*        DC    X'B2650000000A00'  ?
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Coupling Facility
*        DC    X'B2660000000A00'  ?
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Coupling Facility
*        DC    X'B2670000000A00'  ?
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Define Vector (Coupling Facility)
*        DC    X'B2680000000A00'  ?
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Crypto
*        DC    X'B2690000000A00'  ?
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Crypto
*        DC    X'B26A0000000A00'  ?
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Crypto
*        DC    X'B26B0000000A00'  ?
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Crypto
*        DC    X'B26C0000000A00'  ?
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Crypto
*        DC    X'B26D0000000A00'  ?
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Crypto
*        DC    X'B26E0000000A00'  ?
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Crypto
*        DC    X'B26F0000000A00'  ?
*        DC    2F'0'              instruction use counters
*        DC    C'SPCS '      Set Primary Clock Selection
*        DC    X'B2704141000A00'  s, 2 byte, priv?
*        DC    2F'0'              instruction use counters
*        DC    C'STPCS'      Store Primary Clock Selection
*        DC    X'B2714141000A00'  s, 2 byte, priv?
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Coupling Facility
*        DC    X'B2720000000A00'  ?
*        DC    2F'0'              instruction use counters
*        DC    C'SIGA '      Signal Adapter (OSA Express / Queued
*                                                          Direct I/O)
*        DC    X'B2742420000A00'  ?
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      ?
*        DC    X'B2750000000A00'  ?
*        DC    2F'0'              instruction use counters
*        DC    C'CANC?'      Cancel I/O Facility
*        DC    X'B2760000000A00'  ?
*        DC    2F'0'              instruction use counters
*        DC    C'RP   '      Resume Program, HLASM R3        CFK*DEC00
*        DC    X'B2770000000A00'  ?                          CFK*DEC00
*        DC    2F'0'              instruction use counters   CFK*DEC00
         DC    C'SACF '      Set Address space Control Fast - 390
         DC    X'B2794141000900'   s, 2 byte, semi-privileged
         DC    2F'0'              instruction use counters
*        DC    C'???? '      Coupling facility
*        DC    X'B27A0000000A00'  ?
*        DC    2F'0'              instruction use counters
*        DC    C'TFF? '      Coupling facility (Send message response)
*        DC    X'B27B0000000A00'  ?
*        DC    2F'0'              instruction use counters
*        DC    C'???? '      Coupling facility
*        DC    X'B27C0000000A00'  ?
*        DC    2F'0'              instruction use counters
*        DC    C'STSI '         Store System Info, HLASM R3  CFK*DEC00
*        DC    X'B27D0000000A00'  ?                          CFK*DEC00
*        DC    2F'0'              instruction use counters   CFK*DEC00
*        DC    C'???? '      Coupling facility
*        DC    X'B27E0000000A00'  ?
*        DC    2F'0'              instruction use counters
*        DC    C'???? '      Coupling facility
*        DC    X'B27F0000000A00'  ?
*        DC    2F'0'              instruction use counters
*        DC    C'SRNM '         ?,                 HLASM R3  CFK*DEC00
*        DC    X'B2990000000A00'  ?                          CFK*DEC00
*        DC    2F'0'              instruction use counters   CFK*DEC00
*        DC    C'STFPC'         ?,                 HLASM R3  CFK*DEC00
*        DC    X'B29C0000000A00'  ?                          CFK*DEC00
*        DC    2F'0'              instruction use counters   CFK*DEC00
*        DC    C'LFPC '         ?,                 HLASM R3  CFK*DEC00
*        DC    X'B29D0000000A00'  ?                          CFK*DEC00
*        DC    2F'0'              instruction use counters   CFK*DEC00
*        DC    C'???? '      Move Channel Buffer Data Multiple
*        DC    X'B2A40000000A00'  ? (Coupling Facility)
*        DC    2F'0'              instruction use counters
*        DC    C'TRE  '         ?,                 HLASM R3  CFK*DEC00
*        DC    X'B2A50000000A00'  ?                          CFK*DEC00
*        DC    2F'0'              instruction use counters   CFK*DEC00
*        DC    C'CUUTF'         ?,                 HLASM R3  CFK*DEC00
*        DC    X'B2A60000000A00'  ?                          CFK*DEC00
*        DC    2F'0'              instruction use counters   CFK*DEC00
*        DC    C'CUTFU'         ?,                 HLASM R3  CFK*DEC00
*        DC    X'B2A70000000A00'  ?                          CFK*DEC00
*        DC    2F'0'              instruction use counters   CFK*DEC00
*        DC    C'???? '      ?
*        DC    X'B2A80000000A00'  ?
*        DC    2F'0'              instruction use counters
*        DC    C'???? '      ?
*        DC    X'B2A90000000A00'  ?
*        DC    2F'0'              instruction use counters
*        DC    C'???? '      Dequeue CAM
*        DC    X'B2AA0000000A00'  ?
*        DC    2F'0'              instruction use counters
*        DC    C'???? '      Process CAM queue
*        DC    X'B2AB0000000A00'  ?
*        DC    2F'0'              instruction use counters
*        DC    C'???? '      Enqueue CAM
*        DC    X'B2AC0000000A00'  ?
*        DC    2F'0'              instruction use counters
*        DC    C'?????'       Amdahl RMI I/F - no mnemonic
*        DC    X'B2BE0000000200'
*        DC    2F'0'              instruction use counters
*        DC    C'???? '      Coupling facility
*        DC    X'B2F60000000A00'  ?
*        DC    2F'0'              instruction use counters
*        DC    C'TRAP4'         ?,                 HLASM R3  CFK*DEC00
*        DC    X'B2FF0000000A00'  ?                          CFK*DEC00
*        DC    2F'0'              instruction use counters   CFK*DEC00
****** B3** binary floating point opcodes here ******
         DC    C'STCTL'       Store Control (p)   new 5 byte opcode !
         DC    X'B6003030600200'  rs, new with 370 ?, privileged
         DC    2F'0'              instruction use counters
         DC    C'LCTL '       Load Control (p)    new with 370 ?
         DC    X'B7003030600200'  rs, privileged
         DC    2F'0'              instruction use counters
         DC    C'CS   '       Compare & Swap (c)  new with 370 SW
         DC    X'BA003030601000'  rs, sets cc
         DC    2F'0'              instruction use counters
         DC    C'CDS  '       Compare Double & Swap (c) new with 370 SW
         DC    X'BB113030301004'  rs, sets cc
         DC    2F'0'              instruction use counters
         DC    C'CLM  '       Compare Logical/Mask (c)   new with 370
         DC    X'BD003030009000'  rs 2, sets cc
         DC    2F'0'              instruction use counters
         DC    C'STCM '       Store Characters under Mask  new with 370
         DC    X'BE003030000000'  rs 2
         DC    2F'0'              instruction use counters
         DC    C'ICM  '       Insert Chars. Under Mask (c) new with 370
         DC    X'BF003030005000'  rs 2, sets cc
         DC    2F'0'              instruction use counters
         DC    C'MVN  '      Move Numerics
         DC    X'D1005050000000' ss 1
         DC    2F'0'              instruction use counters
         DC    C'MVC  '      Move Characters
         DC    X'D2005050000000' ss 1
         DC    2F'0'              instruction use counters
         DC    C'MVZ  '      Move Zones
         DC    X'D3005050000000' ss 1
         DC    2F'0'              instruction use counters
         DC    C'NC   '      AND (c)
         DC    X'D4005050005000' ss 1, sets cc
         DC    2F'0'              instruction use counters
         DC    C'CLC  '      Compare Logical (c)
         DC    X'D5005050009000' ss 1, sets cc
         DC    2F'0'              instruction use counters
         DC    C'OC   '      OR Character (c)
         DC    X'D6005050005000' ss 1, sets cc
         DC    2F'0'              instruction use counters
         DC    C'XC   '      Exclusive OR Character (c)
         DC    X'D7005050005000' ss 1, sets cc
         DC    2F'0'              instruction use counters
         DC    C'MVCK '      Move with Key (c,q)      new with 370 DU
         DC    X'D9005252001100' ss 3, semi-privileged, sets cc
         DC    2F'0'              instruction use counters
         DC    C'MVCP '      Move to Primary (c,q)    new with 370 DU
         DC    X'DA005252001100' ss 3, semi-privileged, sets cc
         DC    2F'0'              instruction use counters
         DC    C'MVCS '      Move to Secondary (c,q)  new with 370 DU
         DC    X'DB005252001100' ss 3, semi-privileged, sets cc
         DC    2F'0'              instruction use counters
         DC    C'TR   '      Translate (c)
         DC    X'DC005050000000' ss 1
         DC    2F'0'              instruction use counters
         DC    C'TRT  '      Translate and Test (c)
         DC    X'DD005050001000' ss 1, sets cc
         DC    2F'0'              instruction use counters
         DC    C'ED   '      Edit (c)
         DC    X'DE005050005000' ss 1, sets cc
         DC    2F'0'              instruction use counters
         DC    C'EDMK '      Edit and Mark (c)
         DC    X'DF005050005000' ss 1, sets cc
         DC    2F'0'              instruction use counters
*        DC    C'DSG??'      z/series opcodes ?
*        DC    X'E3????????????'
*        DC    2F'0'              instruction use counters
*        DC    C'Vxxx '      vector opcodes
*        DC    X'E400??????????'
*        DC    2F'0'              instruction use counters
         DC    C'LASP '      Load Addr. Space Parm. 370 DU
         DC    X'E5005353031A00' sse, 2 byte (c,p), privileged, sets cc
         DC    2F'0'              instruction use counters
         DC    C'TPROT'      Test Protection (c,p) 370 EF
         DC    X'E5015353001A00' sse, 2 byte, privileged, sets cc
         DC    2F'0'              instruction use counters
* E502 to E50D are MVS assist opcodes for 370 and/or XA
*        DC    C'?????'      Fix Page
*        DC    X'E5025353000E00' sse, 2 byte, privileged, term
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      SVC Assist
*        DC    X'E5035353000E00' sse, 2 byte, privileged, term
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Obtain Local Lock
*        DC    X'E5045353000E00' sse, 2 byte, privileged, term
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Release Local Lock
*        DC    X'E5055353000E00' sse, 2 byte, privileged, term
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Obtain CMS lock
*        DC    X'E5065353000E00' sse, 2 byte, privileged, term
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Release CMS Lock
*        DC    X'E5075353000E00' sse, 2 byte, privileged, term
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Trace SVC Interrupt
*        DC    X'E5085353001A00' sse, 2 byte, privileged, sets cc
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Trace Program Interrupt
*        DC    X'E5095353001A00' sse, 2 byte, privileged, sets cc
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Trace SRB Dispatch
*        DC    X'E50A5353001A00' sse, 2 byte, privileged, sets cc
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Trace I/O Interrupt
*        DC    X'E50B5353001A00' sse, 2 byte, privileged, sets cc
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Trace TCB Dispatch
*        DC    X'E50C5353001A00' sse, 2 byte, privileged, sets cc
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Trace SVC Return
*        DC    X'E50D5353001A00' sse, 2 byte, privileged, sets cc
*        DC    2F'0'              instruction use counters
         DC    C'MVCSK'         sse, 2 byte, ESA, semi-privileged
         DC    X'E50E5353000900'
         DC    2F'0'              instruction use counters
         DC    C'MVCDK'         sse, 2 byte, ESA, semi-privileged
         DC    X'E50F5353000900'
         DC    2F'0'              instruction use counters
* E600 to E613 are VM assist opcodes for S/370
*        DC    C'?????'      Get free storage space
*        DC    X'E6005353001A00' sse, 2 byte, ?
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Return free storage space
*        DC    X'E6015353001A00' sse, 2 byte, ?
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Lock a page
*        DC    X'E6025353001A00' sse, 2 byte, ?
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Unlock a page
*        DC    X'E6035353001A00' sse, 2 byte, ?
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Decode CCW
*        DC    X'E6045353001A00' sse, 2 byte, ?
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Free CCW storage
*        DC    X'E6055353001A00' sse, 2 byte, ?
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Lock Virtual I/O control blocks
*        DC    X'E6065353001A00' sse, 2 byte, ?
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Dispatch - Full function
*        DC    X'E6075353001A00' sse, 2 byte, ?
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Test page status
*        DC    X'E6085353001A00' sse, 2 byte, ?
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Test page status and lock
*        DC    X'E6095353001A00' sse, 2 byte, ?
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Invalidate segment table
*        DC    X'E60A5353001A00' sse, 2 byte, ?
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Invalidate page table
*        DC    X'E60B5353001A00' sse, 2 byte, ?
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Decode first CCW
*        DC    X'E60C5353001A00' sse, 2 byte, ?
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Dispatch - Main entry
*        DC    X'E60D5353001A00' sse, 2 byte, ?
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Locate real I/O blocks
*        DC    X'E60E5353001A00' sse, 2 byte, ?
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Common CCW processing
*        DC    X'E60F5353001A00' sse, 2 byte, ?
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Untranslate CCW
*        DC    X'E6105353001A00' sse, 2 byte, ?
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Dispatch - Abbreviated
*        DC    X'E6115353001A00' sse, 2 byte, ?
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Store ECPS identification
*        DC    X'E6125353001A00' sse, 2 byte, ?
*        DC    2F'0'              instruction use counters
*        DC    C'?????'      Locate changed/shared page
*        DC    X'E6135353001A00' sse, 2 byte, ?
*        DC    2F'0'              instruction use counters
         DC    C'MVCIN'      Move Inverse   optional with 370 or later
         DC    X'E8005050000000' ss 1
         DC    2F'0'              instruction use counters
******  ED** binary floading point opcodes are here *****
         DC    C'PLO  '      Perform Locked Operation - 390
         DC    X'EE003232001000' rs 3, R1,D2(B2),R3,D4(B4), sets cc
         DC    2F'0'              instruction use counters
         DC    C'SRP  '      Shift and Round Decimal (c)
         DC    X'F0005454005010' ss 4, new with 370, sets cc
         DC    2F'0'              instruction use counters
         DC    C'MVO  '      Move with Offset
         DC    X'F1005151000000' ss 2
         DC    2F'0'              instruction use counters
         DC    C'PACK '      Pack
         DC    X'F2005151000000' ss 2
         DC    2F'0'              instruction use counters
         DC    C'UNPK '      Unpack
         DC    X'F3005151000000' ss 2
         DC    2F'0'              instruction use counters
         DC    C'ZAP  '      Zero and Add Decimal (c)
         DC    X'F8005151005000' ss 2, sets cc
         DC    2F'0'              instruction use counters
         DC    C'CP   '      Compare Decimal (c)
         DC    X'F9005151009000' ss 2, sets cc
         DC    2F'0'              instruction use counters
         DC    C'AP   '      Add Decimal (c)
         DC    X'FA005151005000' ss 2, sets cc
         DC    2F'0'              instruction use counters
         DC    C'SP   '      Subtract Decimal (c)
         DC    X'FB005151005000' ss 2, sets cc
         DC    2F'0'              instruction use counters
         DC    C'MP   '      Multiply Decimal
         DC    X'FC005151000008' ss 2
         DC    2F'0'              instruction use counters
* last entry in table
MENLAST  DC    C'DP   '      Divide Decimal    D1(L1,B1),D2(L2,B2)
         DC    X'FD005151000008'   ss 2
         DC    2F'0'              instruction use counters
MEMTABLN EQU   *-MEN             length of opcode table
         DC    C' '              flag to indicate end of table
         YREGS ,                 register equates             CFK*DEC00
         END
