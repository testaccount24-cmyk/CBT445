ARL      TITLE 'Format ADCONs in the listing'
***********************************************************************
*                                                                     *
*  Called by PASS4, FTXTA and SPPR                                    *
*                                                                     *
*  Parms @ R1: (mapped by FMTPARMS)                                   *
*   +0 - @ print area                           (FMTPA)               *
*   +4 - unused by ARL                          (FMTFMT)              *
*   +5 - RLD flag byte (values as RLDIFLAG)     (FMTOPER)             *
*   +6 - ADCON length                           (FMTLEN2)             *
*   +8 - ADCON TEXT                             (FMTTEXT1-4)          *
*  +12 - ESDID of section containing target     (FMTTEXT5-6)          *
*  +14 - ESDID of current section               (FMTTEXT7-8)          *
*  +16 - address of ADCON                       (FMTIC)               *
*  +19 - table format (X'6E' for ADCONs)        (FMTFLG1)             *
*  +20 - return to here                         (FMTRET)              *
*                                                                     *
* History:                                                            *
*   Map parms with FMTPARMS macro                        CFK Feb 2000 *
*   Map output line with the OUTLINE macro               CFK Feb 2000 *
*   SAVA parms now 16 bytes                              CFK Apr 2000 *
*   Use register equates                                 CFK Dec 2000 *
*   Prevent 0C4 if no EXTRNs found                       CFK Apr 2002 *
*   Map EXTRN list in ESD0                               CFK Sep 2002 *
*   Make missing EXTRN message give EXTRN ID             CFK Dec 2002 *
*   Handle Q constants                                   CFK May 2003 *
*   Handle CXDs                                          CFK Jun 2003 *
*   Handle V type adcons                                 CFK Jun 2003 *
*   Eliminate call to CXN and LCOM reference             CFK Jun 2003 *
*   Generate offset from EXTRNs correctly                CFK Jly 2003 *
*   Check for EXTRNs in other CSECTS                     CFK Jly 2003 *
*   SAVA now uses standard linkage conventions           CFK Sep 2003 *
*   Use standard linkage conventions                     CFK Nov 2003 *
*   Pass csect adcon points to to SAVA.                  CFK Dec 2003 *
*   Handle dest in another section in assembly.          CFK Feb 2004 *
*                                                                     *
***********************************************************************
         OUTLINE                  map output line             CFK*FEB00
         FMTPARMS                 format routine parameters   CFK*FEB00
         EXTRNMAP                 map EXTRN list in ESD2      CFK*SEP02
         ESDSDMAP                 map CSECT list in ESD0      CFK*JLY03
         RLDITEM                  map RLD entry in parms      CFK*MAY03
ARL      CSECT
         ENTER ,                  entry logic                 CFK*NOV03
         ENTRY SBCZ               ref'ed by PASS4
         ENTRY COMF               not used by any csect
         EXTRN SAVA               csect
         EXTRN NEXT               in ESD2 csect
         EXTRN NPROG              in ESD0 csect               CFK*JLY03
         EXTRN CURRSECT           in ESD0 csect               CFK*FEB04
         MVI   COMF,X'00'
         LR    R10,R1             save @ parms                CFK*NOV03
         USING FMTPARMS,R10       tell assembler about parms  CFK*NOV03
         L     R4,FMTPA           get @ print area
         USING OUTLINE,R4         tell assembler              CFK*FEB00
* first, put text on listing in hex
         UNPK  OFS(9),FMTTEXT(5)  unpack text                 CFK*JUN03
         TR    OFS,=C'0123456789ABCDEF'-240       make it hex CFK*JUN03
         LH    R3,FMTLEN2         get adcon length            CFK*JUN03
         AR    R3,R3              double to get hex length    CFK*JUN03
         EX    R3,MV2CONST        copy to listing             CFK*JUN03
* check for CXDs
         CLC   FMTTEXT5(2),=H'0'  is it a CXD ?               CFK*JUN03
         BNE   NOTCXD             branch if not               CFK*JUN03
         MVC   OUTINSTR(3),=C'CXD' else make it a CXD         CFK*JUN03
         B     Z99X               and exit                    CFK*NOV03
MV2CONST MVC   OUTCONST(1),OFS    EXecuted                    CFK*JUN03
NOTCXD   DS    0H                                             CFK*JUN03
         MVC   OUTINSTR(2),DCR    copy c'DC'
         MVC   OUTOPER(2),DCR+2   copy c'A('
         TM    FMTOPER,RLDIFTBR   is it a V type adcon ?      CFK*JUN03
         BNO   NOTVCON            branch if not               CFK*JUN03
         MVI   OUTOPER,C'V'       else make it a VCON         CFK*JUN03
NOTVCON  DS    0H                                             CFK*JUN03
         CLC   FX+2(2),FMTLEN2    is ADCON 4 bytes long ?
         BE    FIR                br. if yes
         MVI   OUTOPER+1,C'L'     else add L
         OI    FMTLEN1,C'0'       make length printable
         MVC   OUTOPER+2(1),FMTLEN1  copy it to print area
         NI    FMTLEN1,X'0F'      restore length
         LA    R5,OUTCONST        get @ output object code
         SR    R3,R3
         IC    R3,FMTLEN1         get ADCON length
         SLL   R3,1               double it
         AR    R5,R3              calc @ end of object code
         MVC   0(4,R5),BLXX       copy spaces over the rest of it
         MVI   OUTOPER+3,C'('     add (
         LA    R4,2(R4)           fudge o/p ptr to allow for length
FIR      CLI   FMTLEN1,X'04'      4 byte ADCON ?
         BNE   NFA                branch if not
         TM    FMTTEXT,X'FF'      check adcon high byte
         BZ    NFA                br if high byte zero
         TM    FMTTEXT2,X'F0'     check adcon 2nd byte
         BO    NFA                br if negative ?
         MVC   OUTOPER(2),XPR     copy X'
         MVC   OUTOPER+2(2),OUTCONST copy const to print area CFK*JUN03
         MVI   OUTOPER+4,X'7D'    add '
         MVI   OUTOPER+5,C','
         MVC   OUTOPER+6(4),XPR+2 copy c'AL3('
         LA    R4,8(R4)           adjust o/p ptr to allow for const
NFA      MVI   SBCZ,X'FF'         flag no EXTRN
         CLC   FMTTEXT5(2),FMTTEXT7   is it in current section ?
         BE    LOCE               br if so
* check if dest is in another section
         L     R3,=A(NPROG)       get @ NPROG in ESD0         CFK*FEB04
         L     R5,0(R3)           get number of CSECTs read   CFK*FEB04
         LA    R3,4(R3)           get @ table of CSECTs       CFK*FEB04
         USING ESDSDMAP,R3        tell assembler              CFK*FEB04
CEX2     CLC   FMTTEXT5(2),ESDID  is it this CSECT ?          CFK*FEB04
         BE    GOTCSECT           br if match                 CFK*FEB04
         LA    R3,ESDENTLN(R3)    else get @ next entry       CFK*FEB04
         BCT   R5,CEX2            br if more to search        CFK*FEB04
         DROP  R3                 done with ESDSDMAP          CFK*FEB04
* format EXTRN/WXTRN/QCON
         L     R3,ANEXT           get @ NEXT in ESD2
         ICM   R5,B'1111',0(R3)   get number of EXTRNs read   CFK*APR02
         BZ    NOEXTRN            skip if no EXTRNs           CFK*APR02
         LA    R3,4(R3)           get @ table of EXTRNS
         USING EXTRNMAP,R3        tell assembler              CFK*SEP02
CEX      CLC   FMTTEXT5(2),EXTSEQ FIND BCD NAME
         BE    EEX                br if match
         LA    R3,EXTNEXT         else get @ next entry
         BCT   R5,CEX             br if more to search
         MVI   OUTOPER+19,C'*'    indicate some EXTRNS read   CFK*DEC02
NOEXTRN  DS    0H                                             CFK*APR02
         DROP  R3                 done with EXTRNMAP          CFK*JLY03
         MVC   OUTOPER+20(13),MET copy c'MISSING EXTRN   '
         UNPK  OUTOPER+34(5),FMTTEXT5(3)  add EXTRN number    CFK*DEC02
         TR    OUTOPER+34(4),=C'0123456789ABCDEF'-240         CFK*DEC02
         MVI   OUTOPER+38,C' '    clear gash byte             CFK*DEC02
         MVI   OUTOPER+2,C' '     indicate not found          CFK*JLY03
         B     NOTPR                                          CFK*JLY03
         USING EXTRNMAP,R3        tell assembler              CFK*SEP02
EEX      MVC   OUTOPER+2(8),EXTNAME  copy EXTRN name
         MVC   SBCZ+1(8),EXTNAME     copy EXTRN name
         CLI   EXTTYPE,EXTTPR     is it a Pseudo Register ?   CFK*MAY03
         BNE   NOTPR              skip if not                 CFK*MAY03
         MVI   OUTOPER,C'Q'       else make Q con             CFK*MAY03
         DROP  R3                 done with EXTRN list        CFK*SEP02
NOTPR    DS    0H                                             CFK*MAY03
         CLI   OUTOPER+2,C' '     name blank ?
         BNE   RBL                if not continue
         MVI   COMF,X'10'         else flag ref to private code found
         B     LOCE               and handle as non-EXTRN
RBL      LA    R5,7               length to search
         LA    R3,OUTOPER+9       get @ end of EXTRN name
CEE      CLI   0(R3),C' '         ) find
         BNE   INSS               )  last
         BCT   R3,NER             )   nonblank
NER      BCT   R5,CEE             )    char
INSS     STC   R5,SBCZ            save EXTRN name length-1
         CLI   FMTTEXT,X'FF'      negative offset from extrn ?
         BE    MINE               br. if yes
         TM    FMTFLG1,X'10'
         BO    MINE
         MVI   1(R3),C'+'         indicate positive offset
         B     NMINE              and skip
MINE     MVI   1(R3),C'-'         indicate negative offset
NMINE    LA    R6,4               get max adcon length
         L     R5,FMTTEXT         load text
         SH    R6,FMTLEN2         subtract ADCON length (0 or -1)
         LPR   R6,R6              make positive         (0 or 1)
         SLL   R6,3               mul by 8              (0 or 8)
         STC   R6,SOFT+3          *modify instruction*
SOFT     SRL   R5,0               shift 0 or 8 bits right
         SLL   R5,8               ) clear high byte
         SRA   R5,8               )
         LTR   R5,R5              is offset zero ?
         BZ    RPE                if zero exit
         LA    R3,1(R3)           else point past sign
LOC2     CVD   R5,OFS             make offset decimal
         MVC   1(11,R3),=X'402020202020202021205D'   add mask CFK*JLY03
         LA    R1,10(R3)          point at last byte          CFK*JLY03
         EDMK  1(10,R3),OFS+3     make decimal                CFK*JLY03
         MVC   1(11,R3),0(R1)     move down offset            CFK*JLY03
         B     Z99X               RETURN to caller            CFK*NOV03
RPE      MVI   1(R3),C')'         finish constant
         B     Z99X               RETURN to caller            CFK*NOV03
* we come here if the adcon is not an EXTRN
LOCE     DS    0H                                             CFK*NOV03
         L     R3,=A(CURRSECT)    get @ current section ptr   CFK*FEB04
         L     R3,0(R3)           get @ current entry         CFK*FEB04
GOTCSECT DS    0H                                             CFK*FEB04
         USING ESDSDMAP,R3        tell assembler              CFK*FEB04
         MVC   ASAVSECT,ESDNAME   csect name to SAVA parms    CFK*FEB04
         DROP  R3                                             CFK*FEB04
         MVI   ASAVTYPE,X'60'     ind. type of address to SAVA
         CLI   FMTLEN1,3          check adcon length          CFK*FEB04
         BE    A3BYTE             br. if 3 byte adcon         CFK*FEB04
         BL    A2BYTE               or 2 byte adcon           CFK*FEB04
         MVC   ASAVADR,FMTTEXT2   else copy 4 byte acdon adr. CFK*FEB04
         B     DONEADR            and carry on                CFK*FEB04
A3BYTE   DS    0H                                             CFK*FEB04
         MVC   ASAVADR,FMTTEXT1   copy 3 byte adcon adr       CFK*FEB04
         B     DONEADR            and carry on                CFK*FEB04
A2BYTE   DS    0H                                             CFK*FEB04
         MVI   ASAVADR,X'00'      clear top byte of address   CFK*FEB04
         MVC   ASAVADR+1(2),FMTTEXT1   copy 2 byte adcon adr. CFK*FEB04
DONEADR  DS    0H                                             CFK*FEB04
         MVC   ASAVLABL,SPACES    clear label                 CFK*APR00
         L     R15,SAVZ           get @ SAVA csect            CFK*SEP03
         LA    R1,ASAVTYPE        get @ parms for SAVA        CFK*SEP03
         BASR  R14,R15            call SAVA                   CFK*SEP03
         MVC   OUTOPER+2(8),ASAVOUTL copy address label       CFK*APR00
         LA    R5,7               )
         LA    R3,OUTOPER+9       ) find
CEE2     CLI   0(R3),C' '         )  end
         BNE   INSA               )   of
         BCT   R3,NER2            )    label
NER2     BCT   R5,CEE2            )
INSA     MVI   1(R3),C')'         put ) after label
Z99X     LEAVE ,                  RETURN to caller            CFK*NOV03
         DC    C'IMM='
         LTORG ,                                              CFK*SEP03
SAVZ     DC    A(SAVA)            @ SAVA csect
FX       DC    F'4'               constant
ANEXT    DC    A(NEXT)            @ NEXT in ESD2
OFS      DC    D'0'               must have slack space after it
OF2      DC    F'0'               1st byte used for OFS slack space
DCR      DC    C'DCA('
SPACES   DC    C'    '            constant (8 sp. inc BLXX)   CFK*APR00
BLXX     DC    C'    '            constant
XPR      DC    X'E77D'            X'
         DC    C'AL3('
COML     DC    C'COM '
MET      DC    C'MISSING EXTRN   '
SBCZ     DC    3F'0'              entry point
SBCZ1    EQU   SBCZ,1               name length -1 or x'FF' if no name
SBCZNAME EQU   SBCZ+1,8             EXTRN name
COMF     DC    X'00'              entry point
* parms to call SAVA with                                     CFK*SEP03
ASAVTYPE DC    X'00'              input type of data
ASAVSECT DC    CL8' '             input csect of target       CFK*DEC03
ASAVADR  DC    XL3'00'            input addresss
ASAVOUTL DS    0CL8               output label                CFK*DEC03
ASAVLABL DC    CL8' '             input symbol or spaces      CFK*APR00
* end of SAVA parms                                           CFK*SEP03
SAVEAREA DS    18F                save area                   CFK*SEP03
         YREGS                    register equates            CFK*DEC00
         END
