FLPT    TITLE 'FLOATING POINT CONVERSION'
***********************************************************************
*                                                                     *
*  Called by CONST                                                    *
*                                                                     *
*  Parms @ r1: (mapped by PRMDUM)                                     *
*    +0  - @ Print Area                                               *
*    +4  - input TEXT, 4 or 8 bytes                                   *
*    +12 - flag, x'00' or x'80' if E or D type respectively           *
*                                                                     *
*  History:                                                           *
*    Map output line with OUTLINE macro                  CFK Feb 2000 *
*    Use register equates                                CFK Dec 2000 *
*    Map parameters with dsect                           CFK Dec 2000 *
*    Use standard linkage conventions                    CFK Nov 2003 *
*                                                                     *
***********************************************************************
PRMDUM   DSECT                                                CFK*DEC00
PRM@PA   DS    A                   @ print area               CFK*DEC00
PRMTXT   DS    XL8                 input text                 CFK*DEC00
PRMFLG   DS    X                   flag                       CFK*DEC00
*
         OUTLINE                   map output line            CFK*FEB00
FLPT     CSECT
         ENTER ,                   entry logic                CFK*NOV03
         LR    R10,R1              copy @ parms               CFK*NOV03
         USING PRMDUM,R10          tell assembler             CFK*NOV03
         MVC   TM1(8),PRMTXT       copy input text
         MVC   FSO(2),ZFP
         TM    TM1,X'80'
         BZ    PFP
         MVI   FSO,X'01'
         NI    TM1,X'7F'
PFP      LD    F0,TN16
         LD    F2,TM1
         SR    R1,R1
         CLC   TM1+1(3),ZFP
         BE    MZER
         LA    R2,16
COMF     CLC   TM1(8),TN17
         BNL   DVFP
         CLC   TM1(8),TN1
         BH    NPMF
         MDR   F2,F0
         STD   F2,TM1
         SR    R1,R2
         B     COMF
DVFP     DDR   F2,F0
         STD   F2,TM1
         AR    R1,R2
         B     COMF
NPMF     LA    R3,TN16
         LA    R4,5
         MVC   TM2(8),TM1
COMF2    CLC   TM2(8),TN17
         BL    NMFP2
         AR    R1,R2
         MVC   TM2(8),TM1
NMFP2    MVC   TM1(8),TM2
         SRL   R2,1
         LA    R3,8(R3)
         LD    F0,0(R3)
         LD    F2,TM2
         MDR   F2,F0
         SR    R1,R2
         STD   F2,TM2
         BCT   R4,COMF2
         CLI   TM1,X'4F'
         BNE   NOF
         MVI   FSO+1,X'01'
NOF      MVI   TM1,X'00'
         LM    R2,R3,TM1
         TM    FSO+1,X'01'
         BZ    NSFP
         SLDL  R2,4
         B     NFFP
NSFP     SR    R4,R4
         NI    TM2,X'0F'
         IC    R4,TM2
         S     R4,FFP              subtract 14
         LPR   R4,R4
         SLL   R4,2
         STC   R4,SLFP+3           *alter instruction*
SLFP     SRDL  R2,0
NFFP     D     R2,TNT
         CVD   R2,DWFP             make packed decimal
         UNPK  FDP+8(9),DWFP+3(5)  unpack it
         OI    FDP+16,C'0'         make last byte printable
         CVD   R3,DWFP             make packed decimal
         UNPK  FDP(8),DWFP+3(5)    unpack it
         OI    FDP+7,C'0'          make last byte printable
         LA    R3,17               )
         LA    R2,FDP              ) find
CLFP     CLI   0(R2),C'0'          )  first
         BNE   NMFZ                )   significant
         LA    R2,1(R2)            )    digit
         BCT   R3,CLFP             )
NMFZ     AR    R1,R3
         L     R4,PRM@PA           get @ Print Area
         USING OUTLINE,R4          tell assembler             CFK*FEB00
         MVC   OUTOPER(4),FQD      copy D'0.
         TM    PRMFLG,X'80'        is it D ?
         BO    DPF                 br if so
         S     R3,EIGHF            subtract 8
         MVI   OUTOPER,C'E'        make E'0.
DPF      CLI   FSO,X'01'
         BNE   DPF2
         MVI   OUTOPER+2,C'-'
         MVC   OUTOPER+3(2),FQD+2  copy 0.
         LA    R4,1(R4)            add 1 to output pointer
DPF2     EX    R3,MVFZ             MVC   OUTOPER+4(1),0(2)
         AR    R4,R3
         MVI   OUTOPER+3,C'E'
         MVI   OUTOPER+4,C'+'      assume positive
         LTR   R1,R1               check sign
         BNM   PEXP                br if not negative
         MVI   OUTOPER+4,C'-'      else make sign negative
PEXP     CVD   R1,DWFP             convert to packed decimal
         UNPK  OUTOPER+5(2),DWFP+6(2)   unpack it
         OI    OUTOPER+6,C'0'      make last byte printable
         MVI   OUTOPER+7,X'7D'     add trailing '
         B     Z99X                and return                 CFK*NOV03
MZER     L     R4,PRM@PA           get @ print area
         MVC   OUTOPER(5),ZERPT    copy E'0.'
         CLI   FSO,X'01'
         BNE   Z99X                return                     CFK*NOV03
         MVI   OUTOPER,C'D'
Z99X     LEAVE ,                   return to caller           CFK*NOV03
MVFZ     MVC   OUTOPER+4(1),0(R2)  EXecuted instruction
         DC    C'IMM='
TM1      DC    D'0'
TM2      DC    D'0'
TN17     DC    X'4F163457'
         DC    X'85D8A000'
TN16     DC    X'4E2386F2'
         DC    X'6FC10000'
         DC    X'475F5E10'
         DC    X'00000000'
         DC    X'44271000'
         DC    X'00000000'
         DC    X'42640000'
         DC    X'00000000'
         DC    X'41A00000'
         DC    X'00000000'
TN1      DC    X'41100000'
         DC    X'00000000'
DWFP     DC    D'0'
FDP      DC    D'0'
         DC    D'0'
         DC    F'0'
ZFP      DC    F'0'
FFP      DC    F'14'               constant
FSO      DC    F'0'
EIGHF    DC    F'8'                constant
TNT      DC    X'3B9ACA00'         constant
FQD      DC    X'C47DF04B'         D'0.
ZERPT    DC    X'C57DF0'           E'0
         DC    C'.'                .
         DC    X'7D'               '
SAVEAREA DS    18F                                            CFK*NOV03
         REGEQU                    register equates           CFK*DEC00
         END
