TSTDAT   DSECT        test DSECT
* every possible data-type                                    len  ilen
TSTTYPC  DS    C     X'00' = character                         2     1
TSTTYPX  DS    X     X'04' = hexadecimal or pure DBCS (G-type) 2     1
TSTTYPB  DS    B     X'08' = binary                            2     1
TSTTYPF  DS    F     X'10' = fixed point, full                 1  S  4
TSTTYPH  DS    H     X'14' = fixed point, half                 1  S  2
TSTTYPE  DS    E     X'18' = floating point, short             1  S  4
TSTTYPD  DS    D     X'1C' = floating point, long              1  S  8
TSTTYPA  DS    A     X'20' = A-type or Q-type data             1     4
TSTTYPY  DS    Y     X'24' = Y-type data                       1     2
TSTTYPS  DS    S     X'28' = S-type data                       1     2
TSTTYPV  DS    V     X'2C' = V-type data                       1     4
TSTTYPP  DS    P     X'30' = packed decimal                    1  S  1
TSTTYPZ  DS    Z     X'34' = zoned decimal                     1  S  1
TSTTYPL  DS    L     X'38' = floating point, extended          1    16
*
         ORG   TSTDAT               back to start of dsect
TST2     DS    X                    ) implicit
TST3     DS    L                    )   space
TST4     DS    Z                    more implicit space
TST5     CCW   0,0,0,0              and a CCW
TSTBR    BR    14                   try an instruction
         DS    C                    and another
TSTLA    LA    0,0                  on an odd margin
         ORG   ,                    reset origin
TST6     DS    0X                   and see where we are
*
TEST5    START
         EXTRN STRONG1
         EXTRN STRONG2
         EXTRN STRONG3
         WXTRN WEAK1
         WXTRN WEAK2
         WXTRN WEAK3
         EXTRN NOTREF               not used anywhere
         WXTRN NOTREFW              not used anywhere
         ENTRY ENTR1
         ENTRY ENTR2
         SR    15,15
         BR    14
ENTR1    DS    CL80                 inline dummy storage
ENTR2    DS    CL80                 inline dummy storage
         DS    0F                   align on fullword
CHAR     DC    C'CHAR'              text data
LC       DC    C'char'              lower case data
         DC    C'1'                 force 1 slack byte
         DC    H'1'
         DC    C'3'                 force 3 slack bytes
         DC    A(STRONG1)           gen EXTRN
         DC    A(STRONG2)           gen EXTRN
         DC    A(ENTR1)             @ entry
         DC    A(WEAK1)             gen WXTRN
         DC    A(WEAK2)             gen WXTRN
         DC    V(STRONG2)           V @ EXTRN
         DC    V(STRONG3)           V @ EXTRN
         DC    V(WEAK2)             W @ WXTRN
         DC    V(WEAK3)             W @ WXTRN
         DC    V(VCON)              gen VCON
         DC    A(TEST5)             @ csect
* 3 byte adcons
         DC    AL3(STRONG1)           gen EXTRN
         DC    AL3(STRONG2)           gen EXTRN
         DC    AL3(ENTR1)             @ entry
         DC    AL3(WEAK1)             gen WXTRN
         DC    AL3(WEAK2)             gen WXTRN
         DC    VL3(STRONG2)           V @ EXTRN
         DC    VL3(STRONG3)           V @ EXTRN
         DC    VL3(WEAK2)             W @ WXTRN
         DC    VL3(WEAK3)             W @ WXTRN
         DC    VL3(VCON)              gen VCON
         DC    AL3(TEST5)             @ csect
         DC    AL3(D)
         DC    AL3(COM1)
         DC    AL3(COM2)
* constants + a small offset
         DC    A(STRONG1+24)        gen EXTRN
         DC    A(STRONG2+24)        gen EXTRN
         DC    A(ENTR1+24)          @ entry
         DC    A(WEAK1+24)          gen WXTRN
         DC    A(WEAK2+24)          gen WXTRN
*        DC    V(STRONG2+24)        V @ EXTRN
*        DC    V(STRONG3+24)        V @ EXTRN
*        DC    V(WEAK2+24)          W @ WXTRN
*        DC    V(WEAK3+24)          W @ WXTRN
*        DC    V(VCON+24)           gen VCON
         DC    A(TEST5+24)          @ csect
         DC    A(COM1+24)
         DC    A(COM2+24)
* constants + a large offset
         DC    A(STRONG1+x'80000000')        gen EXTRN
         DC    A(STRONG2+x'80000000')        gen EXTRN
         DC    A(ENTR1+x'80000000')          @ entry
         DC    A(WEAK1+x'80000000')          gen WXTRN
         DC    A(WEAK2+x'80000000')          gen WXTRN
*        DC    V(STRONG2+x'80000000')        V @ EXTRN
*        DC    V(STRONG3+x'80000000')        V @ EXTRN
*        DC    V(WEAK2+x'80000000')          W @ WXTRN
*        DC    V(WEAK3+x'80000000')          W @ WXTRN
*        DC    V(VCON+x'80000000')           gen VCON
         DC    A(TEST5+x'80000000')          @ csect
         DC    AL3(TEST5+x'800000')          @ csect
*        DC    Q(MYWORK+x'80000000')          offset to my work area
*        DC    Q(MYWORK2+x'80000000')         offset to 2nd work area
         DC    A(COM1+x'80000000')
         DC    AL3(COM1+x'800000')
         DC    A(COM2+x'80000000')
         DC    AL3(COM2+x'800000')
A        DC    D'0'
         DC    C'7'                 force 7 slack bytes
B        DC    D'1'
         DC    A(*)
         DC    C'abcde'             5 byte constant, then DS
D        DS    CL500                trailing dummy storage
         DC    A(COM1)
         DC    A(COM2)
TOTLEN   CXD                        Total length of DXDs
MYPTR    DC    Q(MYWORK)            offset to my work area
MYPTR2   DC    Q(MYWORK2)            offset to 2nd work area
*YPTRP   DC    Q(MYWORK+24)          offset to my work area
*YPTR2P  DC    Q(MYWORK2+24)         offset to 2nd work area
         DC    Q(MYWORK3)
COM1     COM                         common area
FIELD1   DS    CL13
FIELD2   DS    D
COM2     COM                         second common area
COM2A    DS    CL133
         COM                         unnamed common area
DAT1     DS    CL30
DAT2     DS    D
MYWORK   DXD   CL312                Dummy eXternal Dsect
MYWORK2  DSECT                       work area
         DS    CL80
         DS    F
         DS    H
MYWORK3  DSECT
         DS    XL131                odd length
         REGEQU                     register equates
         END
