SYM     TITLE '* * * S Y M * * * (process SYM cards)  '
***********************************************************************
*                                                                     *
*  Process SYM card from input                                        *
*                                                                     *
*  Called by PASS1                                                    *
*                                                                     *
*  Parms @ r1:                                                        *
*    input card                                                       *
*                                                                     *
*  Register use:                                                      *
*    R0 - temp store for operand length                               *
*    R1 - @ input card                                                *
*    R2 - @ current SYM entry                                         *
*    R3 - length of current SYM entry                                 *
*    R4 - @ type field in SYM entry                                   *
*    R5 - work reg                                                    *
*    R6 - @ current location to print operand to                      *
*    R7 - @ mult/scale                                                *
*    R8 - used to multiply R9 by R5                                   *
*    R9 - total length of operand (multiplicity * length)             *
*   R10 - current address in DSECT                                    *
*   R11 -                                                             *
*   R12 - base reg                                                    *
*   R13 - @ save area                                                 *
*   R14 - @ print area / @ parameters                                 *
*   R15 -                                                             *
*                                                                     *
* History:                                                            *
*   Newly written.                                        CFK Apr 2000*
*   Entry type field is only present for data type entrys.CFK Aug 2000*
*   Allow for DS length field.                            CFK Sep 2000*
*   Check for valid non-data type.                        CFK Sep 2000*
*   Tell SAVA if we are a CSECT.                          CFK Sep 2000*
*   Exit gracefully if position lost.                     CFK Sep 2000*
*   Print/punch DSECTs.                                   CFK Dec 2000*
*   Check for data type x'0C' which is invalid.           CFK Jan 2001*
*   Packed or zoned decimal data only has 1 length byte.  CFK Jan 2001*
*   Generate DS    XL2 for instructions in DSECTs.        CFK Jan 2001*
*   Generate ORG statements in dsects when needed.        CFK Jan 2001*
*   Stop punching DSECTs when COM found.                  CFK Jan 2001*
*   Use standard entry/exit logic.                        CFK Apr 2001*
*   *temp* mod for calls from DISYM.                      CFK Apr 2001*
*   Allow for imbedded short cards.                       CFK May 2001*
*   Check symbol name does not start with space.          CFK May 2001*
*   Correctly check if an entry is complete.              CFK May 2001*
*   Put ESD ID onto listing.                              CFK May 2001*
*   Asm XF & Tachyon Cross Assembler put EQUates into SYM.CFK Jly 2001*
*   Use standard linkage conventions when called.         CFK Sep 2003*
*   Use standard linkage conventions to call SAVA.        CFK Sep 2003*
*   Remove mod for calls from DISYM.                      CFK Sep 2003*
*   Tidy up calls to PRINTA and PRINTP.                   CFK Dec 2003*
*   Pass current section to SAVA.                         CFK Dec 2003*
*                                                                     *
***********************************************************************
         OUTLINE              output line                     CFK*DEC00
*
SYMCARD  DSECT                cols
         DS    X'02'             1   constant
         DS    C'SYM'          2-4   constant
         DS    CL6             5-10  Blank
SYMDLEN  DS    H              11-12  number of bytes of text in
SYMDLEN1 EQU   SYMDLEN+1,1       12  variable field (columns 17-72)
         DS    CL4            13-16  Blank
SYMDATA  DS    CL56           17-72  Variable field (see below)
SYMSEQNO DS    CL8            73-80  Deck ID, sequence number, or both.
SYMESDID EQU   SYMSEQNO+2,2   74-75  ESD ID for this card     CFK*MAY01
*   The deck ID is the name from the first TITLE statement that
*   has a nonblank name field.  The name can be 1-to-8 characters.
*   If the name is fewer than 8 characters or if there is no name,
*   the remaining columns contain a record sequence number.
*
*   The variable field (columns 17-72) contains up to 56 bytes of
*   TESTRAN text.  The items comprising the text are packed together;
*   consequently, only the last record may contain less than 56 bytes
*   of text in the variable field.  The formats of a text record and an
*   individual text item are shown in Figure 71.  The contents of the
*   fields within an individual entry are as follows:
*
SYMENTRY DSECT                map one entry
SYMEFLG1 DS    X              flag byte
SYMF1TYP EQU   B'10000000'      data type entry
SYMF1NDT EQU   B'01110000'      mask for non data type
SYMF1DS  EQU   B'00000000'      space (DS)               )
SYMF1CSE EQU   B'00010000'      Control Section (CSECT)  ) If
SYMF1DSE EQU   B'00100000'      Dummy Section (DSECT)    ) non
SYMF1COM EQU   B'00110000'      Common                   ) data
SYMF1INS EQU   B'01000000'      Instruction              ) type
SYMF1CCW EQU   B'01010000'      CCW, CCW0, CCW1          )
SYMF1EQU EQU   B'01100000'      EQUate                   )    CFK*JLY01
SYMF1MAX EQU   B'01100000'      Max valid non data type  )    CFK*JLY01
SYMF1MUL EQU   B'01000000'      multiplicity (M) field present ) If
SYMF1CL  EQU   B'00100000'      cluster (PD or ZD)             ) data
SYMF1SC  EQU   B'00010000'      scaling (S) field present      ) type
SYMF1NM  EQU   B'00001000'      name not present if 1
SYMF1NML EQU   B'00000111'      length of name-1 (mask for)
* Organization (1 byte).  The possible values are shown below.
* ZDDDDDDDDBDDDDDDDDDDDDDDDDDDDDDDDDDDDDDBDDDDDDDDDDDDDDDDDDDDDDDDDDDD?
* 3  Bits  3 Value                       3 Description                3
* CDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4
* 3    0   3 0                           3 Non-data type              3
* 3        CDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4
* 3        3 1                           3 Data type                  3
* CDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4
* 3   1-3  3 000                         3 Space                      3
* 3        CDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4
* 3   If   3 001                         3 Control section            3
* 3   non  CDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4
* 3  data  3 010                         3 Dummy control section      3
* 3  type  CDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4
* 3        3 011                         3 Common                     3
* 3        CDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4
* 3        3 100                         3 Instruction                3
* 3        CDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4
* 3        3 101                         3 CCW, CCW0, CCW1            3
* CDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4
* 3    1   3 0                           3 No multiplicity            3
* 3        CDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4
* 3   If   3 1                           3 Multiplicity               3
* 3  data  3                             3 (indicates presence        3
* 3  type  3                             3 of M Field)                3
* CDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4
* 3    2   3 0                           3 Independent                3
* 3   If   3                             3 (not a packed or zoned     3
* 3  data  3                             3 decimal constant)          3
* 3  type  CDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4
* 3        3 1                           3 Cluster                    3
* 3        3                             3 (packed or zoned           3
* 3        3                             3 decimal constant)          3
* CDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4
* 3    3   3 0                           3 No scaling                 3
* 3        CDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4
* 3   If   3 1                           3 Scaling                    3
* 3  data  3                             3 (indicates presence        3
* 3  type  3                             3 of S field)                3
* CDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4
* 3    4   3 0                           3 Name present               3
* 3        CDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4
* 3        3 1                           3 Name not present           3
* CDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDDDEDDDDDDDDDDDDDDDDDDDDDDDDDDDD4
* 3   5-7  3                             3 Length of                  3
* 3        3                             3 name minus 1               3
* @DDDDDDDDADDDDDDDDDDDDDDDDDDDDDDDDDDDDDADDDDDDDDDDDDDDDDDDDDDDDDDDDDY
*
SYMEADR  DS    XL3
*       Address (3 bytes)--displacement from base of control section
*
SYMFLEN  EQU   *-SYMENTRY         length of fixed part
SYMMINLN EQU  SYMFLEN      minimum length of an entry
*
SYMNAME  DS    C
* Symbol Name (0-8 bytes)--symbolic name of particular item.  If the
* entry is nondata type and space, an extra byte is present that
* contains the number of bytes that have been skipped.
*
SYMENTR1 DSECT             only present if data type
SYMTYPE  DS   X       Data Type (1 byte)--contents in hexadecimal
SYMTCHAR EQU  X'00' = character                         C  2     1
SYMTHEX  EQU  X'04' = hexadecimal or pure DBCS (G-type) X  2     1
SYMTBIN  EQU  X'08' = binary                            B  2     1
SYMTINV  EQU  X'0C' = ** this is not used **
SYMTFULL EQU  X'10' = fixed point, full                 F  1  S  4
SYMTHALF EQU  X'14' = fixed point, half                 H  1  S  2
SYMTSHRT EQU  X'18' = floating point, short             E  1  S  4
SYMTLONG EQU  X'1C' = floating point, long              D  1  S  8
SYMTACON EQU  X'20' = A-type or Q-type data             A  1     4
SYMTYCON EQU  X'24' = Y-type data                       Y  1     2
SYMTSCON EQU  X'28' = S-type data                       S  1     2
SYMTVCON EQU  X'2C' = V-type data                       V  1     4
SYMTPACK EQU  X'30' = packed decimal                    P  1  S  1
SYMTZONE EQU  X'34' = zoned decimal                     Z  1  S  1
SYMTEXT  EQU  X'38' = floating point, extended          L  1    16
*
SYMENTLN DS   XL2
*  5. Length (2 bytes for character, hexadecimal, decimal, or binary
*     items; 1 byte for other types)--length of data item minus 1
*
SYMMULT  DS   XL3
*   6.  Multiplicity-M field (3 bytes)--equals 1 if not present
*
SYMSCALE DS   XL2
*   7.  Scale-signed integer-S field (2 bytes)--present only for F-,
*       H-, E-, D-, P-, and Z-type data, and only if scale is nonzero.
*
SYMMAXLN EQU  *-SYMENTR1+SYMFLEN+1+8  maximum length of an entry
*
* ZDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD?
* 3                                                                   3
* 3   1     2 4 5  10 11   12 13 16 17                  72 73    80   3
* 3  ZDDDDDBDDDBDDDDDBDDDDDDDBDDDDDBDDDDDDDDDDDDDDDDDDDDDDBDDDDDDDD?  3
* 3  3     3   3     3No. of 3     3                      3Deck Id 3  3
* 3  3X'02'3SYM3Blank3bytes  3Blank3TESTRAN Text -        3and Seq.3  3
* 3  3     3   3     3of text3     3 packed entries       3Number  3  3
* 3  @DDDDDADDDADDDDDADDDDDDDADDDDDADDDDDDDDDDDDDDDDDDDDDDADDDDDDDDY  3
* 3     1    3    6      2      4           56             8          3
* 3                                                                   3
* 3  TESTRAN Text                                                     3
* 3                                                                   3
* 3  ZDDDDDDDDDDDDBDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDBDDDDDDDDDDDDDD?  3
* 3  3  Entry     3     N Complete entries          3    Entry     3  3
* 3  3(Complete or3          N >= 1                 3(Complete or  3  3
* 3  3end portion)3                                 3head portion) 3  3
* 3  @DDDDDDDDDDDDADDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDADDDDDDDDDDDDDDY  3
* 3                 Variable size entries                             3
* 3                                                                   3
* 3  Entry                                                            3
* 3                                                                   3
* 3  ZDDDDBDDDDDDDBDDDDDDDDDDDBDDDDBDDDDDDBDDDDDDBDDDDD?              3
* 3  3Org.3Address3Symbol name3Data3Length3Mult. 3Scale3              3
* 3  3    3       3           3Type3      3Factor3     3              3
* 3  @DDDDADDDDDDDADDDDDDDDDDDADDDDADDDDDDADDDDDDADDDDDY              3
* 3    1      3      0-8       0-1   1-2     3      2                 3
* 3                                                                   3
* @DDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDY
*   Figure 71. TESTRAN SYM Record Format
         EJECT
SYM      CSECT                                                CFK*APR01
         ENTER                    entry logic                 CFK*APR01
         EXTRN PA                 in PASS1 csect              CFK*SEP00
         EXTRN SAVA               csect
         L     R1,0(R1)           get @ input card            CFK*OCT03
         USING SYMCARD,R1         tell assembler about parm
         TM    FLAGS1,FL1ERROR    position lost ?             CFK*SEP00
         BNO   Z00A               carry on if not             CFK*APR01
         CLI   SYMDLEN1,56        full card of data ?         CFK*APR01
         BE    Z90Z1              if so exit now              CFK*APR01
         NI    FLAGS1,X'FF'-FL1ERROR  else reset error flag   CFK*APR01
         MVC   WORKADR,=A(MAINBUF)    reset start pointer     CFK*APR01
         B     Z90Z               and exit                    CFK*APR01
Z00A     DS    0H                                             CFK*APR01
         CLI   SYMDLEN1,X'00'     0 bytes text on this card ?
         BE    Z90Z1              yes, exit
         LA    R2,MAINBUF         get @ buffer
         AH    R2,SYMDLEN         calc @ end of buffer
         ST    R2,ENDADR          save @ end of buffer
         MVC   MAINBUF,SYMDATA    copy input to buffer
         DROP  R1                 done with input card
         ST    R1,SAV@CARD        save @ input card           CFK*MAY01
* start of main loop
Z10A     DS    0H
         L     R2,WORKADR         get @ SYM entry
         USING SYMENTRY,R2        tell assembler
         C     R2,ENDADR          do we have another entry ?  CFK*MAY01
         BNL   Z90Z               exit if not                 CFK*MAY01
         C     R2,=A(MINEND)      do we have enough for an entry ?
         BH    Z90Z               exit if not
         XR    R3,R3              clear length of entry
         MVC   SAVATYPE,SYMEFLG1  tell SAVA what it is        CFK*JAN04
         TM    SYMEFLG1,SYMF1TYP  data type entry ?
         BO    Z20A3              branch if so                CFK*JAN01
         MVC   SVFLG1,SYMEFLG1    copy flags
         NI    SVFLG1,SYMF1NDT    mask out non-data type
         CLI   SVFLG1,SYMF1MAX    Valid non-data type ?       CFK*SEP00
         BH    Z80ERR             no, we're lost !            CFK*SEP00
         CLI   SVFLG1,SYMF1DSE    Dsect ?
         BNE   Z20A1              br if not
         OI    FLAGS1,FL1DSFND    remember we are in a DSECT
         XC    CURRADR,CURRADR    and zero current address    CFK*JAN01
Z20A1    DS    0H
         CLI   SVFLG1,SYMF1COM    COM ?                       CFK*JAN01
         BE    Z20A2              br if COM                   CFK*JAN01
         CLI   SVFLG1,SYMF1CSE    Csect ?
         BNE   Z20A3              br if not
Z20A2    DS    0H                                             CFK*JAN01
         NI    FLAGS1,X'FF'-FL1DSFND  remember we are not in a DSECT
         XC    CURRADR,CURRADR    and zero current address    CFK*MAY01
         MVI   SAVATYPE,X'61'     tell SAVA we are a CSECT    CFK*SEP00
Z20A3    DS    0H
         TM    SYMEFLG1,SYMF1NM   is a name present
         BO    Z20B               branch if not
         CLI   SYMNAME,C' '       Valid name (not spaces) ?   CFK*MAY01
         BE    Z80ERR             no, we're lost !            CFK*MAY01
         MVC   SAVANAME,SPACES    clear output name           CFK*APR01
         IC    R3,SYMEFLG1        get length
         N     R3,=A(SYMF1NML)     of name - 1
         EX    R3,MVC1            copy name to SAVA parms
         LA    R3,1(R3)           add 1 to get full length
         TM    SYMEFLG1,SYMF1TYP  data type entry ?           CFK*JAN04
         BO    Z20B               branch if so                CFK*JAN04
         CLI   SVFLG1,SYMF1CSE    Csect ?                     CFK*DEC03
         BNE   Z20B               br if not                   CFK*DEC03
         MVC   SAVASECT,SAVANAME  copy section to SAVA parms  CFK*DEC03
Z20B     DS    0H
         LA    R3,SYMMINLN(R2,R3) add minimum length to name length
         C     R3,ENDADR          do we have the type field ?
         BNL   Z90Z               exit if not
         LR    R4,R3              copy @ type                 CFK*DEC00
         USING SYMENTR1,R4        tell assembler              CFK*DEC00
         TM    SYMEFLG1,SYMF1TYP  data type entry ?           CFK*AUG00
         BO    Z20C               br. if so                   CFK*SEP00
         CLI   SVFLG1,SYMF1DS     space ?                     CFK*SEP00
         BNE   Z20F               br. if not (no type field)  CFK*SEP00
         LA    R3,1(R3)           else allow for DS length    CFK*SEP00
         B     Z20F               and carry on                CFK*SEP00
Z20C     DS    0H                                             CFK*SEP00
         TM    SYMTYPE,B'00000011' valid type (divisible by 4) ?
         BNZ   Z80ERR             no - we're lost !           CFK*SEP00
         CLI   SYMTYPE,SYMTEXT    larger than highest type ?
         BH    Z80ERR             yes - we're lost !          CFK*SEP00
         CLI   SYMTYPE,SYMTINV    invalid value ?             CFK*JAN01
         BE    Z80ERR             yes - we're lost !          CFK*JAN01
         CLI   SYMTYPE,SYMTBIN    2 byte length field ?
         BH    Z20D2              br if one byte              CFK*JAN01
Z20D1    DS    0H                 2 byte length field found
         LA    R3,1(R3)           allow for 2nd byte
Z20D2    DS    0H
         LA    R3,2(R3)           allow for type and length fields
         TM    SYMEFLG1,SYMF1MUL  M field present ?
         BZ    Z20E               branch if not
         LA    R3,L'SYMMULT(R3)   else add length of mult field
Z20E     DS    0H
         TM    SYMEFLG1,SYMF1SC   S field present ?
         BZ    Z20F               branch if not
         LA    R3,L'SYMSCALE(R3)  else add length of scale field
Z20F     DS    0H
         C     R3,ENDADR          do we have the whole entry ?
         BH    Z90Z               exit if not                 CFK*MAY01
         ST    R3,WORKADR         save @ next entry
         TM    FLAGS1,FL1DSFND    are we in a DSECT ?
         BO    Z30A               skip entry if so            CFK*DEC00
         TM    SYMEFLG1,SYMF1NM   is a name present
         BO    Z10A               skip entry if not
         MVC   SAVAADR,SYMEADR    copy address to SAVA parms
         L     R15,ASAVA          get @ SAVA csect            CFK*SEP03
         LA    R1,SAVAPRMS        get @ parms                 CFK*SEP03
         BASR  R14,R15            call SAVA                   CFK*SEP03
         C     R3,ENDADR          do we have another entry ?
         BNL   Z90Z               exit if not
         B     Z10A               go to handle next entry
*
Z30A     DS    0H       Print one line in a DSECT             CFK*DEC00
         L     R14,=A(PA)         get @ print area            CFK*DEC00
         USING OUTLINE,R14        tell assembler              CFK*DEC00
         L     R10,CURRADR        get last address            CFK*JAN01
         CLM   R10,B'0111',SYMEADR are we at next address ?   CFK*JAN01
         BE    Z30B               branch if so                CFK*JAN01
* we need to ORG to the next address                          CFK*JAN01
         MVC   OUTINSTR(3),=C'ORG' instruction                CFK*JAN01
         MVC   OUTOPER(2),=C'*+'  start of operand            CFK*JAN01
         XR    R5,R5              clear work register         CFK*JAN01
         ICM   R5,B'0111',SYMEADR get next address            CFK*JAN01
         SR    R5,R10             calc difference             CFK*JAN01
         BNM   Z30A1              is it negative ?            CFK*JAN01
         MVI   OUTOPER+1,C'-'     if so tell assembler        CFK*JAN01
         LPR   R5,R5              and make number positive    CFK*JAN01
Z30A1    DS    0H                                             CFK*JAN01
         MVC   OUTOPER+2(10),=X'40202020202020202120' mask    CFK*JAN01
         CVD   R5,DWORK           make PD                     CFK*JAN01
         LA    R1,OUTOPER+11      point R1 at last byte       CFK*JAN01
         EDMK  OUTOPER+2(10),DWORK+3  make printable          CFK*JAN01
         MVC   OUTOPER+2(10),0(R1) move down offset           CFK*JAN01
         L     R15,=V(PRINTP)     get @ print and punch rtn   CFK*DEC03
         LR    R1,R14             get @ print area            CFK*DEC03
         BASR  R14,R15            output the ORG card         CFK*JAN01
         L     R14,=A(PA)         get @ print area again      CFK*OCT03
         ICM   R10,B'0111',SYMEADR now we are at new address  CFK*JAN01
Z30B     DS    0H                                             CFK*JAN01
* first, put address onto listing                             CFK*DEC00
         UNPK  OUTLOC(7),SYMEADR(4)  make address hex         CFK*DEC00
         TR    OUTLOC,TRTAB-240   make it printable           CFK*DEC00
         MVI   OUTLOC+6,C' '      get rid of gash byte        CFK*DEC00
* put name (could be spaces) onto listing                     CFK*DEC00
         MVC   OUTLABEL,SAVANAME  copy name                   CFK*APR01
         MVC   SAVANAME,SPACES    and clear it for next time  CFK*APR01
* work out instruction field                                  CFK*DEC00
         TM    SYMEFLG1,SYMF1TYP  data type entry ?           CFK*DEC00
         BO    Z30C               branch if so                CFK*DEC00
* process non data type entry                                 CFK*DEC00
         XR    R5,R5              clear work register         CFK*DEC00
         IC    R5,SVFLG1          get non-data type           CFK*DEC00
         SRL   R5,4               move to low nybble          CFK*DEC00
         MH    R5,=AL2(NDTTBELN)  mul by table entry length   CFK*DEC00
         LA    R5,NDTTAB(R5)      get @ entry                 CFK*DEC00
         MVC   OUTINSTR,0(R5)     copy non data type to o/p   CFK*DEC00
         CLI   SVFLG1,SYMF1INS    instruction ?               CFK*JAN01
         BNE   Z30B1              br. if not                  CFK*JAN01
* process instruction                                         CFK*JAN01
         MVC   OUTOPER(3),=C'XL2' assume 2 byte instruction   CFK*JAN01
         MVC   OUTOPER+30(11),=C'Instruction' comment instr   CFK*JAN01
         LA    R10,2(R10)         add assumed length to adr.  CFK*JAN01
         B     Z30X               and print DS                CFK*DEC00
Z30B1    DS    0H                                             CFK*JAN01
         CLI   SVFLG1,SYMF1CCW    CCW ?                       CFK*JAN01
         BNE   Z30B2              br. if not                  CFK*JAN01
* process CCW                                                 CFK*JAN01
         MVC   OUTOPER(7),=C'0,0,0,0'  add dummy operands     CFK*JAN01
         LA    R10,8(R10)         add length to address       CFK*JAN01
         B     Z30X               and print DS                CFK*DEC00
Z30B2    DS    0H                                             CFK*JAN01
         CLI   SVFLG1,SYMF1DS     space ?                     CFK*DEC00
         BNE   Z30B3              br. if not                  CFK*JLY01
* put DS length onto output                                   CFK*DEC00
         XR    R5,R5              clear work register         CFK*DEC00
         IC    R5,0(R4)           get length                  CFK*DEC00
         AR    R10,R5             add to current address      CFK*JAN01
         CVD   R5,DWORK           make PD                     CFK*DEC00
         MVC   OUTOPER+1(4),=X'40202120' add EDit mask        CFK*DEC00
         LA    R1,OUTOPER+4      prime R1                     CFK*DEC00
         EDMK  OUTOPER+1(4),DWORK+6    make length printable  CFK*DEC00
         MVC   OUTOPER(2),=C'XL' add XL                       CFK*DEC00
         MVC   OUTOPER+2(3),0(R1) move down number            CFK*DEC00
         MVC   OUTOPER+30(8),=C'Not Data'  comment non-data   CFK*DEC00
         B     Z30X               and print DS                CFK*DEC00
Z30B3    DS    0H                                             CFK*JLY01
         CLI   SVFLG1,SYMF1EQU    EQUate ?                    CFK*JLY01
         BNE   Z30X               br. if not                  CFK*JLY01
* put EQU * onto output                                       CFK*JLY01
         MVI   OUTOPER,C'*'       put * onto output           CFK*JLY01
         B     Z30X               and print DS                CFK*JLY01
* process data-type entry                                     CFK*DEC00
Z30C     DS    0H                 data type entry found       CFK*DEC00
         MVC   OUTINSTR(2),=C'DS' add DS                      CFK*DEC00
         LA    R6,OUTOPER         get @ start of operand      CFK*DEC00
* get length and @ mult/scale                                 CFK*DEC00
         XR    R9,R9              clear work reg              CFK*DEC00
         ICM   R9,B'0011',SYMENTLN assume 2 byte length       CFK*DEC00
         LA    R7,SYMENTLN+2      get @ mult/scale if 2 byte  CFK*DEC00
         CLI   SYMTYPE,SYMTBIN    is it 2 byte ?              CFK*DEC00
         BNH   Z30C1              br if so                    CFK*DEC00
         SRL   R9,8               else only want 1 byte       CFK*DEC00
         BCTR  R7,0               and mult/scale is back 1    CFK*DEC00
Z30C1    DS    0H                                             CFK*DEC00
         LA    R9,1(R9)           calc actual length          CFK*JAN01
         LR    R0,R9              save actual length          CFK*JAN01
* check for multiplicity                                      CFK*DEC00
         TM    SYMEFLG1,SYMF1MUL  is a multiplicity present ? CFK*DEC00
         BZ    Z30D               br. if not                  CFK*DEC00
* put multiplicity on output                                  CFK*DEC00
         XR    R5,R5              clear work reg              CFK*DEC00
         ICM   R5,B'0111',0(R7)   get multiplicity            CFK*DEC00
         CVD   R5,DWORK           make length PD              CFK*DEC00
         MVC   OUTOPER(9),=X'202020202020202120'  EDit mask   CFK*DEC00
         LA    R1,OUTOPER+8       prime R1                    CFK*DEC00
         EDMK  OUTOPER-1(10),DWORK+3    make mult printable   CFK*DEC00
         MVC   OUTOPER(9),0(R1)   move down number            CFK*DEC00
         SR    R6,R1              calc - number len           CFK*DEC00
         LA    R6,OUTOPER+9(R6)   calc @ next o/p byte        CFK*JAN01
         LA    R7,3(R7)           skip mult to get @ scale    CFK*DEC00
         MR    R8,R5              mul length (R9) by mult (R5)CFK*JAN01
Z30D     DS    0H       put type onto record                  CFK*DEC00
         AR    R10,R9             add total len to curr. adr. CFK*JAN01
         XR    R5,R5              clear work reg              CFK*DEC00
         IC    R5,0(R4)           get data type               CFK*DEC00
         SRL   R5,2               make it type number         CFK*DEC00
         IC    R5,DTTAB(R5)       get character               CFK*DEC00
         STC   R5,0(R6)           put into output             CFK*DEC00
         LA    R6,1(R6)           and point at next byte      CFK*DEC00
* put length onto record                                      CFK*DEC00
         CVD   R0,DWORK           make length PD              CFK*DEC00
         MVC   0(6,R6),=X'D32020202120'  EDit mask            CFK*DEC00
         LA    R1,5(R6)           prime R1                    CFK*DEC00
         EDMK  0(6,R6),DWORK+5    make mult printable         CFK*DEC00
         MVC   1(6,R6),0(R1)      move down number            CFK*DEC00
Z30X     DS    0H       output record                         CFK*DEC00
         ST    R10,CURRADR        save adjusted address       CFK*JAN01
         L     R15,=V(PRINTP)     get @ print and punch rtn   CFK*DEC03
         DROP  R14                tell asm done with R14      CFK*DEC03
         LR    R1,R14             get @ print area            CFK*DEC03
         BASR  R14,R15            call PRINT                  CFK*APR01
         B     Z10A               and handle next entry       CFK*APR01
*
Z80ERR   DS    0H                 error exit                  CFK*SEP00
         OI    FLAGS1,FL1ERROR    set position lost flag      CFK*SEP00
         L     R14,=A(PA)         get @ print area            CFK*APR01
         USING OUTLINE,R14        tell assembler              CFK*SEP00
         MVC   OUTLINE(L'MSG1),MSG1  copy error message       CFK*SEP00
         DROP  R14                tell asm done with R14      CFK*SEP00
         L     R15,=V(PRINTA)     get @ PRINT (only) routine  CFK*APR01
         LR    R1,R14             get @ print area            CFK*DEC03
         BASR  R14,R15            call PRINT                  CFK*APR00
         B     Z90Z1              and exit                    CFK*SEP00
Z90Z     DS    0H                 exit point
         MVC   HEADBUF,TAILBUF    save tail (if present)
         SH    R2,=AL2(L'MAINBUF) point @ tail
         L     R1,SAV@CARD        reload @ input card         CFK*MAY01
         USING SYMCARD,R1         tell assembler R1 is @ card CFK*MAY01
         CLI   SYMDLEN1,L'MAINBUF full data card ?            CFK*MAY01
         BE    Z90Z0              if so exit                  CFK*MAY01
         LA    R2,MAINBUF         else reset data pointer     CFK*MAY01
Z90Z0    DS    0H                                             CFK*MAY01
         ST    R2,WORKADR         save pointer
Z90Z1    DS    0H                 quick exit                  CFK*SEP00
         LEAVE                    exit logic                  CFK*APR01
MVC1     MVC   SAVANAME(1),SYMNAME  EXecuted instruction      CFK*APR01
         DC    C'IMM='
         LTORG
SPACES   DC    CL8' '             constant
MSG1     DC    C' ** Bad SYM record or position lost, remaining SYM carx
               ds will be ignored **'
* table of non-data type entries                              CFK*DEC00
NDTTAB   DC    CL5'DS   '         space                       CFK*DEC00
NDTTBELN EQU   *-NDTTAB           length of one entry         CFK*DEC00
         DC    CL5'CSECT'         CSECT (should not be used)  CFK*DEC00
         DC    CL5'DSECT'         dummy section               CFK*DEC00
         DC    CL5'COM  '         common (?)                  CFK*DEC00
         DC    CL5'DS   '         instruction                 CFK*DEC00
         DC    CL5'CCW  '         CCW, CCW0, CCW1             CFK*DEC00
         DC    CL5'EQU  '         EQUate (XF or Tachyon asm)  CFK*JLY01
* table of data-types
DTTAB    DC    C'C'  X'00' = character                         2     1
         DC    C'X'  X'04' = hexadecimal or pure DBCS (G-type) 2     1
         DC    C'B'  X'08' = binary                            2     1
         DC    C'?'  X'0C' = **invalid** (should not occur)
         DC    C'F'  X'10' = fixed point, full                 1  S  4
         DC    C'H'  X'14' = fixed point, half                 1  S  2
         DC    C'E'  X'18' = floating point, short             1  S  4
         DC    C'D'  X'1C' = floating point, long              1  S  8
         DC    C'A'  X'20' = A-type or Q-type data             1     4
         DC    C'Y'  X'24' = Y-type data                       1     2
         DC    C'S'  X'28' = S-type data                       1     2
         DC    C'V'  X'2C' = V-type data                       1     4
         DC    C'P'  X'30' = packed decimal                    2  S  1
         DC    C'Z'  X'34' = zoned decimal                     2  S  1
         DC    C'L'  X'38' = floating point, extended          1    16
*
CURRADR  DC    F'0'               current address in DSECT    CFK*JAN01
ASAVA    DC    A(SAVA)            @ SAVA csect
WORKADR  DC    A(MAINBUF)         @ current input
TRTAB    DC    C'0123456789ABCDEF' translate to hexadecimal   CFK*DEC00
FLAGS1   DC    X'00'              flags                       CFK*SEP03
FL1DSFND EQU   B'10000000'          Dsect found               CFK*SEP03
FL1ERROR EQU   B'01000000'          bad SYM rec or position lost *SEP03
HEADBUF  DS    CL(SYMMAXLN)       buffer for head portion
MAINBUF  DS    CL56               buffer for data on card
BUFEND   EQU   *                  end of main buffer
MINEND   EQU   BUFEND-SYMMINLN
TAILBUF  EQU   BUFEND-SYMMAXLN,SYMMAXLN  tail entry
DWORK    DS    D                  work area for CVD           CFK*DEC00
ENDADR   DS    A                  @ last entry on card
SAV@CARD DS    A                  save @ input card           CFK*MAY01
SVFLG1   DS    X                  space to manipulate flags from card
SAVEAREA DS    18F                                            CFK*SEP03
* parms to call SAVA with                                     CFK*SEP03
SAVAPRMS DS    0CL12                                          CFK*SEP03
SAVATYPE DC    X'00'              input type                  CFK*SEP03
SAVASECT DC    CL8' '             csect entry is in           CFK*DEC03
SAVAADR  DC    XL3'000000'        input address               CFK*SEP03
SAVANAME DC    CL8' '             label or spaces             CFK*SEP03
* end of SAVA parms                                           CFK*SEP03
         PRINT NOGEN
         YREGS                    register equates
         END
