RS       TITLE 'RS '
***********************************************************************
*                                                                     *
*           Format the parameters of a RS format instruction          *
*                                                                     *
*    eg  STM   1,2,456(7)          if format = x'30', FMTFRS          *
*    or  SRA   1,456(7)            if format = x'31', FMTFRS1         *
*    or  PLO   1,456(7),2,789(10)  if format = x'32', FMTFRS2         *
*                                                                     *
*  Input addressed by R1:                                             *
*    +0  - @ output buffer                                            *
*    +4  - instruction format                                         *
*    +5  - operand format                                             *
*    +6  - instruction length                                         *
*    +8  - instruction TEXT (4 or 6 bytes)                            *
*    +19 - instruction format from AXN table                          *
*    +20 - module returns to here                                     *
*                                                                     *
*  History:                                                           *
*    Check instr. format to see if 2nd reg needed        CFK Jun 1999 *
*    Support FMTFRS2 (PLO)                               CFK Dec 1999 *
*    Uap output line with OUTLINE macro                  CFK Feb 2000 *
*    Use register equates                                CFK Dec 2000 *
*    Use standard linkage conventions                    CFK Nov 2003 *
*                                                                     *
***********************************************************************
         FMTPARMS                 copy parameter map          CFK*JUN99
         OUTLINE                  map output line             CFK*FEB00
RS       CSECT
         ENTER ,                  entry logic                 CFK*NOV03
         LR    R10,R1             copy @ parms                CFK*NOV03
         USING FMTPARMS,R10       tell assembler              CFK*NOV03
         EXTRN BCV                csect
         EXTRN ADDR               csect
         MVC   RSG+15(1),FMTFLG1  pass instr. format to ADDR
         SR    R2,R2              )
         ST    R2,RSG             ) clear ADDR parms
         ST    R2,RSG+4           )
         MVC   RSG+8(4),FMTPA     pass @ output buffer to ADDR
         MVC   RSG+2(2),FMTTEXT3  pass instr. address to ADDR
         MVI   RSG+4,X'01'        flag type 1 address
         ST    R13,RSA+4          put our r13 where BSC expects it
         SR    R2,R2              clear
         ST    R2,RSA              BCV parms
         MVC   RSA+3(1),FMTTEXT2  pass registers to BCV
         L     R14,BCVS           FIND REGISTERS
         CNOP  2,4
         BALR  R14,R14            call BCV csect
RSA      DC    F'0'
         DC    F'0'               r13 reloaded from here
         L     R15,ADDS           get @ ADDR csect            CFK*NOV03
         LA    R1,RSG             get @ parms for ADDR        CFK*NOV03
         BASR  R14,R15            call ADDR csect             CFK*NOV03
         L     R4,FMTPA           get @ output buffer
         USING OUTLINE,R4         tell assembler              CFK*FEB00
         CLI   RSA,C'0'           reg 0-9 ?
         BNE   RS1                no
         MVC   OUTOPER(1),RSA+1   yes - copy 1 byte reg no.
         BCTR  R4,0               dec o/p buffer ptr
         B     RS2                and continue
RS1      MVC   OUTOPER(2),RSA     copy 2 byte reg no.
RS2      MVI   OUTOPER+2,C','     add ,
         CLI   FMTFMT,FMTFRS      2nd register needed ?
         BNE   RSOV               branch if 2nd reg not needed
         CLI   RSA+2,C'0'         reg 0-9 ?
         BNE   RS3                no
         MVC   OUTOPER+3(1),RSA+3 yes - copy 1 byte reg no.
         BCTR  R4,0               dec o/p bufer ptr
         B     RS4                and continue
RS3      MVC   OUTOPER+3(2),RSA+2 copy 2 byte reg no.
RS4      MVI   OUTOPER+5,C','     add 2nd ,
         LA    R4,3(R4)           allow for 2nd digit
RSOV     L     R3,RSG+12          get length of address
         BCTR  R3,0               - 1 for mvc
         EX    R3,MVS             copy address to o/p buffer
         CLI   FMTFMT,FMTFRS2     any more to do ?            CFK*DEC99
         BNE   EXIT               branch if we are done       CFK*DEC99
         AR    R4,R3              calc @ end of 1st address   CFK*DEC99
         MVI   OUTOPER+4,C','     add 3rd ,                   CFK*DEC99
         CLI   RSA+2,C'0'         reg 0-9 ?                   CFK*DEC99
         BNE   RS5                no                          CFK*DEC99
         MVC   OUTOPER+5(1),RSA+3 yes - copy 1 byte reg no.   CFK*DEC99
         BCTR  R4,0               dec o/p bufer ptr           CFK*DEC99
         B     RS6                and continue                CFK*DEC99
RS5      MVC   OUTOPER+5(2),RSA+2 copy 2 byte reg no.         CFK*DEC99
RS6      MVI   OUTOPER+7,C','     add 4th ,                   CFK*DEC99
         XC    RSG,RSG            clear ADDR parms            CFK*NOV03
         MVC   RSG+8(4),FMTPA     pass @ output buf to ADDR   CFK*NOV03
         MVC   RSG+2(2),FMTTEXT5  pass instr. address to ADDR CFK*NOV03
         MVI   RSG+4,X'01'        flag type 1 address         CFK*NOV03
         L     R15,ADDS           get @ ADDR csect            CFK*NOV03
         LA    R1,RSG             get @ parms for ADDR        CFK*NOV03
         BASR  R14,R15            call ADDR csect             CFK*NOV03
         L     R3,RSG+12          get length of address       CFK*NOV03
         BCTR  R3,0               - 1 for mvc                 CFK*DEC99
         EX    R3,MVS2            copy address to o/p buffer  CFK*DEC99
EXIT     DS    0H                 exit point                  CFK*DEC99
         LEAVE ,                  return                      CFK*NOV03
MVS      MVC   OUTOPER+3(1),RSG   EXecuted instruction
MVS2     MVC   OUTOPER+8(1),RSG   EXecuted instruction        CFK*NOV03
         DC    C'IMM='
BCVS     DC    A(BCV)             @ bcv csect
ADDS     DC    A(ADDR)            @ addr csect
R4SAVE   DC    F'0'               space to save reg 4         CFK*JAN00
* Parms to call ADDR with                                     CFK*NOV03
*  input: addressed by R14                                            *
*    +0  2 bytes x'00' (always ?)                                     *
*    +2  2 byte address part of instruction                           *
*    +4  1 byte flag (x'00' or x'01' if format 1 adr.)                *
*    +5  start of 3 byte length for SS instrs or x'00'                *
*    +6  2 byte index reg no. (char 00-15) or x'0000'                 *
*    +8  4 byte address of output buffer holding current line         *
*    +15 1 byte instruction format from AXN                           *
*                                                                     *
*  output: addressed by R14                                           *
*    +0  1-12 byte address                                            *
*    +12 length of address (fullword)                                 *
RSG      DC    4F'0'                                          CFK*NOV03
* end of ADDR parms                                           CFK*NOV03
SAVEAREA DS    18F                                            CFK*NOV03
         YREGS ,                  register equates            CFK*DEC00
         END

