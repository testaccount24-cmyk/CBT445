RX       TITLE 'RX '
***********************************************************************
*                                                                     *
*           Format parameters for a RX format instruction.            *
*                                                                     *
*    eg  LA  1,123(1,2) if FMTFMT = X'20' (FMTRX)                     *
*    or  B   123(1,2)   if FMTFMT = X'21' (FMTRX1)                    *
*                                                                     *
*  Input addressed by R1:                                             *
*    +0  @ output buffer                                              *
*    +4                                                               *
*    +8  instruction byte 1                                           *
*    +9  instruction byte 2                                           *
*    +10 2 bytes passed to ADDR csect (1st adr call)                  *
*    +19 instruction format from AXN                                  *
*                                                                     *
*  History:                                                           *
*    Map parms with FMTPARMS macro                       CFK Feb 2000 *
*    Map output line with OUTLINE macro                  CFK Feb 2000 *
*    Support FMTRX1 (entended branch mnemonics)          CFK Apr 2000 *
*    Use register equates                                CFK Dec 2000 *
*    Use standard linkage conventions                    CFK Nov 2003 *
*                                                                     *
***********************************************************************
         FMTPARMS                 map parameters              CFK*FEB00
         OUTLINE                  map output line             CFK*FEB00
RX       CSECT
         ENTER ,                  entry logic                 CFK*NOV03
         LR    R10,R1             copy @ parms                CFK*NOV03
         USING FMTPARMS,R10       tell assembler              CFK*NOV03
         EXTRN BCV                csect
         EXTRN ADDR               csect
         MVC   RADX+15(1),FMTFLG1 pass instr format to ADDR
         SR    R2,R2              ) clear
         ST    R2,RXG             )  BCV parms
         MVC   RADX+8(4),FMTPA    pass @ output buffer to ADDR
         MVC   RXG+3(1),FMTTEXT2  pass reg number to BCV
         L     R14,BCVX           CONVERT REGISTER
         ST    R13,RXG+4          AND INCEX
         CNOP  2,4
         BALR  R14,R14            call BCV routine
RXG      DC    F'0'
         DC    F'0'               r13 reloaded from here
         SR    R2,R2              )
         ST    R2,RADX            ) clear ADDR parms
         ST    R2,RADX+4          )
         MVC   RADX+2(2),FMTTEXT3 pass address to ADDR
         MVC   RADX+6(2),RXG+2    pass index reg number to ADDR
         L     R15,ADDX           get @ ADDR csect            CFK*NOV03
         LA    R1,RADX            get @ parms for ADDR        CFK*NOV03
         BASR  R14,R15            call ADDR csect             CFK*NOV03
         L     R4,FMTPA           get @ output buffer
         USING OUTLINE,R4         tell assembler              CFK*FEB00
         CLI   FMTFMT,FMTFRX1     leading reg needed ?        CFK*APR00
         BNE   RX0                no - copy register          CFK*APR00
         SH    R4,=H'3'           yes - adjust output pointer CFK*APR00
         B     RX3                and copy address            CFK*APR00
RX0      DS    0H                                             CFK*APR00
         CLI   RXG,C'0'           reg 0-9 ?
         BNE   RX1                no
         MVC   OUTOPER(1),RXG+1   yes - move 1 byte reg no.
         S     R4,RONE            dec o/p buffer adr
         B     RX2                and continue
RX1      MVC   OUTOPER(2),RXG     copy 2 byte reg no.
RX2      MVI   OUTOPER+2,C','     add ,
RX3      DS    0H                                             CFK*APR00
         L     R3,RADX+12         get address length
         S     R3,RONE            -1 for mvc
         EX    R3,MVR             copy address to o/p buffer
         LEAVE ,                  RETURN                      CFK*NOV03
MVR      MVC   OUTOPER+3(1),RADX  EXecuted instruction
         DC    C'IMM='
ADDX     DC    A(ADDR)            @ ADDR csect
BCVX     DC    A(BCV)             @ BCV csect
RONE     DC    F'1'
* parms to call ADDR                                          CFK*NOV03
*  input: addressed by R14                                            *
*    +0  2 bytes x'00' (always ?)                                     *
*    +2  2 byte address part of instruction                           *
*    +4  1 byte flag (x'00' or x'01' if format 1 adr.)                *
*    +5  start of 3 byte length for SS instrs or x'00'                *
*    +6  2 byte index reg no. (char 00-15) or x'0000'                 *
*    +8  4 byte address of output buffer holding current line         *
*    +15 1 byte instruction format from AXN                           *
*    +16 callers R13                                                  *
*    +20 return to here                                               *
*                                                                     *
*  output: addressed by R14                                           *
*    +0  1-12 byte address                                            *
*    +12 length of address (fullword)                                 *
RADX     DC    4F'0'                                          CFK*NOV03
* end of ADDR parms                                           CFK*NOV03
SAVEAREA DS    18F                                            CFK*NOV03
         YREGS ,                  register equates            CFK*DEC00
         END
