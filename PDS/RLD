RLD      TITLE 'RLD '
***********************************************************************
*                                                                     *
*  Process RLD card from input.                                       *
*                                                                     *
*  Called by PASS1.                                                   *
*                                                                     *
*  Parms @ r1:                                                        *
*    +0 - @ input card                                                *
*                                                                     *
*  History:                                                           *
*    Map RLD cards.                                       CFK Mar 2000*
*    Exit after issuing RLD buffer full message.          CFK Dec 2000*
*    Use register equates.                                CFK Dec 2000*
*    Check RLD length is valid (1-56).                    CFK Jan 2002*
*    Allow for up to 250 RLD cards.                       CFK Nov 2002*
*    Put RLD data into dynamic area.                  CFK Mar-Apr 2003*
*    Expand RLD data into dynamic area ready to sort. CFK Apr-May 2003*
*    Use standard linkage conventions                     CFK Sep 2003*
*    Tidy up call to PRINTA.                              CFK Dec 2003*
*                                                                     *
***********************************************************************
RLDCARD  DSECT            from-to map RLD cards
RLDCON1  DS    X'02'         1-1  constant x'02'
RLDCON2  DS    CL3'RLD'      2-4  constant
         DS    CL6           5-10 blanks
RLDCLEN  DS    XL2          11-12 number of bytes of RLD data
RLDCLEN1 EQU   RLDCLEN+1,1        1 byte data length
         DS    CL4          13-16 blanks
RLDCDATA DS    XL56         17-72 1 to 56 bytes of RLD data
RLDCSEQ  DS    CL8          73-80 sequence number and/or deck ID
*
         RLDITEM                  map RLD item on input card  CFK*APR03
*                                                             CFK*APR03
         RLDARRAY                                             CFK*MAY03
*                                                             CFK*APR03
RLD      CSECT
         ENTER ,                  entry logic                 CFK*SEP03
         ENTRY NBR                ref'ed by CRLD
         EXTRN PA                 Print Area in PASS1 csect
         EXTRN PRINTA             csect                       CFK*SEP03
         EXTRN ARLDE              in CRLD csect               CFK*MAR03
         CLC   NBR(4),RL200       rld buffer full ?
         BL    SRLD               no - ok
*                  we need a (larger) RLD buffer              CFK*MAR03
         ST    R1,RL1             save r1                     CFK*SEP03
         L     R5,RLDBUFLN        get current length          CFK*MAR03
         LA    R3,4096-112(R5,R5) calc new buffer len-112     CFK*APR03
         ST    R3,RL200           save new max safe length    CFK*APR03
         LA    R0,112(R3)         calc new buffer length      CFK*APR03
         LR    R3,R0              copy new length             CFK*MAR03
         ST    R0,RLDBUFLN        save new length             CFK*MAR03
*                                                             CFK*MAR03
         GETMAIN RU,LV=(0),SP=1   get new buffer              CFK*APR03
*                                                             CFK*MAR03
         L     R4,RLDBUF@         get old address             CFK*MAR03
         ST    R1,RLDBUF@         save new address            CFK*MAR03
         L     R14,AARLDE         get @ ARLDE in CRLD         CFK*MAR03
         ST    R1,0(R14)          point ARLDE @ new buffer    CFK*MAR03
         LTR   R0,R5              copy old length             CFK*MAR03
         BZ    NOBUFFER           if no old buffer skip free  CFK*MAR03
         LR    R2,R1              copy new address            CFK*MAR03
         LR    R1,R4              copy old buffer address     CFK*MAR03
         MVCL  R2,R4              copy old data               CFK*MAR03
*                                                             CFK*MAR03
         FREEMAIN RU,LV=(0),A=(1),SP=1 free old buffer        CFK*APR03
*                                                             CFK*MAR03
NOBUFFER DS    0H                                             CFK*MAR03
         L     R1,RL1             reload @ parms              CFK*SEP03
SRLD     DS    0H                                             CFK*MAR03
         L     R1,0(R1)           get @ input card
         USING RLDCARD,1          tell assembler              CFK*MAR00
         LH    R4,RLDCLEN         get data length             CFK*MAR03
         CH    R4,=H'0'           any data on card ?          CFK*MAR03
         BNH   BADCARD            error if none               CFK*MAR03
         CH    R4,=H'56'          valid length ?              CFK*MAR03
         BNH   GOODCARD           branch if OK                CFK*JAN02
BADCARD  DS    0H                                             CFK*JAN02
         L     R3,=A(PA)          get @ print area            CFK*SEP03
         MVC   0(27,R3),=C'** invalid data length'  copy msg  CFK*JAN02
         MVC   28(80,R3),RLDCARD  add card to message         CFK*JAN02
         L     R15,XRPT           get @ PRINTA csect          CFK*SEP03
         LR    R1,R3              get @ print area            CFK*DEC03
         BASR  R14,R15            call PRINTA                 CFK*SEP03
         LEAVE ,                  and exit                    CFK*SEP03
GOODCARD DS    0H                                             CFK*JAN02
         LA    R5,RLDCDATA        get @ first entry on card   CFK*MAY03
         USING RLDITEM,R5                                     CFK*MAY03
         L     R3,RLDBUF@         get @ RLD buffer            CFK*MAR03
         A     R3,NBR             calc @ new point to fill    CFK*MAR03
         USING RLDARRAY,R3                                    CFK*MAY03
NEXTITEM DS    0H                                             CFK*MAY03
         TM    LASTFLAG,RLDAFNXT  last entry continued ?      CFK*MAY03
         BO    MOVE4              br if continued             CFK*MAY03
         MVC   RLDASDID,RLDISDID  copy current section ID     CFK*MAY03
         MVC   RLDATGID,RLDITGID  copy target section ID      CFK*MAY03
         LA    R5,RLDIFLAG        point @ short entry         CFK*MAY03
         DROP  R5                                             CFK*MAY03
         SH    R4,=H'4'           sub data len moved          CFK*MAY03
         B     MOVEREST           and skip copy of prev IDs   CFK*MAY03
MOVE4    DS    0H                                             CFK*MAY03
         SH    R3,=H'8'           get @ prev entry            CFK*MAY03
         MVC   8(4,R3),0(R3)      copy section IDs            CFK*MAY03
         LA    R3,8(R3)           back to current entry       CFK*MAY03
MOVEREST DS    0H                                             CFK*MAY03
         USING RLDIFLAG,R5                                    CFK*MAY03
         MVC   RLDAADR,RLDIADR    copy address                CFK*MAY03
         MVC   RLDAFLAG,RLDIFLAG  copy flags byte             CFK*MAY03
         MVC   LASTFLAG,RLDIFLAG  and save it for next item   CFK*MAY03
         LA    R3,8(R3)           Point @ next output entry   CFK*MAY03
         LA    R5,4(R5)           point @ input entry         CFK*MAY03
         SH    R4,=H'4'           sub data len moved          CFK*MAY03
         BP    NEXTITEM           loop if more data on card   CFK*MAY03
         S     R3,RLDBUF@         calc new bytes used         CFK*MAY03
         ST    R3,NBR             save loc in buffer          CFK*APR03
         LEAVE ,                  exit                        CFK*SEP03
         LTORG                                                CFK*DEC02
XRPT     DC    A(PRINTA)          @ PRINTA csect              CFK*SEP03
AARLDE   DC    A(ARLDE)           @ ARLDE in CRLD csect       CFK*MAR03
RL1      DC    F'0'               r1  saved here during call to PRINT
* the next three fields must stay together, see PASS0         CFK*DEC03
NBR      DC    F'0'               entry point ( bytes used in array)
RL200    DC    F'0'               available RLD table length  CFK*MAR03
RLDBUFLN DC    A(0)               RLD buffer length           CFK*MAR03
RLDBUF@  DC    A(0)               RLD buffer address          CFK*MAR03
SAVEAREA DS    18F                save area                   CFK*SEP03
LASTFLAG DC    X'00'              flags for last RLD entry    CFK*MAY03
         YREGS ,                  register equates            CFK*DEC00
         END
